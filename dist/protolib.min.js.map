{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index","protolib.js","lib/libp.js","lib/libs.js","node_modules/os-browserify/browser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","fid","IS_BROWSER","window","Object","defineProperty","Function","prototype","configurable","enumerable","get","this","__protolib_name__","enumberable","writable","value","name","ProtoLib","handle","deleteCacheForProto","proto","protoChain","hasOwnProperty","indexOf","cached","self","attachLibraryToSelf","libs","applyLibraryToPrototypes","p","c","obj","addMethod","k","attached","set","v","getPrototypeOf","last","constructor","__get_protolib_name__","test","toLowerCase","currentThis","libp","unshift","object","each","removeLibraryFromPrototypes","getThisValueAndInvoke","callback","undefined","valueOf","setHandle","h","extend","getCallback","arguments","args","toArray","push","apply","remove","unload","load","./lib/libp","./lib/libs",2,"string","camelize","decamelize","differenceFromString","other","replaceTokens","replaceStringTokens","intersectString","repeat","times","rtrim","what","ltrim","htmlEncode","htmlDecode","addSlashes","ucFirst","lcFirst","titleCase","splice","index","count","add","ellipses","place","shuffle","splitter","reverse","withoutTrailingSlash","withTrailingSlash","regexpSafe","pad","delim","pre","newlineToBreak","tabsToSpan","wordWrapToLength","width","padleft","padright","omitFirst","array","union","difference","intersect","without","rotate","direction","amount","rotateLeft","rotateRight","makeUnique","unique","ascending","descending","number","to","isInt","toString","randomIntInRange","randomNumberInRange","factorial","choose","daysFrom","date","daysFromNow","secondsFrom","secondsFromNow","yearsFrom","yearsFromNow","monthsFrom","monthsFromNow","hoursFrom","hoursFromNow","minutesFrom","minutesFromNow","monthsAgo","daysAgo","secondsAgo","minutesAgo","yearsAgo","clockTime","function","inherits","histogram","copy","start","end","occurrencesOf","keys","size","isNumeric","getNumeric","isEmpty","isArray","isPureObject","isString","isUndefined","isNull","isBoolean","isFunction","isArguments","toNumber","toInt","random","every","any","first","findChildAtPath","path","delimiter","done","clone","only","where","predicateFunction","whereKeys","invert","max","min","implements","method","implementsOwn","advanceDays","adjustForWeeked","d","advanceMonths","advanceYears","yymmdd","omitMS",3,"fixFirefoxFunctionString","replace","HAS_OS","NULL_FUNCTION","ret","split","join","$","trim","sarr","oarr","differenceFromArray","generic","intersectArray","parseInt","isNaN","isFinite","os","RegExp","map","&","<",">","\"","'","m","&amp;","&lt;","&gt;","&quot;","&#039;","charAt","toUpperCase","slice","arr","substring","substr","replaceSplits","j","Math","floor","tmp","str","platform","thisLength","paddingLeft","cols","item","len","olen","shift","daysInTheFuture","adjustForWeekend","setTime","getTime","getDay","monthsInTheFuture","yearsInTheFuture","yyyymmdd","dd","getDate","mm","getMonth","yyyy","getFullYear","Number","MAX_VALUE","NaN","Infinity","Date","setDate","setSeconds","getSeconds","setFullYear","setMonth","setHours","getHours","setMinutes","getMinutes","ms","secs","mins","hrs","superConstructor","TypeError","super_","setPrototypeOf","arrays","simpleDiff","intermediate","intersection","idx","res","pop","visited","sort","b","val","Array","regexp","exec","parseFloat","vals","radix","negative","abs","rangeA","rangeB","property","broken","exit","isArgs","key","original","invoked","JSON","parse","stringify","message","types","type","filtered","typeArr","typeObj","typeItem","predicate","temp","isObject","func","maxValue","minValue",4,"endianness","hostname","location","loadavg","uptime","freemem","totalmem","cpus","release","navigator","appVersion","networkInterfaces","getNetworkInterfaces","arch","tmpdir","tmpDir","EOL"],"mappings":"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","file":"protolib.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function () {\n    'use strict';\n\n    /**\n     * Function Identifier.\n     * @type {Number}\n     */\n    var fid = 0,\n\n    /**\n     * True if the Node.js environment is loaded, false otherwise.\n     * @type {Boolean}\n     */\n    IS_BROWSER = typeof window !== 'undefined';\n\n    // This provides a way to determine the name of a function constructor in a platform agnostic way...\n    Object.defineProperty(Function.prototype, '__get_protolib_name__', {\n        configurable : true,\n        enumerable   : false,\n        get          : function () {\n            if(typeof this.__protolib_name__ !== 'string') {\n                Object.defineProperty(this, '__protolib_name__', {\n                    configurable : false,\n                    enumberable  : false,\n                    writable     : false,\n                    value        : typeof this.name === 'string' && this.name ? this.name : 'anonymous:' + fid++\n                });\n            }\n            return this.__protolib_name__;\n        }\n    });\n\n    var ProtoLib = function (handle) {\n        // Prevent Function.call or binding...\n        if(!(this instanceof ProtoLib)) return new ProtoLib(handle);\n\n        handle = handle || 'p';\n\n        /**\n         * A self reference.\n         * @type {ProtoLib}\n         */\n        var self = this,\n\n        /**\n         * Whether or not the library functions have been attached to the prototypes.\n         * @type {Boolean}\n         */\n        attached = false,\n\n        /**\n         * Points to the current this item.\n         * @type {*}\n         */\n        currentThis = null,\n\n        /**\n         * Stores cached library proto reference objects\n         * @type {Object}\n         */\n        cached = {},\n\n        /**\n         * Stores the constructor chain for each prototype as an array.\n         * For example: { string: ['object', 'string'] }.\n         * Another example: { myCustomClassThatExtendsString: ['object', 'string', 'myCustomClassThatExtendsString'] }\n         * @type {Object}\n         */\n        protoChain = {},\n\n        /**\n         * The static library\n         */\n        libs,\n\n        /**\n         * The protolibrary\n         */\n        libp;\n\n        /**\n         * Deletes the cache for the given prototype, and all others that this prototype inherits from.\n         * Which means if 'proto' is 'object', all cache will be deleted.\n         * @param {String} proto The prototype to delete the cache for.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function deleteCacheForProto (proto) {\n            for(var i in protoChain) {\n                if(protoChain.hasOwnProperty(i)) {\n                    if(protoChain[i].indexOf(proto) > -1) delete cached[i];\n                }\n            }\n            return self;\n        }\n\n        /**\n         * Appends all the library functions to this instance for static use.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function attachLibraryToSelf () {\n            for(var i in libs)\n                if(libs.hasOwnProperty(i) && !self[i]) self[i] = libs[i];\n            return self;\n        }\n\n        /**\n         * Adds the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function applyLibraryToPrototypes () {\n            var p, c, obj = {}, i, name,\n\n            addMethod = function addMethod (o, k) { if(!obj[k]) obj[k] = o; };\n\n            if(!attached) {\n                attached = true;\n                Object.defineProperty(Object.prototype, handle, {\n                    configurable : true,\n                    enumerable   : false,\n                    // Allow users to overwrite the handle on a per instance basis...\n                    set: function (v) {\n                        if(this[handle] !== v) {\n                            Object.defineProperty(this, handle, {\n                                configurable : true,\n                                enumerable   : true,\n                                writable     : true,\n                                value        : v\n                            });\n                        }\n                    },\n                    // Returns the libp library...\n                    get: function () {\n                        obj = {}; i = 0;\n                        p = Object.getPrototypeOf(this);\n                        var last = null;\n\n                        do { // This will traverse the protoypes of the object, so inherited properties will be made available\n                             // to objects up the prototype chain...\n                            if(p.constructor) {\n                                name = p.constructor.__get_protolib_name__;\n                                if(/^anonymous:/.test(name)) name = 'anonymous';\n\n                                if(p && name && typeof name === 'string') {\n                                    c = name.toLowerCase();\n\n                                    if(cached[c] && i === 0) {\n                                        currentThis = this;\n                                        return cached[c];\n                                    }\n                                    else if(libp[c]) {\n                                        if(!protoChain[c]) protoChain[c] = [c];\n                                        if(last) protoChain[last].unshift(c);\n\n                                        currentThis = this;\n                                        libs.object.each(libp[c], addMethod);\n                                        cached[c] = obj;\n\n                                        last = c;\n                                    }\n                                }\n                            }\n\n                            i++;\n\n                        } while(p = Object.getPrototypeOf(p)); // jshint ignore:line\n                        return obj;\n                    }\n                });\n            }\n            return self;\n        }\n\n        /**\n         * Removes the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function removeLibraryFromPrototypes () {\n            if(attached) {\n                delete Object.prototype[handle];\n                attached = false;\n            }\n            return self;\n        }\n\n        /**\n         * Retrieves the last item from the 'thisPointerStack' and invokes the provided callback with it.\n         * @param {Function} callback The callback to be invoked with the current 'this' value.\n         * @return The result of the invocation of the callback.\n         */\n        function getThisValueAndInvoke (callback) {\n            return callback(currentThis !== undefined && currentThis !== null ? currentThis.valueOf() : currentThis);\n        }\n\n        libs = require('./lib/libs')();\n        libp = require('./lib/libp')(libs, getThisValueAndInvoke);\n\n        /**\n         * Sets the handle\n         * @param {String} h The new handle\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.setHandle = function (h) {\n            if(typeof h === 'string') handle = h;\n            removeLibraryFromPrototypes();\n            applyLibraryToPrototypes();\n            return self;\n        };\n\n        /**\n         * Adds a library method to a prototype.\n         * @param {String} name The name of the library method to add.\n         * @param {String=} [proto='object'] The prototype to add to. If omitted, it will default to object.\n         * @param {Function} callback The method to add.\n         * @return {Boolean} True if the method was added, false otherwise.\n         */\n        this.extend = function (name, proto, callback) {\n            callback = libs.object.getCallback(arguments);\n\n            if(typeof name !== 'string' || !(callback instanceof Function)) return false;\n            if(!proto || typeof proto !== 'string') proto = 'object';\n\n            if(!libp[proto]) libp[proto] = {};\n            if(!libs[proto]) libs[proto] = {};\n\n            libs[proto][name] = callback;\n            libp[proto][name] = function () {\n                var args = libs.object.toArray(arguments);\n                return getThisValueAndInvoke(function (c) {\n                    args.push(c);\n                    return callback.apply(c, args);\n                });\n            };\n\n            deleteCacheForProto(proto);\n            return true;\n        };\n\n        /**\n         * Remvoes a library method from a prototype.\n         * @param {String} proto The prototype to remove from.\n         * @param {String} name The name of the library method to remove.\n         * @return {Boolean} True if the method was removed, false otherwise.\n         */\n        this.remove = function (name, proto) {\n            if(typeof proto !== 'string' || typeof name !== 'string') return false;\n\n            if(libp[proto] && libp[proto][name]) {\n                delete libp[proto][name];\n                if(libs[proto] && libs[proto][name]) delete libs[proto][name];\n                deleteCacheForProto(proto);\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Removes the prototype library reference from the object prototype.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.unload = function () {\n            removeLibraryFromPrototypes();\n            return self;\n        };\n\n        /**\n         * Applies the library to the object prototype and all static functions\n         * to the current ProtoLib instance.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.load = function () {\n            applyLibraryToPrototypes();\n            attachLibraryToSelf();\n        }\n\n        // Apply the library to the object prototype, and attach all the static functions\n        // to the current ProtoLib instance...\n        self.load();\n    };\n\n    var x = new ProtoLib('_');\n\n    return !IS_BROWSER ?\n        module.exports  = ProtoLib :\n        window.ProtoLib = ProtoLib ;\n}());\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function () {\n    'use strict';\n\n    /**\n     * Function Identifier.\n     * @type {Number}\n     */\n    var fid = 0,\n\n    /**\n     * True if the Node.js environment is loaded, false otherwise.\n     * @type {Boolean}\n     */\n    IS_BROWSER = typeof window !== 'undefined';\n\n    // This provides a way to determine the name of a function constructor in a platform agnostic way...\n    Object.defineProperty(Function.prototype, '__get_protolib_name__', {\n        configurable : true,\n        enumerable   : false,\n        get          : function () {\n            if(typeof this.__protolib_name__ !== 'string') {\n                Object.defineProperty(this, '__protolib_name__', {\n                    configurable : false,\n                    enumberable  : false,\n                    writable     : false,\n                    value        : typeof this.name === 'string' && this.name ? this.name : 'anonymous:' + fid++\n                });\n            }\n            return this.__protolib_name__;\n        }\n    });\n\n    var ProtoLib = function (handle) {\n        // Prevent Function.call or binding...\n        if(!(this instanceof ProtoLib)) return new ProtoLib(handle);\n\n        handle = handle || 'p';\n\n        /**\n         * A self reference.\n         * @type {ProtoLib}\n         */\n        var self = this,\n\n        /**\n         * Whether or not the library functions have been attached to the prototypes.\n         * @type {Boolean}\n         */\n        attached = false,\n\n        /**\n         * Points to the current this item.\n         * @type {*}\n         */\n        currentThis = null,\n\n        /**\n         * Stores cached library proto reference objects\n         * @type {Object}\n         */\n        cached = {},\n\n        /**\n         * Stores the constructor chain for each prototype as an array.\n         * For example: { string: ['object', 'string'] }.\n         * Another example: { myCustomClassThatExtendsString: ['object', 'string', 'myCustomClassThatExtendsString'] }\n         * @type {Object}\n         */\n        protoChain = {},\n\n        /**\n         * The static library\n         */\n        libs,\n\n        /**\n         * The protolibrary\n         */\n        libp;\n\n        /**\n         * Deletes the cache for the given prototype, and all others that this prototype inherits from.\n         * Which means if 'proto' is 'object', all cache will be deleted.\n         * @param {String} proto The prototype to delete the cache for.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function deleteCacheForProto (proto) {\n            for(var i in protoChain) {\n                if(protoChain.hasOwnProperty(i)) {\n                    if(protoChain[i].indexOf(proto) > -1) delete cached[i];\n                }\n            }\n            return self;\n        }\n\n        /**\n         * Appends all the library functions to this instance for static use.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function attachLibraryToSelf () {\n            for(var i in libs)\n                if(libs.hasOwnProperty(i) && !self[i]) self[i] = libs[i];\n            return self;\n        }\n\n        /**\n         * Adds the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function applyLibraryToPrototypes () {\n            var p, c, obj = {}, i, name,\n\n            addMethod = function addMethod (o, k) { if(!obj[k]) obj[k] = o; };\n\n            if(!attached) {\n                attached = true;\n                Object.defineProperty(Object.prototype, handle, {\n                    configurable : true,\n                    enumerable   : false,\n                    // Allow users to overwrite the handle on a per instance basis...\n                    set: function (v) {\n                        if(this[handle] !== v) {\n                            Object.defineProperty(this, handle, {\n                                configurable : true,\n                                enumerable   : true,\n                                writable     : true,\n                                value        : v\n                            });\n                        }\n                    },\n                    // Returns the libp library...\n                    get: function () {\n                        obj = {}; i = 0;\n                        p = Object.getPrototypeOf(this);\n                        var last = null;\n\n                        do { // This will traverse the protoypes of the object, so inherited properties will be made available\n                             // to objects up the prototype chain...\n                            if(p.constructor) {\n                                name = p.constructor.__get_protolib_name__;\n                                if(/^anonymous:/.test(name)) name = 'anonymous';\n\n                                if(p && name && typeof name === 'string') {\n                                    c = name.toLowerCase();\n\n                                    if(cached[c] && i === 0) {\n                                        currentThis = this;\n                                        return cached[c];\n                                    }\n                                    else if(libp[c]) {\n                                        if(!protoChain[c]) protoChain[c] = [c];\n                                        if(last) protoChain[last].unshift(c);\n\n                                        currentThis = this;\n                                        libs.object.each(libp[c], addMethod);\n                                        cached[c] = obj;\n\n                                        last = c;\n                                    }\n                                }\n                            }\n\n                            i++;\n\n                        } while(p = Object.getPrototypeOf(p)); // jshint ignore:line\n                        return obj;\n                    }\n                });\n            }\n            return self;\n        }\n\n        /**\n         * Removes the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function removeLibraryFromPrototypes () {\n            if(attached) {\n                delete Object.prototype[handle];\n                attached = false;\n            }\n            return self;\n        }\n\n        /**\n         * Retrieves the last item from the 'thisPointerStack' and invokes the provided callback with it.\n         * @param {Function} callback The callback to be invoked with the current 'this' value.\n         * @return The result of the invocation of the callback.\n         */\n        function getThisValueAndInvoke (callback) {\n            return callback(currentThis !== undefined && currentThis !== null ? currentThis.valueOf() : currentThis);\n        }\n\n        libs = require('./lib/libs')();\n        libp = require('./lib/libp')(libs, getThisValueAndInvoke);\n\n        /**\n         * Sets the handle\n         * @param {String} h The new handle\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.setHandle = function (h) {\n            if(typeof h === 'string') handle = h;\n            removeLibraryFromPrototypes();\n            applyLibraryToPrototypes();\n            return self;\n        };\n\n        /**\n         * Adds a library method to a prototype.\n         * @param {String} name The name of the library method to add.\n         * @param {String=} [proto='object'] The prototype to add to. If omitted, it will default to object.\n         * @param {Function} callback The method to add.\n         * @return {Boolean} True if the method was added, false otherwise.\n         */\n        this.extend = function (name, proto, callback) {\n            callback = libs.object.getCallback(arguments);\n\n            if(typeof name !== 'string' || !(callback instanceof Function)) return false;\n            if(!proto || typeof proto !== 'string') proto = 'object';\n\n            if(!libp[proto]) libp[proto] = {};\n            if(!libs[proto]) libs[proto] = {};\n\n            libs[proto][name] = callback;\n            libp[proto][name] = function () {\n                var args = libs.object.toArray(arguments);\n                return getThisValueAndInvoke(function (c) {\n                    args.push(c);\n                    return callback.apply(c, args);\n                });\n            };\n\n            deleteCacheForProto(proto);\n            return true;\n        };\n\n        /**\n         * Remvoes a library method from a prototype.\n         * @param {String} proto The prototype to remove from.\n         * @param {String} name The name of the library method to remove.\n         * @return {Boolean} True if the method was removed, false otherwise.\n         */\n        this.remove = function (name, proto) {\n            if(typeof proto !== 'string' || typeof name !== 'string') return false;\n\n            if(libp[proto] && libp[proto][name]) {\n                delete libp[proto][name];\n                if(libs[proto] && libs[proto][name]) delete libs[proto][name];\n                deleteCacheForProto(proto);\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Removes the prototype library reference from the object prototype.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.unload = function () {\n            removeLibraryFromPrototypes();\n            return self;\n        };\n\n        /**\n         * Applies the library to the object prototype and all static functions\n         * to the current ProtoLib instance.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.load = function () {\n            applyLibraryToPrototypes();\n            attachLibraryToSelf();\n        }\n\n        // Apply the library to the object prototype, and attach all the static functions\n        // to the current ProtoLib instance...\n        self.load();\n    };\n\n    var x = new ProtoLib('_');\n\n    return !IS_BROWSER ?\n        module.exports  = ProtoLib :\n        window.ProtoLib = ProtoLib ;\n}());\n\n},{\"./lib/libp\":2,\"./lib/libs\":3}],2:[function(require,module,exports){\n(function () {\n    'use strict';\n    function libp (libs, getThisValueAndInvoke) {\n        var libp = {\n            string: {\n\n                camelize: function camelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.camelize(s);\n                    });\n                },\n\n                decamelize: function decamelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.decamelize(s);\n                    });\n                },\n\n                differenceFromString: function differenceFromString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.differenceFromString(s, other);\n                    });\n                },\n\n                replaceTokens: function replaceTokens () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.replaceStringTokens(s);\n                    });\n                },\n\n                intersectString: function intersectString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.intersectString(s, other);\n                    });\n                },\n\n                repeat: function repeat (times) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.repeat(s, times);\n                    });\n                },\n\n                rtrim: function rtrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.rtrim(s, what);\n                    });\n                },\n\n                ltrim: function ltrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ltrim(s, what);\n                    });\n                },\n\n                htmlEncode: function htmlEncode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlEncode(s);\n                    });\n                },\n\n                htmlDecode: function htmlDecode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlDecode(s);\n                    });\n                },\n\n                addSlashes: function addSlashes () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.addSlashes(s);\n                    });\n                },\n\n                ucFirst: function ucFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ucFirst(s);\n                    });\n                },\n\n                lcFirst: function lcFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.lcFirst(s);\n                    });\n                },\n\n                titleCase: function titleCase () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.titleCase(s);\n                    });\n                },\n\n                splice: function splice (index, count, add) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.splice(s, index, count, add);\n                    });\n                },\n\n                ellipses: function ellipses_ (length, place, ellipses) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ellipses(s, length, place, ellipses);\n                    });\n                },\n\n                shuffle: function shuffle (splitter) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.shuffle(s, splitter);\n                    });\n                },\n\n                reverse: function reverse () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.reverse(s);\n                    });\n                },\n\n                withoutTrailingSlash: function withoutTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withoutTrailingSlash(s);\n                    });\n                },\n\n                withTrailingSlash: function withTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withTrailingSlash(s);\n                    });\n                },\n\n                regexpSafe: function regexpSafe () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.regexpSafe(s);\n                    });\n                },\n\n                pad: function pad (length, delim, pre) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.pad(s, length, delim, pre);\n                    });\n                },\n\n                newlineToBreak: function newlineToBreak () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.newlineToBreak(s);\n                    });\n                },\n\n                tabsToSpan: function tabsToSpan () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.tabsToSpan(s);\n                    });\n                },\n\n                wordWrapToLength: function wordWrapToLength (width, padleft, padright, omitFirst) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.wordWrapToLength(s, width, padleft, padright, omitFirst);\n                    });\n                },\n            },\n\n            array: {\n                shuffle: function shuffle () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.shuffle(a);\n                    });\n                },\n\n                union: function union () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.union.apply(a, args);\n                    });\n                },\n\n                difference: function difference () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.difference.apply(a, args);\n                    });\n                },\n\n                intersect: function intersect () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.intersect.apply(a, args);\n                    });\n                },\n\n                without: function without () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.without.apply(a, args);\n                    });\n                },\n\n                rotate: function rotate (direction, amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotate(a, direction, amount);\n                    });\n                },\n\n                rotateLeft: function rotateLeft (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateLeft(a, amount);\n                    });\n                },\n\n                rotateRight: function rotateRight (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateRight(a, amount);\n                    });\n                },\n\n                makeUnique: function makeUnique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.makeUnique(a);\n                    });\n                },\n\n                unique: function unique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.unique(a);\n                    });\n                },\n\n                ascending: function ascending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.ascending(a);\n                    });\n                },\n\n                descending: function descending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.descending(a);\n                    });\n                }\n            },\n\n            number: {\n\n                to: function to_ (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        var isInt = false;\n                        if(n % 1 === 0 && n.toString().indexOf('.') === -1) isInt = true;\n                        return isInt ? libs.number.randomIntInRange(n, k) : libs.number.randomNumberInRange(n, k);\n                    });\n                },\n\n                isInt: function isInt () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.isInt(n);\n                    });\n                },\n\n                factorial: function factorial () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.factorial(n);\n                    });\n                },\n\n                choose: function choose (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.choose(n, k);\n                    });\n                },\n\n                pad: function pad (length) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.pad(n, length);\n                    });\n                },\n\n                daysFrom: function daysFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFrom(n, date);\n                    });\n                },\n\n                daysFromNow: function daysFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFromNow(n);\n                    });\n                },\n\n                secondsFrom: function secondsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFrom(n, date);\n                    });\n                },\n\n                secondsFromNow: function secondsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFromNow(n);\n                    });\n                },\n\n                yearsFrom: function yearsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFrom(n, date);\n                    });\n                },\n\n                yearsFromNow: function yearsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFromNow(n);\n                    });\n                },\n\n                monthsFrom: function monthsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFrom(n, date);\n                    });\n                },\n\n                monthsFromNow: function monthsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFromNow(n);\n                    });\n                },\n\n                hoursFrom: function hoursFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFrom(n, date);\n                    });\n                },\n\n                hoursFromNow: function hoursFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFromNow(n);\n                    });\n                },\n\n                minutesFrom: function minutesFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFrom(n, date);\n                    });\n                },\n\n                minutesFromNow: function minutesFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFromNow(n);\n                    });\n                },\n\n                monthsAgo: function monthsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsAgo(n);\n                    });\n                },\n\n                daysAgo: function daysAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysAgo(n);\n                    });\n                },\n\n                secondsAgo: function secondsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsAgo(n);\n                    });\n                },\n\n                minutesAgo: function minutesAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesAgo(n);\n                    });\n                },\n\n                yearsAgo: function yearsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsAgo(n);\n                    });\n                },\n\n                clockTime: function clockTime () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.clockTime(n);\n                    });\n                }\n            },\n\n            function: {\n                inherits: function inherits (s) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.function.inherits(o, s);\n                    });\n                }\n            },\n\n            object: {\n                histogram: function histogram () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.histogram(o);\n                    });\n                },\n\n                copy: function copy () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.copy(o);\n                    });\n                },\n\n                each: function each (start, end, callback) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.each(o, start, end, callback);\n                    });\n                },\n\n                occurrencesOf: function occurrencesOf (what) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.occurrencesOf(o, what);\n                    });\n                },\n\n                keys: function keys () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.keys(o);\n                    });\n                },\n\n                size: function size () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.size(o);\n                    });\n                },\n\n                isNumeric: function isNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNumeric(o);\n                    });\n                },\n\n                getNumeric: function getNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getNumeric(o);\n                    });\n                },\n\n                isEmpty: function isEmpty () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isEmpty(o);\n                    });\n                },\n\n                isArray: function isArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArray(o);\n                    });\n                },\n\n                isPureObject: function isPureObject () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isPureObject(o);\n                    });\n                },\n\n                isString: function isString () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isString(o);\n                    });\n                },\n\n                isUndefined: function isUndefined () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isUndefined(o);\n                    });\n                },\n\n                isNull: function isNull () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNull(o);\n                    });\n                },\n\n                isBoolean: function isBoolean () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isBoolean(o);\n                    });\n                },\n\n                isFunction: function isFunction () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isFunction(o);\n                    });\n                },\n\n                isArguments: function isArguments () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArguments(o);\n                    });\n                },\n\n                toNumber: function toNumber () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toNumber(o);\n                    });\n                },\n\n                toInt: function toInt () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toInt(o);\n                    });\n                },\n\n                toArray: function toArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toArray(o);\n                    });\n                },\n\n                getCallback: function getCallback () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getCallback(o);\n                    });\n                },\n\n                random: function random () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.random(o);\n                    });\n                },\n\n                every: function every (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.every(o, f);\n                    });\n                },\n\n                any: function any (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.any(o, f);\n                    });\n                },\n\n                first: function first (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.first(o, n);\n                    });\n                },\n\n                last: function last (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.last(o, n);\n                    });\n                },\n\n                findChildAtPath: function findChildAtPath (path, delimiter, done) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.findChildAtPath(o, path, delimiter, done);\n                    });\n                },\n\n                clone: function clone () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.clone(o);\n                    });\n                },\n\n                only: function only () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (o) {\n                        args.unshift(o);\n                        return libs.object.only.apply(o, args);\n                    });\n                },\n\n                where: function where (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.where(o, predicateFunction);\n                    });\n                },\n\n                whereKeys: function whereKeys (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.whereKeys(o, predicateFunction);\n                    });\n                },\n\n                invert: function invert () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.invert(o);\n                    });\n                },\n\n                max: function max (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.max(o, f);\n                    });\n                },\n\n                min: function min (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.min(o, f);\n                    });\n                },\n\n                implements: function _implements (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implements(o, method);\n                    });\n                },\n\n                implementsOwn: function implementsOwn (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implementsOwn(o, method);\n                    });\n                },\n            },\n\n            date: {\n                advanceDays: function advanceDays (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceDays(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceMonths: function advanceMonths (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceMonths(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceYears: function advanceYears (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceYears(d, n, adjustForWeeked);\n                    });\n                },\n\n                yymmdd: function yymmdd (delim) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.yymmdd(d, delim);\n                    });\n                },\n\n                clockTime: function clockTime (omitMS) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.clockTime(d, !!omitMS);\n                    });\n                },\n            }\n        };\n\n        return libp;\n    }\n    module.exports = libp;\n}());\n\n},{}],3:[function(require,module,exports){\nfunction libs () {\n    'use strict';\n    var IS_BROWSER = typeof window !== 'undefined',\n        HAS_OS     = IS_BROWSER ? false : typeof require('os') === 'object';\n\n    /**\n     * Alters Firefox's Function.toString() results to match Chrome/Safari.\n     * @param {String} s The string representation of the function.\n     * @return {String} The altered string, with newlines replaced and 'use strict' removed.\n     */\n    function fixFirefoxFunctionString (s) {\n        return s.replace(/(?:\\r)?\\n+/g, '').replace(/\"use strict\";|'use strict';/g, '');\n    }\n\n    var NULL_FUNCTION = function EMPTY_CALLBACK_REPLACEMENT () {};\n\n    var libs = {\n\n        /**\n         * String library functions\n         * @type {Object}\n         */\n        string: {\n\n            /**\n             * Camelizes all of the provided string arguments.\n             * @param {...String} string A list of strings to camelize.\n             * @return {Array<String>} An array of the provided arguments, with all strings camelized.\n             */\n            camelize: function camelize () {\n                var ret = [];\n                libs.object.every(arguments, function (s) {\n                    if(s) {\n                        if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                        s = s.toString().replace(/[^a-z0-9$]/gi, '_').replace(/\\$(\\w)/g, '$_$1').split(/[\\s_]+/g);\n                        libs.object.each(s, 1, s.length, function (i, k) {\n                            this[k] = libs.string.ucFirst(i);\n                        });\n                        s = libs.string.lcFirst(s.join(''));\n                    }\n                    ret.push(s);\n                });\n                return ret.length === 1 ? ret[0] : ret;\n            },\n\n            /**\n             * Decamelizes all of the provided string arguments.\n             * @param {...String} string A list of strings to decamelize.\n             * @return {Array<String>} An array of the provided arguments, with all strings decamelized.\n             */\n            decamelize: function decamelize () {\n                var ret = [];\n                libs.object.every(arguments, function (s) {\n                    if(s) {\n                        if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                        s = s.toString().replace(/([A-Z$])/g, function ($) {\n                            return ' ' + (typeof $ === 'string' ? $.toLowerCase() : '');\n                        });\n                    }\n                    ret.push(typeof s === 'string' ? s.trim() : s);\n                });\n                return ret.length === 1 ? ret[0] : ret;\n            },\n\n            /**\n             * Returns all the characters found in one string but not the other.\n             * @param {String} s The string to operate on.\n             * @param {String} other The string to compute the difference against.\n             * @return {String} A difference string.\n             */\n            differenceFromString: function differenceFromString (s, other) {\n                if(typeof other !== 'string' || typeof s !== 'string') return s;\n                var sarr = s.split(''), oarr = other.split('');\n                return libs.array.differenceFromArray(sarr, oarr).join('');\n            },\n\n            /**\n             * Replaces tokens (snippets of text wrapped in brackets) with their values.\n             * @param {String} s The string to operate on.\n             * @return {String} The token replaced values.\n             */\n            replaceTokens: function replaceTokens (s) {\n                return libs.generic.replaceStringTokens(s);\n            },\n\n            /**\n             * Returns only the characters common to both strings\n             * @param {String} s The string to operate on.\n             * @param {String} other The string to compute the intersection against.\n             * @return {String} The intersection between the two strings.\n             */\n            intersectString: function intersectString (s, other) {\n                if(typeof other !== 'string' || typeof s !== 'string') return s;\n                var sarr = s.split(''), oarr = other.split('');\n                return libs.intersectArray(sarr, oarr).join('');\n            },\n\n            /**\n             * Repeat a string 'times' times.\n             * @param {String} s The string to operate on.\n             * @param {Number} times The number of times to repeat the string\n             * @return {String} The repeated string.\n             */\n            repeat: function repeat (s, times) {\n                times = parseInt(times, 10);\n                times = isNaN(times) || !isFinite(times) || times <= 0 ? 1 : times;\n\n                var os = s;\n                for(var i = 1; i < times; i++) s += os;\n                return s;\n            },\n\n            /**\n             * Right trims a string. Same as String.trim, but only for the end of a string.\n             * @param {String} s The string to operate on.\n             * @param {String} [what='\\\\s+'] What to trim.\n             * @return {String} The right trimmed string\n             */\n            rtrim: function rtrim (s, what) {\n                what = typeof what === 'string' ? what : '\\\\s+';\n                return s.replace(new RegExp(what + '$'), '');\n            },\n\n            /**\n             * Left trims a string. Same as String.trim, but only for the beginning of a string.\n             * @param {String} s The string to operate on.\n             * @param {String} [what='\\\\s+'] What to trim.\n             * @return {String} The left trimmed string\n             */\n            ltrim: function ltrim (s, what) {\n                what = typeof what === 'string' ? what : '\\\\s+';\n                return s.replace(new RegExp('^' + what), '');\n            },\n\n            /**\n             * Escapes HTML special characters\n             * @param {String} s The string to operate on.\n             * @return {String} The HTML escaped string\n             */\n            htmlEncode: function htmlEncode (s) {\n                var map = {\n                    '&'  : '&amp;',\n                    '<'  : '&lt;',\n                    '>'  : '&gt;',\n                    '\"'  : '&quot;',\n                    '\\'' : '&#039;'\n                };\n                return s.replace(/[&<>\"']/g, function (m) { return map[m]; });\n            },\n\n            /**\n             * Un-escapes HTML special characters\n             * @param {String} s The string to operate on.\n             * @return {String} The HTML escaped string\n             */\n            htmlDecode: function htmlDecode (s) {\n                var map = {\n                    '&amp;'  : '&',\n                    '&lt;'   : '<',\n                    '&gt;'   : '>',\n                    '&quot;' : '\"',\n                    '&#039;' : '\\''\n                };\n                return s.replace(/(&amp;|&lt;|&gt;|&quot;|&#039;)/g, function (m) { return map[m]; });\n            },\n\n            /**\n             * Creates an 'eval' safe string, by adding slashes to \", ', \\t, \\n, \\f, \\r, and the NULL byte.\n             * @param {String} s The string to operate on.\n             * @return {String} A string with slashes\n             */\n            addSlashes: function addSlashes (s) {\n                return s.replace(/[\\\\\"'\\t\\n\\f\\r]/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\n            },\n\n            /**\n             * Returns a string with the first letter capitalized.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with the first letter upper cased.\n             * @function\n             */\n            ucFirst: function ucFirst (s) {\n                return s.charAt(0).toUpperCase() + s.slice(1);\n            },\n\n            /**\n             * Returns a string with the first letter lowercased.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with the first letter lower cased.\n             * @function\n             */\n            lcFirst: function lcFirst (s) {\n                return s.charAt(0).toLowerCase() + s.slice(1);\n            },\n\n            /**\n             * Returns a string in Title Case.\n             * @param {String} s The string to operate on.\n             * @return {String} The title cased string.\n             * @function\n             */\n            titleCase: function titleCase (s) {\n                var arr = [];\n                libs.object.each(s.split(' '), function (t) { arr.push(libs.string.ucFirst(t)); });\n                return arr.join(' ');\n            },\n\n            /**\n             * Splices a string, much like an array.\n             * @param {String} s The string to operate on.\n             * @param {Number} index The index to begin splicing the string at\n             * @param {Number} count The number of characters to delete\n             * @param {String} add The string to append at the spliced section\n             * @return {String} The spliced string.\n             * @function\n             */\n            splice: function splice (s, index, count, add) {\n                return s.slice(0, index) + (add || '') + s.slice(index + count);\n            },\n\n            /**\n             * Return a truncated string with ellipses.\n             * @param {String} s The string to operate on.\n             * @param {Number=} length The length of the desired string. If ommited, the strings original length will be used.\n             * @param {String=} [place='back'] Possible values are 'front' and 'back'. Specifying 'front' will truncate the\n             * string and add ellipses to the front, 'back' (or any other value) will add the ellipses to the back.\n             * @param {String=} [ellipses='...'] The string value of the ellipses. Use this to add anything other than '...'\n             * @returns {String} A truncated string with ellipses (if its length is greater than 'length')\n             * @function\n             */\n            ellipses: function ellipses_ (s, length, place, ellipses) {\n                if(isNaN(parseInt(length, 10))) length = s.length;\n                if(length < 0 || !isFinite(length)) length = 0;\n\n                ellipses = typeof ellipses === 'string' ? ellipses : '...';\n                if(s.length <= length) return s;\n\n                if(length <= ellipses.length) {\n                    return ellipses.substring(0, length);\n                }\n                else if(!place || place !== 'front') {\n                    return s.substr(0, length - ellipses.length) + ellipses;\n                }\n                else {\n                    return ellipses + s.substr(0, length - ellipses.length);\n                }\n            },\n\n            /**\n             * Shuffles a string\n             * @param {String} s The string to operate on.\n             * @param {String} splitter A string used to split the string, to tokenize it before shuffling.\n             * @return {String} The mixed up string.\n             */\n            shuffle: function shuffle (s, splitter) {\n                var a = s.split(typeof splitter === 'string' ? splitter : ''), n = a.length,\n                replaceSplits = n - 1;\n\n                for(var i = n - 1; i > 0; i--) {\n                    var j = Math.floor(Math.random() * (i + 1)),\n                        tmp = a[i];\n\n                    a[i] = a[j];\n                    a[j] = tmp;\n                }\n\n                for(var k = 0; k < replaceSplits; k++) a.splice(libs.number.randomIntInRange(0, a.length), 0, splitter);\n                return a.join('');\n            },\n\n            /**\n             * Reverses a string.\n             * @param {String} s The string to operate on.\n             * @return {String} The reversed string.\n             */\n            reverse: function reverse (s) {\n                if(s.length < 64) {\n                    var str = '';\n                    for(var i = s.length; i >= 0; i--) str += s.charAt(i);\n                    return str;\n                }\n                else {\n                    return s.split('').reverse().join('');\n                }\n            },\n\n            /**\n             * Strips the trailing slashes from a string.\n             * @param {String} s The string to operate on.\n             * If using Node.js, it will replace the trailing slash based on the value of os.platform\n             * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n             * @returns {String} The string without a trailing slash.\n             * @function\n             */\n            withoutTrailingSlash: function withoutTrailingSlash (s) {\n                if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return s.replace(/\\\\+$/, '');\n                return s.replace(/\\/+$/, '');\n            },\n\n            /**\n             * Add a trailing slash to a string, if it doesn't already have one.\n             * If using Node.js, it will replace the trailing slash based on the value of os.platform\n             * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n             * @param {String} s The string to operate on.\n             * @returns {String} The string without a trailing slash.\n             * @function\n             */\n            withTrailingSlash: function withTrailingSlash (s) {\n                if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return libs.string.withoutTrailingSlash(s) + '\\\\';\n                return libs.string.withoutTrailingSlash(s) + '/';\n            },\n\n            /**\n             * Escapes regular expression special characters. This is useful is you wish to create a new regular expression\n             * from a stored string value.\n             * @param {String} s The string to operate on.\n             * @returns {String} The regular expression safe string\n             * @function\n             */\n            regexpSafe: function regexpSafe (s) {\n                return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            },\n\n            /**\n             * Pads a string with 'delim' characters to the specified length. If the length is less than the string length,\n             * the string will be truncated.\n             * @param {String} s The string to operate on.\n             * @param {Number} length The length to pad the string to. If less that the length of the string, the string will\n             * be returned. If less than the length of the string, the string will be sliced.\n             * @param {String=} [delim=' '] The character to pad the string with.\n             * @param {Boolean=} [pre=false] If true, the padding will be added to the beginning of the string, otherwise the padding\n             * will be added to the end.\n             * @returns {String} The padded string\n             * @function\n             */\n            pad: function pad (s, length, delim, pre) {\n                var i, thisLength = s.length;\n\n                if(!delim) delim = ' ';\n                if(length === 0) return ''; else if(isNaN(parseInt(length, 10))) return s;\n\n                length = parseInt(length, 10);\n                if(length < thisLength) return !pre ? s.slice(0, length) : s.slice(-length);\n\n                if(pre) {\n                    for(i = 0; i < length - thisLength; i++) s = delim + s;\n                }\n                else {\n                    for(i = 0; i < length - thisLength; i++) s += delim;\n                }\n                return s;\n            },\n\n            /**\n             * Replaces newlines with br tags.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with newlines converted to br tags.\n             */\n            newlineToBreak: function newlineToBreak (s) {\n                return s.replace(/(\\r\\n|\\n)/g, '<br>');\n            },\n\n            /**\n             * Replaces tabs with a span element with the class 'tab'\n             * @param {String} s The string to operate on.\n             * @return {String} The string with tabs converted to spans with the class 'tab'\n             */\n            tabsToSpan: function tabsToSpan (s) {\n                return s.replace(/\\t/g, '<span class=\"tab\"></span>');\n            },\n\n            /**\n             * Adjusts a string to fit within the confines of 'width', without breaking words.\n             * @param {String} s The string to operate on.\n             * @param {Number=} [length=120] The length to word wrap the string to.\n             * @param {Number=} [padleft=0] The number of columns to pad the string on the left\n             * @param {Number=} [padright=0] The number of columns to pad the string on the right\n             * @param {Boolean=} omitFirst If true, the first line will not be padded left\n             * @return {String} The string adjusted and padded for the stdout.\n             * @function\n             */\n            wordWrapToLength: function wordWrapToLength (s, width, padleft, padright, omitFirst) {\n                if(padright === undefined && padleft) padright = padleft;\n\n                padleft  = !isNaN(parseInt(padleft,  10)) ? parseInt(padleft, 10)  : 0;\n                padright = !isNaN(parseInt(padright, 10)) ? parseInt(padright, 10) : 0;\n\n                var paddingLeft = '';\n                for(var n = 0; n < padleft;  n++) paddingLeft  += ' ';\n\n                var cols   = !isNaN(parseInt(width, 10)) ? length : 120,\n                    arr    = s.split(' '),\n                    item   = null,\n                    len    = !omitFirst ? cols - padright - padleft : cols - padright,\n                    str    = !omitFirst ? paddingLeft : '',\n                    olen   = cols - padright - padleft;\n\n                while((item = arr.shift()) !== undefined) {\n                    if(item.length < len) {\n                        str += item + ' ';\n                        len -= item.length + 1;\n                    }\n                    else if(item.length > olen) {\n                        str += item.substring(0, len - 1) + '-\\n' + paddingLeft;\n                        arr.unshift(item.substring(len, item.length - 1));\n                        len = cols - padright - padleft;\n                    }\n                    else {\n                        str += '\\n' + paddingLeft + item + ' ';\n                        len = cols - padright - 1 - padleft - item.length;\n                    }\n                }\n                return str;\n            }\n        },\n\n        /**\n         * Date library functions\n         * @type {Object}\n         */\n        date: {\n            /**\n             * Moves a date forward 'daysInTheFuture' days.\n             * @param {Date} The date object to operate on.\n             * @param {Number} daysInTheFuture The number of days in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified days.\n             * @function\n             */\n            advanceDays: function advanceDays (d, daysInTheFuture, adjustForWeekend) {\n                daysInTheFuture = daysInTheFuture && libs.generic.isNumeric(daysInTheFuture) ? daysInTheFuture : 1;\n                d.setTime(d.getTime() + (daysInTheFuture * 86400000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Moves a date forward 'monthsInTheFuture' months.\n             * @param {Date} The date object to operate on.\n             * @param {Number} monthsInTheFuture The number of months in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified months.\n             * @function\n             */\n            advanceMonths: function advanceMonths (d, monthsInTheFuture, adjustForWeekend) {\n                monthsInTheFuture = monthsInTheFuture && libs.generic.isNumeric(monthsInTheFuture) ? monthsInTheFuture : 1;\n                d.setTime(d.getTime() + (monthsInTheFuture * 2629746000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Moves a date forward 'yearsInTheFuture' years.\n             * @param {Date} The date object to operate on.\n             * @param {Number} yearsInTheFuture The number of years in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified years.\n             * @function\n             */\n            advanceYears: function advanceYears (d, yearsInTheFuture, adjustForWeekend) {\n                yearsInTheFuture = yearsInTheFuture && libs.generic.isNumeric(yearsInTheFuture) ? yearsInTheFuture : 1;\n                d.setTime(d.getTime() + (yearsInTheFuture * 31536000000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Returns the date in the yyyy-mm-dd format.\n             * @param {Date} The date object to operate on.\n             * @param {String} [delim='-'] The delimiter to used the separate the date components (e.g. '-' or '.')\n             * @returns {String} The date in the yyyy-mm-dd format.\n             * @function\n             */\n            yyyymmdd: function yyyymmdd (d, delim) {\n                delim = typeof delim !== 'string' ? '-' : delim ;\n\n                var dd   = d.getDate(),\n                    mm   = d.getMonth() + 1,\n                    yyyy = d.getFullYear();\n\n                if(dd < 10) dd = '0' + dd;\n                if(mm < 10) mm = '0' + mm;\n                return yyyy + delim + mm + delim + dd;\n            },\n\n            /**\n             * Converts a date to the HH:MM:SS.MSEC time format\n             * @param {Date} The date object to operate on.\n             * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n             * @returns {String} The formatted number, now a string.\n             * @function\n             */\n            clockTime: function clockTime (d, omitMS) {\n                return libs.number.clockTime(d.getTime(), !!omitMS);\n            }\n        },\n\n        /**\n         * Number library functions\n         * @type {Object}\n         */\n        number: {\n\n            /**\n             * Returns a random integer in range [min, max] (inclusive)\n             * @param {Number} min The minimum possible value (inclusive)\n             * @param {Number} max The maximum possible value (inclusive)\n             * @return {Number} A random number between min and max\n             */\n            randomIntInRange: function (min, max) {\n                min = parseInt(min, 10);\n                max = parseInt(max, 10);\n\n                if(isNaN(min) && !isFinite(min)) min = 0;\n                if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                return Math.floor(Math.random() * (max - min + 1)) + min;\n            },\n\n            /**\n             * Returns a random float in range [min, max] (inclusive)\n             * @param {Number} min The minimum possible value (inclusive)\n             * @param {Number} max The maximum possible value (inclusive)\n             * @return {Number} A random number between min and max\n             */\n            randomNumberInRange: function (min, max) {\n                min = parseInt(min, 10);\n                max = parseInt(max, 10);\n\n                if(isNaN(min) && !isFinite(min)) min = 0;\n                if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                return Math.random() * (max - min + 1) + min;\n            },\n\n            /**\n             * Recursively computes the factorial of the number n.\n             * @param {Number} n A number.\n             * @return {Number|Infinity} n!\n             */\n            factorial: function factorial (n) {\n                if(typeof n !== 'number' || n < 0) return NaN;\n                if(n > 170) return Infinity;\n                if(n === 0 || n === 1) return 1;\n                return n * factorial(n - 1);\n            },\n\n            /**\n             * Determines is the given numbers are integers\n             * @param {...Number} n Numbers.\n             * @return {Boolean} True if all arguments are integers, false otherwise.\n             */\n            isInt: function isInt () {\n                return libs.object.every(arguments, function (n) {\n                    return typeof n === 'number' && n % 1 === 0 && n.toString().indexOf('.') === -1;\n                });\n            },\n\n            /**\n             * Recursively computes n choose k.\n             * @param {Number} n A number.\n             * @param {Number} k A number.\n             * @return {Number|Infinity} n choose k.\n             */\n            choose: function choose (n, k) {\n                if(typeof n !== 'number' || typeof k !== 'number') return NaN;\n                if(k === 0) return 1;\n                return (n * choose(n - 1, k - 1)) / k;\n            },\n\n            /**\n             * Pads a number with preceeding zeros.\n             * @param {Number} n The number object to operate on.\n             * @param {Number} length The final length of the string\n             * @returns {String} The padded number, now a string.\n             * @function\n             */\n            pad: function pad (n, length) {\n                return libs.string.pad(n.toString(), length, '0', true);\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            daysFrom: function daysFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setDate(date.getDate() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            daysFromNow: function daysFromNow (n) {\n                return libs.number.daysFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            secondsFrom: function secondsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setSeconds(date.getSeconds() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            secondsFromNow: function secondsFromNow (n) {\n                return libs.number.secondsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of years.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            yearsFrom: function yearsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setFullYear(date.getFullYear() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of years.\n             * @return {Date} A date object\n             */\n            yearsFromNow: function yearsFromNow (n) {\n                return libs.number.yearsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of months.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            monthsFrom: function monthsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setMonth(date.getMonth() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of months.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            monthsFromNow: function monthsFromNow (n) {\n                return libs.number.monthsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of hours.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            hoursFrom: function hoursFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setHours(date.getHours() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of hours.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            hoursFromNow: function hoursFromNow (n) {\n                return libs.number.hoursFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of minutes.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} A modified date.\n             */\n            minutesFrom: function minutesFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setMinutes(date.getMinutes() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of minutes.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} The date object\n             */\n            minutesFromNow: function minutesFromNow (n) {\n                return libs.number.minutesFrom(n, new Date());\n            },\n\n            /**\n             * The time, months in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            monthsAgo: function monthsAgo (n) {\n                return libs.number.minutesFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, days in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            daysAgo: function daysAgo (n) {\n                return libs.number.daysFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, seconds in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            secondsAgo: function secondsAgo (n) {\n                return libs.number.secondsFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, minutes in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            minutesAgo: function minutesAgo (n) {\n                return libs.number.minutesFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, years in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            yearsAgo: function yearsAgo (n) {\n                return libs.number.yearsFromNow(-n, new Date());\n            },\n\n            /**\n             * Converts a number to the HH:MM:SS.MSEC time format\n             * @param {Number} t The number object to operate on.\n             * @memberof Number.prototype\n             * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n             * @returns {String} The formatted number, now a string.\n             * @function\n             */\n            clockTime: function clockTime (t, omitMS) {\n                var ms, secs, mins, hrs;\n\n                ms = t % 1000;\n                t = (t - ms) / 1000;\n\n                secs = t % 60;\n                t = (t - secs) / 60;\n\n                mins = t % 60;\n                hrs = (t - mins) / 60;\n\n                return libs.number.pad(hrs.toString(), 2)  + ':' + libs.number.pad(mins.toString(), 2) + ':' +\n                       libs.number.pad(secs.toString(), 2) + ((omitMS === true) ? '' : '.' + libs.number.pad(ms.toString(), 3));\n            }\n        },\n\n        /**\n         * Function library functions\n         * @type {Object}\n         */\n        function: {\n\n            /**\n             * Inherit the prototype methods from one constructor into another.\n             * @param {Function} constructor The inheriting constructor\n             * @param {Function} superConstructor The parent constructor\n             * @return {Function} The inheriting constructor\n             */\n            inherits: function inherits (constructor, superConstructor) {\n                if (constructor === undefined || constructor === null)\n                throw new TypeError('The constructor to \"inherits\" must not be ' + 'null or undefined');\n\n                if (superConstructor === undefined || superConstructor === null)\n                throw new TypeError('The super constructor to \"inherits\" must not ' + 'be null or undefined');\n\n                if (superConstructor.prototype === undefined)\n                throw new TypeError('The super constructor to \"inherits\" must ' + 'have a prototype');\n\n                constructor.super_ = superConstructor;\n                Object.setPrototypeOf(constructor.prototype, superConstructor.prototype);\n                return constructor;\n            },\n        },\n\n        /**\n         * Array library functions\n         * @type {Object}\n         */\n        array: {\n\n            /**\n             * Shuffles an array\n             * @param {Array} a The Array object to operate on.\n             * @return {Array<*>} The mixed up array\n             */\n            shuffle: function shuffle (a) {\n                for(var i = a.length - 1; i > 0; i--) {\n                    var j = Math.floor(Math.random() * (i + 1)), tmp = a[i];\n                    a[i] = a[j];\n                    a[j] = tmp;\n                }\n                return a;\n            },\n\n            /**\n             * Computes the union between the current array, and all the array objects passed in. That is,\n             * the set of unique objects present in all of the arrays.\n             * @param {Array} a The Array object to operate on.\n             * @param {...Array} arr A list of array objects\n             * @return {Array<*>} The union set of the provided arrays.\n             */\n            union: function union (a) {\n                var args = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                var union = [];\n                args.unshift(a);\n                libs.object.each(args, function (array) {\n                    libs.object.each(array, function (item) {\n                        if(union.indexOf(item) === -1) union.push(item);\n                    });\n                });\n                return union;\n            },\n\n            /**\n             * Returns all the items unique to all arrays.\n             * @param {...Array} arrays The Array objects to operate on.\n             * @param {Array} other The array to compute the difference from.\n             * @return {Array} A new array with items unique to each array.\n             */\n            difference: function difference () {\n                var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                if(arrays.length === 0) return [];\n                if(arrays.length === 1) return libs.object.copy(arrays[0]);\n                var i, simpleDiff = [];\n\n                if(arrays.length === 2) {\n                    for(i = 0; i < arrays[0].length; i++)\n                        if(arrays[1].indexOf(arrays[0][i]) === -1) simpleDiff.push(arrays[0][i]);\n\n                    for(i = 0; i < arrays[1].length; i++)\n                        if(arrays[0].indexOf(arrays[1][i]) === -1) simpleDiff.push(arrays[1][i]);\n\n                    return simpleDiff;\n                }\n\n                var difference = arrays[0], intermediate = [];\n                for(i = 1; i < arrays.length; i++) {\n                    for(var n = 0; n < difference.length; n++) {\n                        if(arrays[i].indexOf(difference[n]) === -1) {\n                            intermediate.push(difference[n]);\n                        }\n                    }\n                    for(var k = 0; k < arrays.length; k++) {\n                        //if(arrays[i] !== arrays)\n                    }\n                    difference = intermediate;\n                    intermediate = [];\n                }\n\n                return difference;\n            },\n\n            /**\n             * Returns the items common to all arrays.\n             * @param {...Array} items The arrays from which to compute the intersection.\n             * @return {Array} A new array with items common to both arrays.\n             */\n            intersect: function intersect () {\n                var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                if(arrays.length === 0) return [];\n                if(arrays.length === 1) return libs.object.copy(arrays[0]);\n\n                var intersection = arrays[0], intermediate = [];\n                for(var i = 1; i < arrays.length; i++) {\n                    for(var n = 0; n < intersection.length; n++) {\n                        if(arrays[i].indexOf(intersection[n]) > -1) {\n                            intermediate.push(intersection[n]);\n                            var idx = arrays[i].indexOf(intersection[n]);\n                            arrays[i].splice(idx, 1);\n                        }\n                    }\n                    intersection = intermediate;\n                    intermediate = [];\n                }\n\n                return intersection;\n            },\n\n            /**\n             * Creates a new array from the current one, with all occurences of the provided arguments ommited.<br>\n             * For example: <em>[1,2,3,4,5].without(1)</em> will return <em>[2,3,4,5]</em>\n             * and <em>[1, null, 2, null, undefined].without(null, undefined)</em> will return <em>[1, 2]</em>\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array<*>} A shallow copy of the array with the provided arguments ommited.\n             * @function\n             */\n            without: function without () {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift(),\n                    res  = [];\n\n                libs.object.each(a, function (v) { if(args.indexOf(v) === -1) res.push(v); });\n                return res;\n            },\n\n            /**\n             * Rotates the array left or right the specified number of times. If the direction is left, it will shift off the\n             * first <em>n</em> elements and push them to the end of the array. If right, it will pop off the last <em>n</em>\n             * items and unshift them onto the front of the array.\n             * @param {Array} a The Array object to operate on.\n             * @param {String=} [direction='left'] The direction to rotate array members.\n             * @param {Number=} [amount=1] The number of elements to shift\n             * @return {Array<*>} The current array, shifted.\n             * @function\n             */\n            rotate: function rotate (a, direction, amount) {\n                if(direction && libs.object.isNumeric(direction) && !amount) {\n                    amount    = direction;\n                    direction = undefined;\n                }\n\n                if(!amount || (amount && !libs.object.isNumeric(amount))) amount = 1;\n                for(var i = 0; i < amount; i++) {\n                    if(direction !== 'right') a.push(a.shift()); else a.unshift(a.pop());\n                }\n                return a;\n            },\n\n            /**\n             * Rotates the array left the specified number of times.\n             * This is useful if trying to create a circular queue.\n             * @param {Array} a The Array object to operate on.\n             * @param {Number=} [amount=1] The number of times to rotate the array left.\n             * @return {Array<*>} The current array, rotated left.\n             * @function\n             */\n            rotateLeft: function rotateLeft (a, amount) {\n                return libs.array.rotate(a, 'left', amount);\n            },\n\n            /**\n             * Rotates the array right the specified number of times.\n             * This is useful if trying to create a circular queue.\n             * @param {Array} a The Array object to operate on.\n             * @param {Number=} [amount=1] The number of times to rotate the array left.\n             * @return {Array<*>} The current array, rotated right.\n             * @function\n             */\n            rotateRight: function rotateLeft (a, amount) {\n                return libs.array.rotate(a, 'right', amount);\n            },\n\n            /**\n             * Removes duplicates from the current array.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array<*>} The current array, with duplicates removed.\n             * @function\n             */\n            makeUnique: function makeUnique (a) {\n                var visited = [];\n                for(var i = 0; i < a.length; i++) {\n                    if(visited.indexOf(a[i]) === -1) {\n                        visited.push(a[i]);\n                    }\n                    else {\n                        a.splice(i, 1);\n                        i--; // Splice will affect the internal array pointer, so fix it...\n                    }\n                }\n                return a;\n            },\n\n            /**\n             * Gets an array of unique items from the current array.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} A new array with no duplicate values.\n             * @function\n             */\n            unique: function unique (a) {\n                var visited = [],\n                    unique  = [];\n\n                libs.object.each(a, function (item) {\n                    if(visited.indexOf(item) === -1) {\n                        unique.push(item);\n                        visited.push(item);\n                    }\n                });\n                return unique;\n            },\n\n            /**\n             * Sorts the array in ascending order.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} The array sorted in ascending order.\n             * @function\n             */\n            ascending: function ascending (a) {\n                return a.sort(function (a, b) {\n                    if(a !== undefined && a !== null) a = a.toString();\n                    if(b !== undefined && b !== null) b = b.toString();\n                    return a < b ? -1 : a > b ? 1 : 0;\n                });\n            },\n\n            /**\n             * Sorts the array in descending order.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} The array sorted in descending order.\n             * @function\n             */\n            descending: function descending (a) {\n                return a.sort(function (a, b) {\n                    if(a !== undefined && a !== null) a = a.toString();\n                    if(b !== undefined && b !== null) b = b.toString();\n                    return a > b ? -1 : a < b ? 1 : 0;\n                });\n            }\n        },\n\n        /**\n         * Array library functions\n         * @type {Object}\n         */\n        object: {\n\n            /**\n             * Computes the frequencies for each item in all of arguments.\n             * @param {...*} objs The objects to compute the histogram from.\n             * @return {Object<Number>} An object that has the items from all of the arguments as its keys and their frequencies as it's values.\n             */\n            histogram: function histogram () {\n                var histogram = {};\n                libs.object.every(arguments, function (o) {\n                    if(typeof o === 'boolean') {\n                        if(!histogram[o]) histogram[o] = 1; else histogram[o]++;\n                    }\n                    else if(typeof o === 'function') {\n                        if(!histogram['function']) histogram['function'] = 1; else histogram[o]++;\n                    }\n                    else {\n                        libs.object.every(o, function (val) {\n                            switch(true) {\n                                case typeof val === 'function':\n                                case typeof val === 'undefined':\n                                    val = typeof val;\n                                    break;\n                                case typeof val === 'object' && val === null:\n                                    val = 'null';\n                                    break;\n                                case typeof val === 'object' && val instanceof Array:\n                                    val = 'array';\n                                    break;\n                                case typeof val === 'object':\n                                    val = 'object';\n                                    break;\n                                default:\n                                    val = val.toString();\n                            }\n\n                            if(typeof histogram[val] !== 'number') histogram[val] = 0;\n                            histogram[val]++;\n                        });\n                    }\n                });\n                return histogram;\n            },\n\n            /**\n             * Creates a shallow copy of 'item'.\n             * @param {*} item The item to shallow \"copy\".\n             * @return {*} A shallow copy of the item.\n             */\n            copy: function copy (item) {\n                var copy;\n                if(!item) return item;\n\n                switch (typeof item) {\n                    case 'string':\n                    case 'number':\n                    case 'function':\n                    case 'boolean':\n                        return item;\n\n                    default:\n                        if(item instanceof Array) {\n                            copy = [];\n                        }\n                        else {\n                            copy = {};\n                        }\n                }\n\n                libs.object.every(item, function (o, k) { copy[k] = o; });\n                return copy;\n            },\n\n            /**\n             * Returns the number of occurences of \"what\"\n             * @param {*} obj The item to count the occurences of \"what\" in.\n             * @param {*} what The item to count the occurences of the item in the array.\n             * @return {[type]} [description]\n             */\n            occurrencesOf: function occurrencesOf (obj, what) {\n                if(arguments.length < 2) return 0;\n\n                if(typeof obj === 'boolean') {\n                    return 0;\n                }\n                if(typeof obj === 'number') {\n                    return occurrencesOf(obj.toString(), what);\n                }\n                else if(typeof obj === 'function') {\n                    return occurrencesOf(fixFirefoxFunctionString(obj.toString()), what);\n                }\n\n                var count = 0;\n                if(typeof obj === 'string') {\n                    if(typeof what === 'string' || typeof what === 'number') {\n                        var regexp = new RegExp(what.toString(), 'g'), m;\n                        while(m = regexp.exec(obj)) count++;\n                    }\n                }\n                else if(typeof obj !== 'string') {\n                    libs.object.every(obj, function (item) {\n                        if(item === what) count++;\n                    });\n                }\n                return count;\n            },\n\n            /**\n             * Returns the object's keys.\n             * @param {Object} o The object to operate on.\n             * @returns {Array<String|Number>} The object's key set\n             * @function\n             */\n            keys : function keys (o) {\n                var keys = Object.keys(o), idx;\n                if(libs.object.isArguments(o)) {\n                    idx = keys.indexOf('length');\n                    if(idx > -1) keys.splice(idx, 1);\n                }\n                return keys;\n            },\n\n            /**\n             * Returns the 'size' or 'length' of an object.\n             * <ul>\n             *      <li> String   -> The string's length  </li>\n             *      <li> Number   -> The number of digits </li>\n             *      <li> Object   -> The number of keys   </li>\n             *      <li> Array    -> The number of items  </li>\n             *      <li> Function -> 1                    </li>\n             * </ul>\n             * @param {Object} o The object to operate on.\n             * @returns {Number} The number of items within the object.\n             * @function\n             */\n            size: function size (o) {\n                switch(true) {\n                    case typeof o === 'function':\n                        return 1;\n\n                    case typeof o === 'number':\n                        return o.toString().length;\n\n                    case o instanceof Array:\n                    case typeof o === 'string':\n                        return o.length;\n\n                    case libs.object.isArguments(o) && typeof o.length !== 'undefined':\n                        return o.length - 1;\n\n                    case o && typeof o === 'object':\n                        return Object.keys(o).length;\n\n                    default:\n                        return 0;\n                }\n            },\n\n            /**\n             * Determines if an object can be converted to a number.\n             * @param {...Object} o The object to operate on.\n             * @returns {Boolean} True if the object is numeric, false otherwise.\n             * @function\n             */\n            isNumeric: function isNumeric () {\n                return libs.object.every(arguments, function (item) {\n                    return !isNaN(parseFloat(item)) && isFinite(item);\n                });\n            },\n\n            /**\n             * Converts an object to a number.\n             * @param {...Object} o The object to operate on.\n             * @returns {Number} The object as a number.\n             * @function\n             */\n            getNumeric: function getNumeric () {\n                var res = [], len = arguments.length;\n                libs.object.every(arguments, function (item) {\n                    res.push(!isNaN(parseFloat(item)) && isFinite(item));\n                });\n                return len === 1 ? res[0] : res;\n            },\n\n            /**\n             * Determines if an object has no keys, if an array has no items, or if a string === ''.\n             * @param {...Object} o The object to operate on.\n             * @returns {Boolean} True if the object is 'empty', false otherwise.\n             * @function\n             */\n            isEmpty: function isEmpty () {\n                return libs.object.every(arguments, function (item) {\n                    return libs.object.size(item) === 0 && item !== false && item !== '' && item !== true;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all arrays, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is an array, false otherwise.\n             */\n            isArray: function isArray () {\n                return libs.object.every(arguments, function (item) {\n                    return item instanceof Array;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all objects and not arrays, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is an object and not an array, false otherwise.\n             */\n            isPureObject: function isPureObject () {\n                return libs.object.every(arguments, function (item) {\n                    return !(item instanceof Array) && typeof item === 'object';\n                });\n            },\n\n            /**\n             * True if the objects passed in are all strings, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a string, false otherwise.\n             */\n            isString: function isString () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'string';\n                });\n            },\n\n            /**\n             * True if the objects passed in are all booleans, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a boolean, false otherwise.\n             */\n            isBoolean: function isBoolean () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'boolean';\n                });\n            },\n\n            /**\n             * True if the objects passed in are allfunction, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isFunction: function isFunction () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'function';\n                });\n            },\n\n            /**\n             * True if the objects passed in are allll, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isNull: function isNull () {\n                return libs.object.every(arguments, function (item) {\n                    return item === null;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all undefined, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isUndefined: function isUndefined () {\n                return libs.object.every(arguments, function (item) {\n                    return item === undefined;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all arguments objects, false otherwise.\n             * @param {Object} o The object to operate on.\n             * @return {Boolean} True if the object is an arguments object, false otherwise\n             */\n            isArguments: function isArguments () {\n                return libs.object.every(arguments, function (item) {\n                    return Object.prototype.toString.call(item) === '[object Arguments]';\n                });\n            },\n\n            /**\n             * Convers an object to a number, if possible.\n             * @param {...Object} o The object to operate on.\n             * @returns {Number} The object as a float or NaN.\n             * @function\n             */\n            toNumber: function toNumber () {\n                var vals = [];\n                libs.object.every(arguments, function (o) {\n                    vals.push(libs.object.isNumeric(o) ? parseFloat(o) : NaN);\n                });\n                return vals.length === 1 ? vals[0] : vals;\n            },\n\n            /**\n             * Convers an object to an integer, if possible.\n             * @param {Object} o The object to operate on.\n             * @returns {Number} The object as an integer or NaN.\n             * @function\n             */\n            toInt: function toInt () {\n                var vals = [];\n                libs.object.every(arguments, function (o) {\n                    var radix = /^0x/.test(o) ? 16 : 10; // Check for hex string\n                    vals.push(libs.object.isNumeric(o) ? parseInt(o, radix) : NaN);\n                });\n                return vals.length === 1 ? vals[0] : vals;\n            },\n\n            /**\n             * Returns a random array item, random object property, random character in a string, or random digit in a number.\n             * @param {Object} o The object to operate on.\n             * @returns {*}\n             * @function\n             */\n            random: function random (o) {\n                if(typeof o === 'object') {\n                    return o instanceof Array ?\n                        o[Math.floor(Math.random() * o.length)] :\n                        o[Object.keys(o)[Math.floor(Math.random() * Object.keys(o).length)]];\n                }\n                else if(typeof o === 'string' || typeof o === 'number') {\n                    var val = o, negative = false;\n\n                    if(o.length === 0) return '';\n                    if(typeof o === 'number' && o < 0) {\n                        negative = true;\n                        val = Math.abs(val);\n                    }\n\n                    val = val.toString()[Math.floor(Math.random() * val.toString().length)];\n                    if(typeof o === 'number') val = parseInt(val, 10);\n                    return negative ? -val : val;\n                }\n                return o;\n            },\n\n            /**\n             * Invokes the callback 'f' for each property the object contains. If this is called\n             * on a number or function, the object will be cast to a string.<br><br>\n             * The callback `f` will be invoked with the following arguments:\n             * <ul>\n             * \t<li>value     - The value of the current object being iterated over</li>\n             * \t<li>key       - The key of the current object (if an object, the index if an array)</li>\n             * \t<li>iteration - The current iteration (same as key if a string or array)</li>\n             * \t<li>exit      - A function which will break the loop and return the values passed to it,\n             * \t\t\t\t\tor a single value if only a single value is passed.</li>\n             * </ul>\n             * @function\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [rangeA=0] The iteration start index\n             * @param {Number=} [rangeB='length of the item'] The iteration end index\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {*} The value passed to the exit parameter of the callback...\n             */\n            each: function each (o, rangeA, rangeB, f) {\n\n                // Can't use last here.. would cause circular ref...\n                f = undefined;\n                for(var k = arguments.length - 1; k >= 0; k--) {\n                    if(arguments[k] instanceof Function) {\n                        f = arguments[k];\n                        break;\n                    }\n                }\n\n                var ret    = null,\n                    broken = false,\n                    self   = o,\n                    keys, property, value,\n\n                    exit = function () {\n                        broken   = true;\n                        ret      = arguments.length > 1 ? libs.object.toArray(arguments) : arguments[0];\n                    };\n\n                if(f instanceof Function) {\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = Object.keys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    rangeA = parseInt(rangeA);\n                    rangeA = (isNaN(rangeA) || !isFinite(rangeA)) ? 0 : rangeA;\n\n                    rangeB = parseInt(rangeB);\n                    rangeB = (isNaN(rangeB) || !isFinite(rangeB)) ? keys.length : rangeB;\n\n                    var i = 0, n;\n                    if(Math.abs(rangeA) > Math.abs(rangeB)) {\n                        if(rangeB < 0) rangeB = 0;\n                        if(rangeA < 0) rangeA = 0;\n                        if(rangeA > keys.length - 1) rangeA = keys.length - 1;\n\n                        for(n = rangeA; n >= rangeB; n--) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            f.call(o, value, property, n, exit, i++, o);\n                            if(broken) break;\n                        }\n                    }\n                    else {\n                        rangeB = rangeB + 1 > keys.length ? keys.length : rangeB + 1;\n                        if(rangeB < 0) rangeB = 0;\n                        if(rangeA < 0) rangeA = 0;\n\n                        for(n = rangeA; n < rangeB; n++) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            f.call(o, value, property, n, exit, i++, o);\n                            if(broken) break;\n                        }\n                    }\n                }\n                return ret;\n            },\n\n            /**\n             * Invokes the callback 'f' for every property the object contains. If the callback returns false, the\n             * loop is broken and false is returned; otherwise true is returned.\n             * @param {Object} o The object to operate on.\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {Boolean} True if none of the callback invocations returned false.\n             * @function\n             */\n            every: function every (o, f) {\n                f = f instanceof Function ? f : undefined;\n\n                if(f instanceof Function) {\n                    var self = o, keys, property, value;\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari...\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = Object.keys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    var i = 0;\n                    for(var n = 0; n < keys.length; n++) {\n                        property = keys[n];\n                        value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                        if(f.call(o, value, property, n, i++, o) === false) return false;\n                    }\n                }\n                return true;\n            },\n\n            /**\n             * Invokes the callback 'f' for every property the object contains. If the callback returns true, the\n             * loop is broken and false is returned; otherwise true is returned.\n             * @param {Object} o The object to operate on.\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {Boolean} True if none of the callback invocations returned false.\n             * @function\n             */\n            any: function any (o, f) {\n                f = f instanceof Function ? f : undefined;\n\n                if(f instanceof Function) {\n                    var self = o, keys, property, value;\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari...\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = Object.keys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    var i = 0;\n                    for(var n = 0; n < keys.length; n++) {\n                        property = keys[n];\n                        value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                        var ret = f.call(o, value, property, n, i++, o);\n                        if(ret !== undefined) return ret;\n                    }\n                }\n                return undefined;\n            },\n\n            /**\n             * Converts an object to an array. For strings, numbers, and functions this will\n             * return a char array to their respective .toString() values\n             * @param {Object} o The object to operate on.\n             * @function\n             * @return {Array<*>} The object, converted to an array.\n             */\n            toArray: function toArray (o) {\n                if(o instanceof Array) return libs.object.copy(o);\n                var arr = [];\n                libs.object.each(o, function (val) { arr.push(val); });\n                return arr;\n            },\n\n            /**\n             * Returns the first n elements of an object. If the object is an array, and only one items is retrieved,\n             * that item will be returned, rather than an array.\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [n=1] The number of elements to return\n             * @return {Array<*>} The first n elements of the array.\n             */\n            first: function first (o, n) {\n                n = parseInt(n, 10);\n                n = isNaN(n) || !isFinite(n) ? 1 : n;\n                var v = null;\n\n                if(typeof o === 'boolean') {\n                    return o;\n                }\n                else if(typeof o !== 'object') {\n                    if(n !== 0) v = o.toString().slice(0, n); else return null;\n                }\n                else if(o instanceof Array) {\n                    if(n === 1) return o[0];\n                    return n !== 0 ? o.slice(0, n) : [];\n                }\n                else {\n                    v = {};\n                    libs.object.each(o, 0, n - 1, function (item, key) { v[key] = item; });\n                    var keys = Object.keys(v);\n                    return keys.length === 1 ? v[keys[0]] : v;\n                }\n                return v.length === 1 ? v[0] : v;\n            },\n\n            /**\n             * Returns the last n elements of an object. If the object is an array, and only one items is retrieved,\n             * that item will be returned rather than an array.\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [n=1] The number of elements to return\n             * @return {Array<*>} The last n elements of the array.\n             * @function\n             */\n            last: function last (o, n) {\n                if(typeof o === 'boolean') return o;\n\n                n = parseInt(n, 10);\n                n = isNaN(n) || !isFinite(n) ? 1 : n;\n                var v = null, keys, len = libs.object.size(o), idx;\n\n                if(typeof o === 'boolean') {\n                    return o;\n                }\n                else if(libs.object.isArguments(o)) {\n                    keys = Object.keys(o);\n                    idx  = keys.indexOf('length');\n\n                    if(idx > -1) keys.splice(idx, 1);\n                    v = []; len = keys.length;\n                    // Arguments object should ignore undefined members...\n                    libs.object.each(keys, 0, len, function (k) { if(o[k] !== undefined) v.unshift(o[k]); });\n                    v = v.slice(0, n);\n                }\n                else if(typeof o !== 'object') {\n                    if(n !== 0) v = o.toString().slice(-n); else return null;\n                }\n                else if(o instanceof Array) {\n                    if(n === 1) return o[o.length -1];\n                    return n !== 0 ? o.slice(-n) : [];\n                }\n                else {\n                    v = {};\n                    if(n < 0) n = 0;\n                    libs.object.each(o, len - n, len, function (item, key) { v[key] = item; });\n                    keys = Object.keys(v);\n                    return keys.length === 1 ? v[keys[0]] : v;\n                }\n                return v.length === 1 ? v[0] : v.length > 0 ? v : null;\n            },\n\n            /**\n             * If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n             * Useful for ensuring that a callback can always be invoked, without checking if the argument is a function\n             * over and over.\n             * @param {Object} o The object to get the callback for.\n             * @return {Function} If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n             */\n            getCallback: function getCallback (o) {\n                var last = libs.object.last(o);\n                return last instanceof Function ? last : NULL_FUNCTION;\n            },\n\n            /**\n             * Find a child of an object using the given path, split by the given delimiter (or '.' by default)\n             * @param {Object} o The object to operate on.\n             * @param {String} path The path to the child object\n             * @param {String=} [delimiter='.'] The path delimiter\n             * @param {Function=} done A callback for completion\n             * @return {*|Null} The child object at the given string path, or null if it doesn't exist.\n             * @function\n             */\n            findChildAtPath: function findChildAtPath (o, path, delimiter, original, invoked, done) {\n                done = libs.object.getCallback(arguments);\n                var self = o;\n\n                original = (!(original instanceof Function) && original) ? original : self;\n                invoked  = invoked || false;\n\n                if(typeof o === 'object' && typeof path === 'string') {\n                    delimiter = typeof delimiter === 'string' ? delimiter : '.';\n                    path      = path.split(delimiter);\n\n                    var p = path.shift();\n                    if(p) {\n                        return libs.object.each(o, function (o, k, i, exit) {\n                            if(path.length === 0 && k === p) {\n                                done.call(original, o, self, k);\n                                invoked = true;\n                                exit(o);\n                            }\n                            else {\n                                var obj = libs.object.findChildAtPath(o, path.join(delimiter), delimiter, original, invoked, done);\n                                if(obj !== null) exit(obj);\n                            }\n                        });\n                    }\n                }\n                if(!invoked && original === self && done instanceof Function) done.call(original, null, self, null);\n                return null;\n            },\n\n            /**\n             * Produces a shallow clone of the object, that is, if JSON.stringify can handle it.<br>\n             * The object must be non-circular.\n             * @param {Object} o The object to operate on.\n             * @return {*} A shallow clone of the object.\n             * @function\n             */\n            clone: function clone (o) {\n                if(typeof o === 'string' || typeof o === 'number') return o;\n\n                try {\n                    return JSON.parse(JSON.stringify(o));\n                }\n                catch (e) {\n                    throw new Error('Unable to clone object: ' + e.message);\n                }\n            },\n\n            /**\n             * Filters an array or object using only the types allowed. That is, if the item in the array is of a type listed\n             * in the arguments, then it will be added to the filtered array. In this case 'array' is a valid type.\n             * @param {Object} o The object to operate on.\n             * @param {...String} types A list of typeof types that are allowed in the array.\n             * @return {Array<*>} An array filtered by only the allowed types.\n             */\n            only: function only (o, types) {\n                types = libs.object.toArray(arguments);\n                types.shift();\n\n                // Allows the 'plural' form of the type...\n                libs.object.each(types, function (type, key) { this[key] = type.replace(/s$/, ''); });\n\n                if(typeof o !== 'object' || !o) return o;\n                var isArray  = o instanceof Array ? true : false,\n                    filtered = isArray ? [] : {},\n                    typeArr  = types.indexOf('array'),\n                    typeObj  = types.indexOf('object object');\n\n                libs.object.each(o, function (item, key) {\n                    var typeItem = types.indexOf(typeof item);\n\n                    if(typeObj !== -1 && typeArr === -1) {\n                        if((typeof item === 'object' && !(item instanceof Array)) || (typeof item !== 'object' && typeItem !== -1)) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    }\n                    else if(typeObj !== -1 && typeArr !== -1) {\n                        types.push('object');\n                        if(typeItem !== -1) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    }\n                    else if(typeItem !== -1 || (item instanceof Array && typeArr !== -1)) {\n                        if(isArray) filtered.push(item); else filtered[key] = item;\n                    }\n                });\n                return filtered;\n            },\n\n            /**\n             * Filters an object using the given predicate function. For objects, a new object will be returned, with\n             * the values that passed the predicate function. For strings, a new string will be returned with the characters\n             * that passed the predicate function. For numbers, a new number will be returned with the digits that passed\n             * the predicate function. Functions will be operated on as strings.\n             * @param {Object} o The object to operate on.\n             * @param {Function} predicate The function used to filter the object.\n             * @return {*} The filtered object\n             */\n            where: function where (o, predicate) {\n                if(!(predicate instanceof Function)) {\n                    var temp = predicate;\n                    predicate = function (i) { return i == temp; };\n                }\n\n                if(o === null || o === undefined) return o;\n                if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                    filtered = !isObject ? [] : {};\n\n                libs.object.each(o, function (item, key) {\n                    if(predicate.call(item, item, key)) {\n                        if(isObject) filtered[key] = item; else filtered.push(item);\n                    }\n                });\n\n                if(typeof o !== 'object') filtered = filtered.join('');\n                return filtered;\n            },\n\n            /**\n             * Filters an object by keys using the given predicate function.\n             * @param {Object} o The object to operate on.\n             * @param {Function} predicate The function used to filter the object.\n             * @return {*} The filtered object\n             */\n            whereKeys: function whereKeys (o, predicate) {\n                if(!(predicate instanceof Function)) {\n                    var temp = predicate;\n                    predicate = function (k) { return k == temp; };\n                }\n\n                if(o === null || o === undefined) return o;\n                if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                    filtered = !isObject ? [] : {};\n\n                libs.object.each(o, function (item, key) {\n                    if(predicate.call(key, key, item)) {\n                        if(isObject) filtered[key] = item; else filtered.push(item);\n                    }\n                });\n\n                if(typeof o !== 'object') filtered = filtered.join('');\n                return filtered;\n            },\n\n            /**\n             * For objects, inverts the objects keys/values. If the value isn't a number or array, it will be omitted.\n             * For strings, it will reverse the string.\n             * For number, it will compute the number's inverse (i.e. 1 / x).\n             * For functions, invert returns a new function that wraps the given function and inverts it's result.\n             * @param {Object} o The object to operate on.\n             * @return {*} The inverse, as described above.\n             */\n            invert: function invert (o) {\n                if(o === null || o === undefined) return o;\n                if(typeof o === 'string')   return libs.string.reverse(o);\n                if(typeof o === 'number')   return 1 / o;\n                if(typeof o === 'boolean')  return !o;\n\n                if(typeof o === 'function') {\n                    return function () { return libs.object.invert(o.apply(o, arguments)); };\n                }\n\n                var obj = {};\n                libs.object.each(o, function (item, key) {\n                    if(typeof item === 'string' || typeof item === 'number') {\n                        if(!obj[item]) {\n                            obj[item] = key;\n                        }\n                        else {\n                            var tmp = obj[item];\n                            obj[item] = [];\n                            obj[item].push(tmp, key);\n                        }\n                    }\n                });\n\n                return obj;\n            },\n\n            /**\n             * Returns the maximum item in the object.\n             * @param {Object} o The object to operate on.\n             * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n             * @return {*} The maximum item in the object collection.\n             */\n            max: function max (o, func) {\n                if(!o || typeof o !== 'object') return o;\n                if(!(func instanceof Function)) func = undefined;\n                var max, maxValue;\n\n                if(!func) {\n                    max = libs.object.first(o);\n                    libs.object.each(o, 1, function (item) {\n                        if(item >= max) max = item;\n                    });\n                }\n                else {\n                    max = libs.object.first(o);\n                    maxValue = func.call(max, max);\n\n                    libs.object.each(o, 1, function (item) {\n                        if(func.call(item, item) >= maxValue) max = item;\n                    });\n                }\n                return max;\n            },\n\n            /**\n             * Returns the minimum item in the object.\n             * @param {Object} o The object to operate on.\n             * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n             * @return {*} The minimum item in the object collection.\n             */\n            min: function min (o, func) {\n                if(!o || typeof o !== 'object') return o;\n                if(!(func instanceof Function)) func = undefined;\n\n                if(typeof o !== 'object') return o;\n                var min, minValue;\n\n                if(!func) {\n                    min = libs.object.first(o);\n                    libs.object.each(o, 1, function (item) {\n                        if(item <= min) min = item;\n                    });\n                }\n                else {\n                    min = libs.object.first(o);\n                    minValue = func.call(min, min);\n\n                    libs.object.each(o, 1, function (item) {\n                        if(func.call(item, item) <= minValue) min = item;\n                    });\n                }\n                return min;\n            },\n\n            /**\n             * Tests whether or not the object has a method called 'method'.\n             * @param {Object} o The object to operate on.\n             * @param {String} method The name of the method to test existence for.\n             * @return {Boolean} True if the object has a function called 'method', false otherwise.\n             */\n            implements: function _implements () {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift();\n\n                if(!a) return false;\n                return libs.object.every(args, function (m) {\n                    if(!(a[m] instanceof Function)) return false;\n                });\n            },\n\n            /**\n             * Same as Object.j.implements, excepct with a hasOwnProperty check.\n             * @param {Object} o The object to operate on.\n             * @param {String} method The name of the method to test existence for.\n             * @return {Boolean} True if the object has its own function called 'method', false otherwise.\n             */\n            implementsOwn: function implementsOwn (o, method) {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift();\n\n                if(!a) return false;\n                return libs.object.every(args, function (m) {\n                    if(!(a[m] instanceof Function) || !o.hasOwnProperty(method)) return false;\n                });\n            }\n        }\n    };\n\n    return libs;\n}\n\n(function () {\n    'use strict';\n    module.exports = libs;\n}());\n\n},{\"os\":4}],4:[function(require,module,exports){\nexports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\n},{}]},{},[1])\n\n","(function () {\n    'use strict';\n    function libp (libs, getThisValueAndInvoke) {\n        var libp = {\n            string: {\n\n                camelize: function camelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.camelize(s);\n                    });\n                },\n\n                decamelize: function decamelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.decamelize(s);\n                    });\n                },\n\n                differenceFromString: function differenceFromString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.differenceFromString(s, other);\n                    });\n                },\n\n                replaceTokens: function replaceTokens () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.replaceStringTokens(s);\n                    });\n                },\n\n                intersectString: function intersectString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.intersectString(s, other);\n                    });\n                },\n\n                repeat: function repeat (times) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.repeat(s, times);\n                    });\n                },\n\n                rtrim: function rtrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.rtrim(s, what);\n                    });\n                },\n\n                ltrim: function ltrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ltrim(s, what);\n                    });\n                },\n\n                htmlEncode: function htmlEncode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlEncode(s);\n                    });\n                },\n\n                htmlDecode: function htmlDecode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlDecode(s);\n                    });\n                },\n\n                addSlashes: function addSlashes () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.addSlashes(s);\n                    });\n                },\n\n                ucFirst: function ucFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ucFirst(s);\n                    });\n                },\n\n                lcFirst: function lcFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.lcFirst(s);\n                    });\n                },\n\n                titleCase: function titleCase () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.titleCase(s);\n                    });\n                },\n\n                splice: function splice (index, count, add) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.splice(s, index, count, add);\n                    });\n                },\n\n                ellipses: function ellipses_ (length, place, ellipses) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ellipses(s, length, place, ellipses);\n                    });\n                },\n\n                shuffle: function shuffle (splitter) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.shuffle(s, splitter);\n                    });\n                },\n\n                reverse: function reverse () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.reverse(s);\n                    });\n                },\n\n                withoutTrailingSlash: function withoutTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withoutTrailingSlash(s);\n                    });\n                },\n\n                withTrailingSlash: function withTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withTrailingSlash(s);\n                    });\n                },\n\n                regexpSafe: function regexpSafe () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.regexpSafe(s);\n                    });\n                },\n\n                pad: function pad (length, delim, pre) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.pad(s, length, delim, pre);\n                    });\n                },\n\n                newlineToBreak: function newlineToBreak () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.newlineToBreak(s);\n                    });\n                },\n\n                tabsToSpan: function tabsToSpan () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.tabsToSpan(s);\n                    });\n                },\n\n                wordWrapToLength: function wordWrapToLength (width, padleft, padright, omitFirst) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.wordWrapToLength(s, width, padleft, padright, omitFirst);\n                    });\n                },\n            },\n\n            array: {\n                shuffle: function shuffle () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.shuffle(a);\n                    });\n                },\n\n                union: function union () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.union.apply(a, args);\n                    });\n                },\n\n                difference: function difference () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.difference.apply(a, args);\n                    });\n                },\n\n                intersect: function intersect () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.intersect.apply(a, args);\n                    });\n                },\n\n                without: function without () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.without.apply(a, args);\n                    });\n                },\n\n                rotate: function rotate (direction, amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotate(a, direction, amount);\n                    });\n                },\n\n                rotateLeft: function rotateLeft (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateLeft(a, amount);\n                    });\n                },\n\n                rotateRight: function rotateRight (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateRight(a, amount);\n                    });\n                },\n\n                makeUnique: function makeUnique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.makeUnique(a);\n                    });\n                },\n\n                unique: function unique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.unique(a);\n                    });\n                },\n\n                ascending: function ascending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.ascending(a);\n                    });\n                },\n\n                descending: function descending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.descending(a);\n                    });\n                }\n            },\n\n            number: {\n\n                to: function to_ (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        var isInt = false;\n                        if(n % 1 === 0 && n.toString().indexOf('.') === -1) isInt = true;\n                        return isInt ? libs.number.randomIntInRange(n, k) : libs.number.randomNumberInRange(n, k);\n                    });\n                },\n\n                isInt: function isInt () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.isInt(n);\n                    });\n                },\n\n                factorial: function factorial () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.factorial(n);\n                    });\n                },\n\n                choose: function choose (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.choose(n, k);\n                    });\n                },\n\n                pad: function pad (length) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.pad(n, length);\n                    });\n                },\n\n                daysFrom: function daysFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFrom(n, date);\n                    });\n                },\n\n                daysFromNow: function daysFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFromNow(n);\n                    });\n                },\n\n                secondsFrom: function secondsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFrom(n, date);\n                    });\n                },\n\n                secondsFromNow: function secondsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFromNow(n);\n                    });\n                },\n\n                yearsFrom: function yearsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFrom(n, date);\n                    });\n                },\n\n                yearsFromNow: function yearsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFromNow(n);\n                    });\n                },\n\n                monthsFrom: function monthsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFrom(n, date);\n                    });\n                },\n\n                monthsFromNow: function monthsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFromNow(n);\n                    });\n                },\n\n                hoursFrom: function hoursFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFrom(n, date);\n                    });\n                },\n\n                hoursFromNow: function hoursFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFromNow(n);\n                    });\n                },\n\n                minutesFrom: function minutesFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFrom(n, date);\n                    });\n                },\n\n                minutesFromNow: function minutesFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFromNow(n);\n                    });\n                },\n\n                monthsAgo: function monthsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsAgo(n);\n                    });\n                },\n\n                daysAgo: function daysAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysAgo(n);\n                    });\n                },\n\n                secondsAgo: function secondsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsAgo(n);\n                    });\n                },\n\n                minutesAgo: function minutesAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesAgo(n);\n                    });\n                },\n\n                yearsAgo: function yearsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsAgo(n);\n                    });\n                },\n\n                clockTime: function clockTime () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.clockTime(n);\n                    });\n                }\n            },\n\n            function: {\n                inherits: function inherits (s) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.function.inherits(o, s);\n                    });\n                }\n            },\n\n            object: {\n                histogram: function histogram () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.histogram(o);\n                    });\n                },\n\n                copy: function copy () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.copy(o);\n                    });\n                },\n\n                each: function each (start, end, callback) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.each(o, start, end, callback);\n                    });\n                },\n\n                occurrencesOf: function occurrencesOf (what) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.occurrencesOf(o, what);\n                    });\n                },\n\n                keys: function keys () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.keys(o);\n                    });\n                },\n\n                size: function size () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.size(o);\n                    });\n                },\n\n                isNumeric: function isNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNumeric(o);\n                    });\n                },\n\n                getNumeric: function getNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getNumeric(o);\n                    });\n                },\n\n                isEmpty: function isEmpty () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isEmpty(o);\n                    });\n                },\n\n                isArray: function isArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArray(o);\n                    });\n                },\n\n                isPureObject: function isPureObject () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isPureObject(o);\n                    });\n                },\n\n                isString: function isString () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isString(o);\n                    });\n                },\n\n                isUndefined: function isUndefined () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isUndefined(o);\n                    });\n                },\n\n                isNull: function isNull () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNull(o);\n                    });\n                },\n\n                isBoolean: function isBoolean () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isBoolean(o);\n                    });\n                },\n\n                isFunction: function isFunction () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isFunction(o);\n                    });\n                },\n\n                isArguments: function isArguments () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArguments(o);\n                    });\n                },\n\n                toNumber: function toNumber () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toNumber(o);\n                    });\n                },\n\n                toInt: function toInt () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toInt(o);\n                    });\n                },\n\n                toArray: function toArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toArray(o);\n                    });\n                },\n\n                getCallback: function getCallback () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getCallback(o);\n                    });\n                },\n\n                random: function random () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.random(o);\n                    });\n                },\n\n                every: function every (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.every(o, f);\n                    });\n                },\n\n                any: function any (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.any(o, f);\n                    });\n                },\n\n                first: function first (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.first(o, n);\n                    });\n                },\n\n                last: function last (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.last(o, n);\n                    });\n                },\n\n                findChildAtPath: function findChildAtPath (path, delimiter, done) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.findChildAtPath(o, path, delimiter, done);\n                    });\n                },\n\n                clone: function clone () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.clone(o);\n                    });\n                },\n\n                only: function only () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (o) {\n                        args.unshift(o);\n                        return libs.object.only.apply(o, args);\n                    });\n                },\n\n                where: function where (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.where(o, predicateFunction);\n                    });\n                },\n\n                whereKeys: function whereKeys (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.whereKeys(o, predicateFunction);\n                    });\n                },\n\n                invert: function invert () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.invert(o);\n                    });\n                },\n\n                max: function max (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.max(o, f);\n                    });\n                },\n\n                min: function min (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.min(o, f);\n                    });\n                },\n\n                implements: function _implements (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implements(o, method);\n                    });\n                },\n\n                implementsOwn: function implementsOwn (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implementsOwn(o, method);\n                    });\n                },\n            },\n\n            date: {\n                advanceDays: function advanceDays (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceDays(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceMonths: function advanceMonths (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceMonths(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceYears: function advanceYears (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceYears(d, n, adjustForWeeked);\n                    });\n                },\n\n                yymmdd: function yymmdd (delim) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.yymmdd(d, delim);\n                    });\n                },\n\n                clockTime: function clockTime (omitMS) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.clockTime(d, !!omitMS);\n                    });\n                },\n            }\n        };\n\n        return libp;\n    }\n    module.exports = libp;\n}());\n","function libs () {\n    'use strict';\n    var IS_BROWSER = typeof window !== 'undefined',\n        HAS_OS     = IS_BROWSER ? false : typeof require('os') === 'object';\n\n    /**\n     * Alters Firefox's Function.toString() results to match Chrome/Safari.\n     * @param {String} s The string representation of the function.\n     * @return {String} The altered string, with newlines replaced and 'use strict' removed.\n     */\n    function fixFirefoxFunctionString (s) {\n        return s.replace(/(?:\\r)?\\n+/g, '').replace(/\"use strict\";|'use strict';/g, '');\n    }\n\n    var NULL_FUNCTION = function EMPTY_CALLBACK_REPLACEMENT () {};\n\n    var libs = {\n\n        /**\n         * String library functions\n         * @type {Object}\n         */\n        string: {\n\n            /**\n             * Camelizes all of the provided string arguments.\n             * @param {...String} string A list of strings to camelize.\n             * @return {Array<String>} An array of the provided arguments, with all strings camelized.\n             */\n            camelize: function camelize () {\n                var ret = [];\n                libs.object.every(arguments, function (s) {\n                    if(s) {\n                        if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                        s = s.toString().replace(/[^a-z0-9$]/gi, '_').replace(/\\$(\\w)/g, '$_$1').split(/[\\s_]+/g);\n                        libs.object.each(s, 1, s.length, function (i, k) {\n                            this[k] = libs.string.ucFirst(i);\n                        });\n                        s = libs.string.lcFirst(s.join(''));\n                    }\n                    ret.push(s);\n                });\n                return ret.length === 1 ? ret[0] : ret;\n            },\n\n            /**\n             * Decamelizes all of the provided string arguments.\n             * @param {...String} string A list of strings to decamelize.\n             * @return {Array<String>} An array of the provided arguments, with all strings decamelized.\n             */\n            decamelize: function decamelize () {\n                var ret = [];\n                libs.object.every(arguments, function (s) {\n                    if(s) {\n                        if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                        s = s.toString().replace(/([A-Z$])/g, function ($) {\n                            return ' ' + (typeof $ === 'string' ? $.toLowerCase() : '');\n                        });\n                    }\n                    ret.push(typeof s === 'string' ? s.trim() : s);\n                });\n                return ret.length === 1 ? ret[0] : ret;\n            },\n\n            /**\n             * Returns all the characters found in one string but not the other.\n             * @param {String} s The string to operate on.\n             * @param {String} other The string to compute the difference against.\n             * @return {String} A difference string.\n             */\n            differenceFromString: function differenceFromString (s, other) {\n                if(typeof other !== 'string' || typeof s !== 'string') return s;\n                var sarr = s.split(''), oarr = other.split('');\n                return libs.array.differenceFromArray(sarr, oarr).join('');\n            },\n\n            /**\n             * Replaces tokens (snippets of text wrapped in brackets) with their values.\n             * @param {String} s The string to operate on.\n             * @return {String} The token replaced values.\n             */\n            replaceTokens: function replaceTokens (s) {\n                return libs.generic.replaceStringTokens(s);\n            },\n\n            /**\n             * Returns only the characters common to both strings\n             * @param {String} s The string to operate on.\n             * @param {String} other The string to compute the intersection against.\n             * @return {String} The intersection between the two strings.\n             */\n            intersectString: function intersectString (s, other) {\n                if(typeof other !== 'string' || typeof s !== 'string') return s;\n                var sarr = s.split(''), oarr = other.split('');\n                return libs.intersectArray(sarr, oarr).join('');\n            },\n\n            /**\n             * Repeat a string 'times' times.\n             * @param {String} s The string to operate on.\n             * @param {Number} times The number of times to repeat the string\n             * @return {String} The repeated string.\n             */\n            repeat: function repeat (s, times) {\n                times = parseInt(times, 10);\n                times = isNaN(times) || !isFinite(times) || times <= 0 ? 1 : times;\n\n                var os = s;\n                for(var i = 1; i < times; i++) s += os;\n                return s;\n            },\n\n            /**\n             * Right trims a string. Same as String.trim, but only for the end of a string.\n             * @param {String} s The string to operate on.\n             * @param {String} [what='\\\\s+'] What to trim.\n             * @return {String} The right trimmed string\n             */\n            rtrim: function rtrim (s, what) {\n                what = typeof what === 'string' ? what : '\\\\s+';\n                return s.replace(new RegExp(what + '$'), '');\n            },\n\n            /**\n             * Left trims a string. Same as String.trim, but only for the beginning of a string.\n             * @param {String} s The string to operate on.\n             * @param {String} [what='\\\\s+'] What to trim.\n             * @return {String} The left trimmed string\n             */\n            ltrim: function ltrim (s, what) {\n                what = typeof what === 'string' ? what : '\\\\s+';\n                return s.replace(new RegExp('^' + what), '');\n            },\n\n            /**\n             * Escapes HTML special characters\n             * @param {String} s The string to operate on.\n             * @return {String} The HTML escaped string\n             */\n            htmlEncode: function htmlEncode (s) {\n                var map = {\n                    '&'  : '&amp;',\n                    '<'  : '&lt;',\n                    '>'  : '&gt;',\n                    '\"'  : '&quot;',\n                    '\\'' : '&#039;'\n                };\n                return s.replace(/[&<>\"']/g, function (m) { return map[m]; });\n            },\n\n            /**\n             * Un-escapes HTML special characters\n             * @param {String} s The string to operate on.\n             * @return {String} The HTML escaped string\n             */\n            htmlDecode: function htmlDecode (s) {\n                var map = {\n                    '&amp;'  : '&',\n                    '&lt;'   : '<',\n                    '&gt;'   : '>',\n                    '&quot;' : '\"',\n                    '&#039;' : '\\''\n                };\n                return s.replace(/(&amp;|&lt;|&gt;|&quot;|&#039;)/g, function (m) { return map[m]; });\n            },\n\n            /**\n             * Creates an 'eval' safe string, by adding slashes to \", ', \\t, \\n, \\f, \\r, and the NULL byte.\n             * @param {String} s The string to operate on.\n             * @return {String} A string with slashes\n             */\n            addSlashes: function addSlashes (s) {\n                return s.replace(/[\\\\\"'\\t\\n\\f\\r]/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\n            },\n\n            /**\n             * Returns a string with the first letter capitalized.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with the first letter upper cased.\n             * @function\n             */\n            ucFirst: function ucFirst (s) {\n                return s.charAt(0).toUpperCase() + s.slice(1);\n            },\n\n            /**\n             * Returns a string with the first letter lowercased.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with the first letter lower cased.\n             * @function\n             */\n            lcFirst: function lcFirst (s) {\n                return s.charAt(0).toLowerCase() + s.slice(1);\n            },\n\n            /**\n             * Returns a string in Title Case.\n             * @param {String} s The string to operate on.\n             * @return {String} The title cased string.\n             * @function\n             */\n            titleCase: function titleCase (s) {\n                var arr = [];\n                libs.object.each(s.split(' '), function (t) { arr.push(libs.string.ucFirst(t)); });\n                return arr.join(' ');\n            },\n\n            /**\n             * Splices a string, much like an array.\n             * @param {String} s The string to operate on.\n             * @param {Number} index The index to begin splicing the string at\n             * @param {Number} count The number of characters to delete\n             * @param {String} add The string to append at the spliced section\n             * @return {String} The spliced string.\n             * @function\n             */\n            splice: function splice (s, index, count, add) {\n                return s.slice(0, index) + (add || '') + s.slice(index + count);\n            },\n\n            /**\n             * Return a truncated string with ellipses.\n             * @param {String} s The string to operate on.\n             * @param {Number=} length The length of the desired string. If ommited, the strings original length will be used.\n             * @param {String=} [place='back'] Possible values are 'front' and 'back'. Specifying 'front' will truncate the\n             * string and add ellipses to the front, 'back' (or any other value) will add the ellipses to the back.\n             * @param {String=} [ellipses='...'] The string value of the ellipses. Use this to add anything other than '...'\n             * @returns {String} A truncated string with ellipses (if its length is greater than 'length')\n             * @function\n             */\n            ellipses: function ellipses_ (s, length, place, ellipses) {\n                if(isNaN(parseInt(length, 10))) length = s.length;\n                if(length < 0 || !isFinite(length)) length = 0;\n\n                ellipses = typeof ellipses === 'string' ? ellipses : '...';\n                if(s.length <= length) return s;\n\n                if(length <= ellipses.length) {\n                    return ellipses.substring(0, length);\n                }\n                else if(!place || place !== 'front') {\n                    return s.substr(0, length - ellipses.length) + ellipses;\n                }\n                else {\n                    return ellipses + s.substr(0, length - ellipses.length);\n                }\n            },\n\n            /**\n             * Shuffles a string\n             * @param {String} s The string to operate on.\n             * @param {String} splitter A string used to split the string, to tokenize it before shuffling.\n             * @return {String} The mixed up string.\n             */\n            shuffle: function shuffle (s, splitter) {\n                var a = s.split(typeof splitter === 'string' ? splitter : ''), n = a.length,\n                replaceSplits = n - 1;\n\n                for(var i = n - 1; i > 0; i--) {\n                    var j = Math.floor(Math.random() * (i + 1)),\n                        tmp = a[i];\n\n                    a[i] = a[j];\n                    a[j] = tmp;\n                }\n\n                for(var k = 0; k < replaceSplits; k++) a.splice(libs.number.randomIntInRange(0, a.length), 0, splitter);\n                return a.join('');\n            },\n\n            /**\n             * Reverses a string.\n             * @param {String} s The string to operate on.\n             * @return {String} The reversed string.\n             */\n            reverse: function reverse (s) {\n                if(s.length < 64) {\n                    var str = '';\n                    for(var i = s.length; i >= 0; i--) str += s.charAt(i);\n                    return str;\n                }\n                else {\n                    return s.split('').reverse().join('');\n                }\n            },\n\n            /**\n             * Strips the trailing slashes from a string.\n             * @param {String} s The string to operate on.\n             * If using Node.js, it will replace the trailing slash based on the value of os.platform\n             * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n             * @returns {String} The string without a trailing slash.\n             * @function\n             */\n            withoutTrailingSlash: function withoutTrailingSlash (s) {\n                if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return s.replace(/\\\\+$/, '');\n                return s.replace(/\\/+$/, '');\n            },\n\n            /**\n             * Add a trailing slash to a string, if it doesn't already have one.\n             * If using Node.js, it will replace the trailing slash based on the value of os.platform\n             * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n             * @param {String} s The string to operate on.\n             * @returns {String} The string without a trailing slash.\n             * @function\n             */\n            withTrailingSlash: function withTrailingSlash (s) {\n                if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return libs.string.withoutTrailingSlash(s) + '\\\\';\n                return libs.string.withoutTrailingSlash(s) + '/';\n            },\n\n            /**\n             * Escapes regular expression special characters. This is useful is you wish to create a new regular expression\n             * from a stored string value.\n             * @param {String} s The string to operate on.\n             * @returns {String} The regular expression safe string\n             * @function\n             */\n            regexpSafe: function regexpSafe (s) {\n                return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            },\n\n            /**\n             * Pads a string with 'delim' characters to the specified length. If the length is less than the string length,\n             * the string will be truncated.\n             * @param {String} s The string to operate on.\n             * @param {Number} length The length to pad the string to. If less that the length of the string, the string will\n             * be returned. If less than the length of the string, the string will be sliced.\n             * @param {String=} [delim=' '] The character to pad the string with.\n             * @param {Boolean=} [pre=false] If true, the padding will be added to the beginning of the string, otherwise the padding\n             * will be added to the end.\n             * @returns {String} The padded string\n             * @function\n             */\n            pad: function pad (s, length, delim, pre) {\n                var i, thisLength = s.length;\n\n                if(!delim) delim = ' ';\n                if(length === 0) return ''; else if(isNaN(parseInt(length, 10))) return s;\n\n                length = parseInt(length, 10);\n                if(length < thisLength) return !pre ? s.slice(0, length) : s.slice(-length);\n\n                if(pre) {\n                    for(i = 0; i < length - thisLength; i++) s = delim + s;\n                }\n                else {\n                    for(i = 0; i < length - thisLength; i++) s += delim;\n                }\n                return s;\n            },\n\n            /**\n             * Replaces newlines with br tags.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with newlines converted to br tags.\n             */\n            newlineToBreak: function newlineToBreak (s) {\n                return s.replace(/(\\r\\n|\\n)/g, '<br>');\n            },\n\n            /**\n             * Replaces tabs with a span element with the class 'tab'\n             * @param {String} s The string to operate on.\n             * @return {String} The string with tabs converted to spans with the class 'tab'\n             */\n            tabsToSpan: function tabsToSpan (s) {\n                return s.replace(/\\t/g, '<span class=\"tab\"></span>');\n            },\n\n            /**\n             * Adjusts a string to fit within the confines of 'width', without breaking words.\n             * @param {String} s The string to operate on.\n             * @param {Number=} [length=120] The length to word wrap the string to.\n             * @param {Number=} [padleft=0] The number of columns to pad the string on the left\n             * @param {Number=} [padright=0] The number of columns to pad the string on the right\n             * @param {Boolean=} omitFirst If true, the first line will not be padded left\n             * @return {String} The string adjusted and padded for the stdout.\n             * @function\n             */\n            wordWrapToLength: function wordWrapToLength (s, width, padleft, padright, omitFirst) {\n                if(padright === undefined && padleft) padright = padleft;\n\n                padleft  = !isNaN(parseInt(padleft,  10)) ? parseInt(padleft, 10)  : 0;\n                padright = !isNaN(parseInt(padright, 10)) ? parseInt(padright, 10) : 0;\n\n                var paddingLeft = '';\n                for(var n = 0; n < padleft;  n++) paddingLeft  += ' ';\n\n                var cols   = !isNaN(parseInt(width, 10)) ? length : 120,\n                    arr    = s.split(' '),\n                    item   = null,\n                    len    = !omitFirst ? cols - padright - padleft : cols - padright,\n                    str    = !omitFirst ? paddingLeft : '',\n                    olen   = cols - padright - padleft;\n\n                while((item = arr.shift()) !== undefined) {\n                    if(item.length < len) {\n                        str += item + ' ';\n                        len -= item.length + 1;\n                    }\n                    else if(item.length > olen) {\n                        str += item.substring(0, len - 1) + '-\\n' + paddingLeft;\n                        arr.unshift(item.substring(len, item.length - 1));\n                        len = cols - padright - padleft;\n                    }\n                    else {\n                        str += '\\n' + paddingLeft + item + ' ';\n                        len = cols - padright - 1 - padleft - item.length;\n                    }\n                }\n                return str;\n            }\n        },\n\n        /**\n         * Date library functions\n         * @type {Object}\n         */\n        date: {\n            /**\n             * Moves a date forward 'daysInTheFuture' days.\n             * @param {Date} The date object to operate on.\n             * @param {Number} daysInTheFuture The number of days in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified days.\n             * @function\n             */\n            advanceDays: function advanceDays (d, daysInTheFuture, adjustForWeekend) {\n                daysInTheFuture = daysInTheFuture && libs.generic.isNumeric(daysInTheFuture) ? daysInTheFuture : 1;\n                d.setTime(d.getTime() + (daysInTheFuture * 86400000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Moves a date forward 'monthsInTheFuture' months.\n             * @param {Date} The date object to operate on.\n             * @param {Number} monthsInTheFuture The number of months in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified months.\n             * @function\n             */\n            advanceMonths: function advanceMonths (d, monthsInTheFuture, adjustForWeekend) {\n                monthsInTheFuture = monthsInTheFuture && libs.generic.isNumeric(monthsInTheFuture) ? monthsInTheFuture : 1;\n                d.setTime(d.getTime() + (monthsInTheFuture * 2629746000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Moves a date forward 'yearsInTheFuture' years.\n             * @param {Date} The date object to operate on.\n             * @param {Number} yearsInTheFuture The number of years in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified years.\n             * @function\n             */\n            advanceYears: function advanceYears (d, yearsInTheFuture, adjustForWeekend) {\n                yearsInTheFuture = yearsInTheFuture && libs.generic.isNumeric(yearsInTheFuture) ? yearsInTheFuture : 1;\n                d.setTime(d.getTime() + (yearsInTheFuture * 31536000000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Returns the date in the yyyy-mm-dd format.\n             * @param {Date} The date object to operate on.\n             * @param {String} [delim='-'] The delimiter to used the separate the date components (e.g. '-' or '.')\n             * @returns {String} The date in the yyyy-mm-dd format.\n             * @function\n             */\n            yyyymmdd: function yyyymmdd (d, delim) {\n                delim = typeof delim !== 'string' ? '-' : delim ;\n\n                var dd   = d.getDate(),\n                    mm   = d.getMonth() + 1,\n                    yyyy = d.getFullYear();\n\n                if(dd < 10) dd = '0' + dd;\n                if(mm < 10) mm = '0' + mm;\n                return yyyy + delim + mm + delim + dd;\n            },\n\n            /**\n             * Converts a date to the HH:MM:SS.MSEC time format\n             * @param {Date} The date object to operate on.\n             * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n             * @returns {String} The formatted number, now a string.\n             * @function\n             */\n            clockTime: function clockTime (d, omitMS) {\n                return libs.number.clockTime(d.getTime(), !!omitMS);\n            }\n        },\n\n        /**\n         * Number library functions\n         * @type {Object}\n         */\n        number: {\n\n            /**\n             * Returns a random integer in range [min, max] (inclusive)\n             * @param {Number} min The minimum possible value (inclusive)\n             * @param {Number} max The maximum possible value (inclusive)\n             * @return {Number} A random number between min and max\n             */\n            randomIntInRange: function (min, max) {\n                min = parseInt(min, 10);\n                max = parseInt(max, 10);\n\n                if(isNaN(min) && !isFinite(min)) min = 0;\n                if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                return Math.floor(Math.random() * (max - min + 1)) + min;\n            },\n\n            /**\n             * Returns a random float in range [min, max] (inclusive)\n             * @param {Number} min The minimum possible value (inclusive)\n             * @param {Number} max The maximum possible value (inclusive)\n             * @return {Number} A random number between min and max\n             */\n            randomNumberInRange: function (min, max) {\n                min = parseInt(min, 10);\n                max = parseInt(max, 10);\n\n                if(isNaN(min) && !isFinite(min)) min = 0;\n                if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                return Math.random() * (max - min + 1) + min;\n            },\n\n            /**\n             * Recursively computes the factorial of the number n.\n             * @param {Number} n A number.\n             * @return {Number|Infinity} n!\n             */\n            factorial: function factorial (n) {\n                if(typeof n !== 'number' || n < 0) return NaN;\n                if(n > 170) return Infinity;\n                if(n === 0 || n === 1) return 1;\n                return n * factorial(n - 1);\n            },\n\n            /**\n             * Determines is the given numbers are integers\n             * @param {...Number} n Numbers.\n             * @return {Boolean} True if all arguments are integers, false otherwise.\n             */\n            isInt: function isInt () {\n                return libs.object.every(arguments, function (n) {\n                    return typeof n === 'number' && n % 1 === 0 && n.toString().indexOf('.') === -1;\n                });\n            },\n\n            /**\n             * Recursively computes n choose k.\n             * @param {Number} n A number.\n             * @param {Number} k A number.\n             * @return {Number|Infinity} n choose k.\n             */\n            choose: function choose (n, k) {\n                if(typeof n !== 'number' || typeof k !== 'number') return NaN;\n                if(k === 0) return 1;\n                return (n * choose(n - 1, k - 1)) / k;\n            },\n\n            /**\n             * Pads a number with preceeding zeros.\n             * @param {Number} n The number object to operate on.\n             * @param {Number} length The final length of the string\n             * @returns {String} The padded number, now a string.\n             * @function\n             */\n            pad: function pad (n, length) {\n                return libs.string.pad(n.toString(), length, '0', true);\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            daysFrom: function daysFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setDate(date.getDate() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            daysFromNow: function daysFromNow (n) {\n                return libs.number.daysFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            secondsFrom: function secondsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setSeconds(date.getSeconds() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            secondsFromNow: function secondsFromNow (n) {\n                return libs.number.secondsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of years.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            yearsFrom: function yearsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setFullYear(date.getFullYear() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of years.\n             * @return {Date} A date object\n             */\n            yearsFromNow: function yearsFromNow (n) {\n                return libs.number.yearsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of months.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            monthsFrom: function monthsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setMonth(date.getMonth() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of months.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            monthsFromNow: function monthsFromNow (n) {\n                return libs.number.monthsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of hours.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            hoursFrom: function hoursFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setHours(date.getHours() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of hours.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            hoursFromNow: function hoursFromNow (n) {\n                return libs.number.hoursFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of minutes.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} A modified date.\n             */\n            minutesFrom: function minutesFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setMinutes(date.getMinutes() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of minutes.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} The date object\n             */\n            minutesFromNow: function minutesFromNow (n) {\n                return libs.number.minutesFrom(n, new Date());\n            },\n\n            /**\n             * The time, months in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            monthsAgo: function monthsAgo (n) {\n                return libs.number.minutesFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, days in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            daysAgo: function daysAgo (n) {\n                return libs.number.daysFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, seconds in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            secondsAgo: function secondsAgo (n) {\n                return libs.number.secondsFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, minutes in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            minutesAgo: function minutesAgo (n) {\n                return libs.number.minutesFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, years in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            yearsAgo: function yearsAgo (n) {\n                return libs.number.yearsFromNow(-n, new Date());\n            },\n\n            /**\n             * Converts a number to the HH:MM:SS.MSEC time format\n             * @param {Number} t The number object to operate on.\n             * @memberof Number.prototype\n             * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n             * @returns {String} The formatted number, now a string.\n             * @function\n             */\n            clockTime: function clockTime (t, omitMS) {\n                var ms, secs, mins, hrs;\n\n                ms = t % 1000;\n                t = (t - ms) / 1000;\n\n                secs = t % 60;\n                t = (t - secs) / 60;\n\n                mins = t % 60;\n                hrs = (t - mins) / 60;\n\n                return libs.number.pad(hrs.toString(), 2)  + ':' + libs.number.pad(mins.toString(), 2) + ':' +\n                       libs.number.pad(secs.toString(), 2) + ((omitMS === true) ? '' : '.' + libs.number.pad(ms.toString(), 3));\n            }\n        },\n\n        /**\n         * Function library functions\n         * @type {Object}\n         */\n        function: {\n\n            /**\n             * Inherit the prototype methods from one constructor into another.\n             * @param {Function} constructor The inheriting constructor\n             * @param {Function} superConstructor The parent constructor\n             * @return {Function} The inheriting constructor\n             */\n            inherits: function inherits (constructor, superConstructor) {\n                if (constructor === undefined || constructor === null)\n                throw new TypeError('The constructor to \"inherits\" must not be ' + 'null or undefined');\n\n                if (superConstructor === undefined || superConstructor === null)\n                throw new TypeError('The super constructor to \"inherits\" must not ' + 'be null or undefined');\n\n                if (superConstructor.prototype === undefined)\n                throw new TypeError('The super constructor to \"inherits\" must ' + 'have a prototype');\n\n                constructor.super_ = superConstructor;\n                Object.setPrototypeOf(constructor.prototype, superConstructor.prototype);\n                return constructor;\n            },\n        },\n\n        /**\n         * Array library functions\n         * @type {Object}\n         */\n        array: {\n\n            /**\n             * Shuffles an array\n             * @param {Array} a The Array object to operate on.\n             * @return {Array<*>} The mixed up array\n             */\n            shuffle: function shuffle (a) {\n                for(var i = a.length - 1; i > 0; i--) {\n                    var j = Math.floor(Math.random() * (i + 1)), tmp = a[i];\n                    a[i] = a[j];\n                    a[j] = tmp;\n                }\n                return a;\n            },\n\n            /**\n             * Computes the union between the current array, and all the array objects passed in. That is,\n             * the set of unique objects present in all of the arrays.\n             * @param {Array} a The Array object to operate on.\n             * @param {...Array} arr A list of array objects\n             * @return {Array<*>} The union set of the provided arrays.\n             */\n            union: function union (a) {\n                var args = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                var union = [];\n                args.unshift(a);\n                libs.object.each(args, function (array) {\n                    libs.object.each(array, function (item) {\n                        if(union.indexOf(item) === -1) union.push(item);\n                    });\n                });\n                return union;\n            },\n\n            /**\n             * Returns all the items unique to all arrays.\n             * @param {...Array} arrays The Array objects to operate on.\n             * @param {Array} other The array to compute the difference from.\n             * @return {Array} A new array with items unique to each array.\n             */\n            difference: function difference () {\n                var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                if(arrays.length === 0) return [];\n                if(arrays.length === 1) return libs.object.copy(arrays[0]);\n                var i, simpleDiff = [];\n\n                if(arrays.length === 2) {\n                    for(i = 0; i < arrays[0].length; i++)\n                        if(arrays[1].indexOf(arrays[0][i]) === -1) simpleDiff.push(arrays[0][i]);\n\n                    for(i = 0; i < arrays[1].length; i++)\n                        if(arrays[0].indexOf(arrays[1][i]) === -1) simpleDiff.push(arrays[1][i]);\n\n                    return simpleDiff;\n                }\n\n                var difference = arrays[0], intermediate = [];\n                for(i = 1; i < arrays.length; i++) {\n                    for(var n = 0; n < difference.length; n++) {\n                        if(arrays[i].indexOf(difference[n]) === -1) {\n                            intermediate.push(difference[n]);\n                        }\n                    }\n                    for(var k = 0; k < arrays.length; k++) {\n                        //if(arrays[i] !== arrays)\n                    }\n                    difference = intermediate;\n                    intermediate = [];\n                }\n\n                return difference;\n            },\n\n            /**\n             * Returns the items common to all arrays.\n             * @param {...Array} items The arrays from which to compute the intersection.\n             * @return {Array} A new array with items common to both arrays.\n             */\n            intersect: function intersect () {\n                var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                if(arrays.length === 0) return [];\n                if(arrays.length === 1) return libs.object.copy(arrays[0]);\n\n                var intersection = arrays[0], intermediate = [];\n                for(var i = 1; i < arrays.length; i++) {\n                    for(var n = 0; n < intersection.length; n++) {\n                        if(arrays[i].indexOf(intersection[n]) > -1) {\n                            intermediate.push(intersection[n]);\n                            var idx = arrays[i].indexOf(intersection[n]);\n                            arrays[i].splice(idx, 1);\n                        }\n                    }\n                    intersection = intermediate;\n                    intermediate = [];\n                }\n\n                return intersection;\n            },\n\n            /**\n             * Creates a new array from the current one, with all occurences of the provided arguments ommited.<br>\n             * For example: <em>[1,2,3,4,5].without(1)</em> will return <em>[2,3,4,5]</em>\n             * and <em>[1, null, 2, null, undefined].without(null, undefined)</em> will return <em>[1, 2]</em>\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array<*>} A shallow copy of the array with the provided arguments ommited.\n             * @function\n             */\n            without: function without () {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift(),\n                    res  = [];\n\n                libs.object.each(a, function (v) { if(args.indexOf(v) === -1) res.push(v); });\n                return res;\n            },\n\n            /**\n             * Rotates the array left or right the specified number of times. If the direction is left, it will shift off the\n             * first <em>n</em> elements and push them to the end of the array. If right, it will pop off the last <em>n</em>\n             * items and unshift them onto the front of the array.\n             * @param {Array} a The Array object to operate on.\n             * @param {String=} [direction='left'] The direction to rotate array members.\n             * @param {Number=} [amount=1] The number of elements to shift\n             * @return {Array<*>} The current array, shifted.\n             * @function\n             */\n            rotate: function rotate (a, direction, amount) {\n                if(direction && libs.object.isNumeric(direction) && !amount) {\n                    amount    = direction;\n                    direction = undefined;\n                }\n\n                if(!amount || (amount && !libs.object.isNumeric(amount))) amount = 1;\n                for(var i = 0; i < amount; i++) {\n                    if(direction !== 'right') a.push(a.shift()); else a.unshift(a.pop());\n                }\n                return a;\n            },\n\n            /**\n             * Rotates the array left the specified number of times.\n             * This is useful if trying to create a circular queue.\n             * @param {Array} a The Array object to operate on.\n             * @param {Number=} [amount=1] The number of times to rotate the array left.\n             * @return {Array<*>} The current array, rotated left.\n             * @function\n             */\n            rotateLeft: function rotateLeft (a, amount) {\n                return libs.array.rotate(a, 'left', amount);\n            },\n\n            /**\n             * Rotates the array right the specified number of times.\n             * This is useful if trying to create a circular queue.\n             * @param {Array} a The Array object to operate on.\n             * @param {Number=} [amount=1] The number of times to rotate the array left.\n             * @return {Array<*>} The current array, rotated right.\n             * @function\n             */\n            rotateRight: function rotateLeft (a, amount) {\n                return libs.array.rotate(a, 'right', amount);\n            },\n\n            /**\n             * Removes duplicates from the current array.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array<*>} The current array, with duplicates removed.\n             * @function\n             */\n            makeUnique: function makeUnique (a) {\n                var visited = [];\n                for(var i = 0; i < a.length; i++) {\n                    if(visited.indexOf(a[i]) === -1) {\n                        visited.push(a[i]);\n                    }\n                    else {\n                        a.splice(i, 1);\n                        i--; // Splice will affect the internal array pointer, so fix it...\n                    }\n                }\n                return a;\n            },\n\n            /**\n             * Gets an array of unique items from the current array.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} A new array with no duplicate values.\n             * @function\n             */\n            unique: function unique (a) {\n                var visited = [],\n                    unique  = [];\n\n                libs.object.each(a, function (item) {\n                    if(visited.indexOf(item) === -1) {\n                        unique.push(item);\n                        visited.push(item);\n                    }\n                });\n                return unique;\n            },\n\n            /**\n             * Sorts the array in ascending order.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} The array sorted in ascending order.\n             * @function\n             */\n            ascending: function ascending (a) {\n                return a.sort(function (a, b) {\n                    if(a !== undefined && a !== null) a = a.toString();\n                    if(b !== undefined && b !== null) b = b.toString();\n                    return a < b ? -1 : a > b ? 1 : 0;\n                });\n            },\n\n            /**\n             * Sorts the array in descending order.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} The array sorted in descending order.\n             * @function\n             */\n            descending: function descending (a) {\n                return a.sort(function (a, b) {\n                    if(a !== undefined && a !== null) a = a.toString();\n                    if(b !== undefined && b !== null) b = b.toString();\n                    return a > b ? -1 : a < b ? 1 : 0;\n                });\n            }\n        },\n\n        /**\n         * Array library functions\n         * @type {Object}\n         */\n        object: {\n\n            /**\n             * Computes the frequencies for each item in all of arguments.\n             * @param {...*} objs The objects to compute the histogram from.\n             * @return {Object<Number>} An object that has the items from all of the arguments as its keys and their frequencies as it's values.\n             */\n            histogram: function histogram () {\n                var histogram = {};\n                libs.object.every(arguments, function (o) {\n                    if(typeof o === 'boolean') {\n                        if(!histogram[o]) histogram[o] = 1; else histogram[o]++;\n                    }\n                    else if(typeof o === 'function') {\n                        if(!histogram['function']) histogram['function'] = 1; else histogram[o]++;\n                    }\n                    else {\n                        libs.object.every(o, function (val) {\n                            switch(true) {\n                                case typeof val === 'function':\n                                case typeof val === 'undefined':\n                                    val = typeof val;\n                                    break;\n                                case typeof val === 'object' && val === null:\n                                    val = 'null';\n                                    break;\n                                case typeof val === 'object' && val instanceof Array:\n                                    val = 'array';\n                                    break;\n                                case typeof val === 'object':\n                                    val = 'object';\n                                    break;\n                                default:\n                                    val = val.toString();\n                            }\n\n                            if(typeof histogram[val] !== 'number') histogram[val] = 0;\n                            histogram[val]++;\n                        });\n                    }\n                });\n                return histogram;\n            },\n\n            /**\n             * Creates a shallow copy of 'item'.\n             * @param {*} item The item to shallow \"copy\".\n             * @return {*} A shallow copy of the item.\n             */\n            copy: function copy (item) {\n                var copy;\n                if(!item) return item;\n\n                switch (typeof item) {\n                    case 'string':\n                    case 'number':\n                    case 'function':\n                    case 'boolean':\n                        return item;\n\n                    default:\n                        if(item instanceof Array) {\n                            copy = [];\n                        }\n                        else {\n                            copy = {};\n                        }\n                }\n\n                libs.object.every(item, function (o, k) { copy[k] = o; });\n                return copy;\n            },\n\n            /**\n             * Returns the number of occurences of \"what\"\n             * @param {*} obj The item to count the occurences of \"what\" in.\n             * @param {*} what The item to count the occurences of the item in the array.\n             * @return {[type]} [description]\n             */\n            occurrencesOf: function occurrencesOf (obj, what) {\n                if(arguments.length < 2) return 0;\n\n                if(typeof obj === 'boolean') {\n                    return 0;\n                }\n                if(typeof obj === 'number') {\n                    return occurrencesOf(obj.toString(), what);\n                }\n                else if(typeof obj === 'function') {\n                    return occurrencesOf(fixFirefoxFunctionString(obj.toString()), what);\n                }\n\n                var count = 0;\n                if(typeof obj === 'string') {\n                    if(typeof what === 'string' || typeof what === 'number') {\n                        var regexp = new RegExp(what.toString(), 'g'), m;\n                        while(m = regexp.exec(obj)) count++;\n                    }\n                }\n                else if(typeof obj !== 'string') {\n                    libs.object.every(obj, function (item) {\n                        if(item === what) count++;\n                    });\n                }\n                return count;\n            },\n\n            /**\n             * Returns the object's keys.\n             * @param {Object} o The object to operate on.\n             * @returns {Array<String|Number>} The object's key set\n             * @function\n             */\n            keys : function keys (o) {\n                var keys = Object.keys(o), idx;\n                if(libs.object.isArguments(o)) {\n                    idx = keys.indexOf('length');\n                    if(idx > -1) keys.splice(idx, 1);\n                }\n                return keys;\n            },\n\n            /**\n             * Returns the 'size' or 'length' of an object.\n             * <ul>\n             *      <li> String   -> The string's length  </li>\n             *      <li> Number   -> The number of digits </li>\n             *      <li> Object   -> The number of keys   </li>\n             *      <li> Array    -> The number of items  </li>\n             *      <li> Function -> 1                    </li>\n             * </ul>\n             * @param {Object} o The object to operate on.\n             * @returns {Number} The number of items within the object.\n             * @function\n             */\n            size: function size (o) {\n                switch(true) {\n                    case typeof o === 'function':\n                        return 1;\n\n                    case typeof o === 'number':\n                        return o.toString().length;\n\n                    case o instanceof Array:\n                    case typeof o === 'string':\n                        return o.length;\n\n                    case libs.object.isArguments(o) && typeof o.length !== 'undefined':\n                        return o.length - 1;\n\n                    case o && typeof o === 'object':\n                        return Object.keys(o).length;\n\n                    default:\n                        return 0;\n                }\n            },\n\n            /**\n             * Determines if an object can be converted to a number.\n             * @param {...Object} o The object to operate on.\n             * @returns {Boolean} True if the object is numeric, false otherwise.\n             * @function\n             */\n            isNumeric: function isNumeric () {\n                return libs.object.every(arguments, function (item) {\n                    return !isNaN(parseFloat(item)) && isFinite(item);\n                });\n            },\n\n            /**\n             * Converts an object to a number.\n             * @param {...Object} o The object to operate on.\n             * @returns {Number} The object as a number.\n             * @function\n             */\n            getNumeric: function getNumeric () {\n                var res = [], len = arguments.length;\n                libs.object.every(arguments, function (item) {\n                    res.push(!isNaN(parseFloat(item)) && isFinite(item));\n                });\n                return len === 1 ? res[0] : res;\n            },\n\n            /**\n             * Determines if an object has no keys, if an array has no items, or if a string === ''.\n             * @param {...Object} o The object to operate on.\n             * @returns {Boolean} True if the object is 'empty', false otherwise.\n             * @function\n             */\n            isEmpty: function isEmpty () {\n                return libs.object.every(arguments, function (item) {\n                    return libs.object.size(item) === 0 && item !== false && item !== '' && item !== true;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all arrays, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is an array, false otherwise.\n             */\n            isArray: function isArray () {\n                return libs.object.every(arguments, function (item) {\n                    return item instanceof Array;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all objects and not arrays, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is an object and not an array, false otherwise.\n             */\n            isPureObject: function isPureObject () {\n                return libs.object.every(arguments, function (item) {\n                    return !(item instanceof Array) && typeof item === 'object';\n                });\n            },\n\n            /**\n             * True if the objects passed in are all strings, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a string, false otherwise.\n             */\n            isString: function isString () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'string';\n                });\n            },\n\n            /**\n             * True if the objects passed in are all booleans, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a boolean, false otherwise.\n             */\n            isBoolean: function isBoolean () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'boolean';\n                });\n            },\n\n            /**\n             * True if the objects passed in are allfunction, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isFunction: function isFunction () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'function';\n                });\n            },\n\n            /**\n             * True if the objects passed in are allll, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isNull: function isNull () {\n                return libs.object.every(arguments, function (item) {\n                    return item === null;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all undefined, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isUndefined: function isUndefined () {\n                return libs.object.every(arguments, function (item) {\n                    return item === undefined;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all arguments objects, false otherwise.\n             * @param {Object} o The object to operate on.\n             * @return {Boolean} True if the object is an arguments object, false otherwise\n             */\n            isArguments: function isArguments () {\n                return libs.object.every(arguments, function (item) {\n                    return Object.prototype.toString.call(item) === '[object Arguments]';\n                });\n            },\n\n            /**\n             * Convers an object to a number, if possible.\n             * @param {...Object} o The object to operate on.\n             * @returns {Number} The object as a float or NaN.\n             * @function\n             */\n            toNumber: function toNumber () {\n                var vals = [];\n                libs.object.every(arguments, function (o) {\n                    vals.push(libs.object.isNumeric(o) ? parseFloat(o) : NaN);\n                });\n                return vals.length === 1 ? vals[0] : vals;\n            },\n\n            /**\n             * Convers an object to an integer, if possible.\n             * @param {Object} o The object to operate on.\n             * @returns {Number} The object as an integer or NaN.\n             * @function\n             */\n            toInt: function toInt () {\n                var vals = [];\n                libs.object.every(arguments, function (o) {\n                    var radix = /^0x/.test(o) ? 16 : 10; // Check for hex string\n                    vals.push(libs.object.isNumeric(o) ? parseInt(o, radix) : NaN);\n                });\n                return vals.length === 1 ? vals[0] : vals;\n            },\n\n            /**\n             * Returns a random array item, random object property, random character in a string, or random digit in a number.\n             * @param {Object} o The object to operate on.\n             * @returns {*}\n             * @function\n             */\n            random: function random (o) {\n                if(typeof o === 'object') {\n                    return o instanceof Array ?\n                        o[Math.floor(Math.random() * o.length)] :\n                        o[Object.keys(o)[Math.floor(Math.random() * Object.keys(o).length)]];\n                }\n                else if(typeof o === 'string' || typeof o === 'number') {\n                    var val = o, negative = false;\n\n                    if(o.length === 0) return '';\n                    if(typeof o === 'number' && o < 0) {\n                        negative = true;\n                        val = Math.abs(val);\n                    }\n\n                    val = val.toString()[Math.floor(Math.random() * val.toString().length)];\n                    if(typeof o === 'number') val = parseInt(val, 10);\n                    return negative ? -val : val;\n                }\n                return o;\n            },\n\n            /**\n             * Invokes the callback 'f' for each property the object contains. If this is called\n             * on a number or function, the object will be cast to a string.<br><br>\n             * The callback `f` will be invoked with the following arguments:\n             * <ul>\n             * \t<li>value     - The value of the current object being iterated over</li>\n             * \t<li>key       - The key of the current object (if an object, the index if an array)</li>\n             * \t<li>iteration - The current iteration (same as key if a string or array)</li>\n             * \t<li>exit      - A function which will break the loop and return the values passed to it,\n             * \t\t\t\t\tor a single value if only a single value is passed.</li>\n             * </ul>\n             * @function\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [rangeA=0] The iteration start index\n             * @param {Number=} [rangeB='length of the item'] The iteration end index\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {*} The value passed to the exit parameter of the callback...\n             */\n            each: function each (o, rangeA, rangeB, f) {\n\n                // Can't use last here.. would cause circular ref...\n                f = undefined;\n                for(var k = arguments.length - 1; k >= 0; k--) {\n                    if(arguments[k] instanceof Function) {\n                        f = arguments[k];\n                        break;\n                    }\n                }\n\n                var ret    = null,\n                    broken = false,\n                    self   = o,\n                    keys, property, value,\n\n                    exit = function () {\n                        broken   = true;\n                        ret      = arguments.length > 1 ? libs.object.toArray(arguments) : arguments[0];\n                    };\n\n                if(f instanceof Function) {\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = Object.keys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    rangeA = parseInt(rangeA);\n                    rangeA = (isNaN(rangeA) || !isFinite(rangeA)) ? 0 : rangeA;\n\n                    rangeB = parseInt(rangeB);\n                    rangeB = (isNaN(rangeB) || !isFinite(rangeB)) ? keys.length : rangeB;\n\n                    var i = 0, n;\n                    if(Math.abs(rangeA) > Math.abs(rangeB)) {\n                        if(rangeB < 0) rangeB = 0;\n                        if(rangeA < 0) rangeA = 0;\n                        if(rangeA > keys.length - 1) rangeA = keys.length - 1;\n\n                        for(n = rangeA; n >= rangeB; n--) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            f.call(o, value, property, n, exit, i++, o);\n                            if(broken) break;\n                        }\n                    }\n                    else {\n                        rangeB = rangeB + 1 > keys.length ? keys.length : rangeB + 1;\n                        if(rangeB < 0) rangeB = 0;\n                        if(rangeA < 0) rangeA = 0;\n\n                        for(n = rangeA; n < rangeB; n++) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            f.call(o, value, property, n, exit, i++, o);\n                            if(broken) break;\n                        }\n                    }\n                }\n                return ret;\n            },\n\n            /**\n             * Invokes the callback 'f' for every property the object contains. If the callback returns false, the\n             * loop is broken and false is returned; otherwise true is returned.\n             * @param {Object} o The object to operate on.\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {Boolean} True if none of the callback invocations returned false.\n             * @function\n             */\n            every: function every (o, f) {\n                f = f instanceof Function ? f : undefined;\n\n                if(f instanceof Function) {\n                    var self = o, keys, property, value;\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari...\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = Object.keys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    var i = 0;\n                    for(var n = 0; n < keys.length; n++) {\n                        property = keys[n];\n                        value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                        if(f.call(o, value, property, n, i++, o) === false) return false;\n                    }\n                }\n                return true;\n            },\n\n            /**\n             * Invokes the callback 'f' for every property the object contains. If the callback returns true, the\n             * loop is broken and false is returned; otherwise true is returned.\n             * @param {Object} o The object to operate on.\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {Boolean} True if none of the callback invocations returned false.\n             * @function\n             */\n            any: function any (o, f) {\n                f = f instanceof Function ? f : undefined;\n\n                if(f instanceof Function) {\n                    var self = o, keys, property, value;\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari...\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = Object.keys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    var i = 0;\n                    for(var n = 0; n < keys.length; n++) {\n                        property = keys[n];\n                        value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                        var ret = f.call(o, value, property, n, i++, o);\n                        if(ret !== undefined) return ret;\n                    }\n                }\n                return undefined;\n            },\n\n            /**\n             * Converts an object to an array. For strings, numbers, and functions this will\n             * return a char array to their respective .toString() values\n             * @param {Object} o The object to operate on.\n             * @function\n             * @return {Array<*>} The object, converted to an array.\n             */\n            toArray: function toArray (o) {\n                if(o instanceof Array) return libs.object.copy(o);\n                var arr = [];\n                libs.object.each(o, function (val) { arr.push(val); });\n                return arr;\n            },\n\n            /**\n             * Returns the first n elements of an object. If the object is an array, and only one items is retrieved,\n             * that item will be returned, rather than an array.\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [n=1] The number of elements to return\n             * @return {Array<*>} The first n elements of the array.\n             */\n            first: function first (o, n) {\n                n = parseInt(n, 10);\n                n = isNaN(n) || !isFinite(n) ? 1 : n;\n                var v = null;\n\n                if(typeof o === 'boolean') {\n                    return o;\n                }\n                else if(typeof o !== 'object') {\n                    if(n !== 0) v = o.toString().slice(0, n); else return null;\n                }\n                else if(o instanceof Array) {\n                    if(n === 1) return o[0];\n                    return n !== 0 ? o.slice(0, n) : [];\n                }\n                else {\n                    v = {};\n                    libs.object.each(o, 0, n - 1, function (item, key) { v[key] = item; });\n                    var keys = Object.keys(v);\n                    return keys.length === 1 ? v[keys[0]] : v;\n                }\n                return v.length === 1 ? v[0] : v;\n            },\n\n            /**\n             * Returns the last n elements of an object. If the object is an array, and only one items is retrieved,\n             * that item will be returned rather than an array.\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [n=1] The number of elements to return\n             * @return {Array<*>} The last n elements of the array.\n             * @function\n             */\n            last: function last (o, n) {\n                if(typeof o === 'boolean') return o;\n\n                n = parseInt(n, 10);\n                n = isNaN(n) || !isFinite(n) ? 1 : n;\n                var v = null, keys, len = libs.object.size(o), idx;\n\n                if(typeof o === 'boolean') {\n                    return o;\n                }\n                else if(libs.object.isArguments(o)) {\n                    keys = Object.keys(o);\n                    idx  = keys.indexOf('length');\n\n                    if(idx > -1) keys.splice(idx, 1);\n                    v = []; len = keys.length;\n                    // Arguments object should ignore undefined members...\n                    libs.object.each(keys, 0, len, function (k) { if(o[k] !== undefined) v.unshift(o[k]); });\n                    v = v.slice(0, n);\n                }\n                else if(typeof o !== 'object') {\n                    if(n !== 0) v = o.toString().slice(-n); else return null;\n                }\n                else if(o instanceof Array) {\n                    if(n === 1) return o[o.length -1];\n                    return n !== 0 ? o.slice(-n) : [];\n                }\n                else {\n                    v = {};\n                    if(n < 0) n = 0;\n                    libs.object.each(o, len - n, len, function (item, key) { v[key] = item; });\n                    keys = Object.keys(v);\n                    return keys.length === 1 ? v[keys[0]] : v;\n                }\n                return v.length === 1 ? v[0] : v.length > 0 ? v : null;\n            },\n\n            /**\n             * If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n             * Useful for ensuring that a callback can always be invoked, without checking if the argument is a function\n             * over and over.\n             * @param {Object} o The object to get the callback for.\n             * @return {Function} If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n             */\n            getCallback: function getCallback (o) {\n                var last = libs.object.last(o);\n                return last instanceof Function ? last : NULL_FUNCTION;\n            },\n\n            /**\n             * Find a child of an object using the given path, split by the given delimiter (or '.' by default)\n             * @param {Object} o The object to operate on.\n             * @param {String} path The path to the child object\n             * @param {String=} [delimiter='.'] The path delimiter\n             * @param {Function=} done A callback for completion\n             * @return {*|Null} The child object at the given string path, or null if it doesn't exist.\n             * @function\n             */\n            findChildAtPath: function findChildAtPath (o, path, delimiter, original, invoked, done) {\n                done = libs.object.getCallback(arguments);\n                var self = o;\n\n                original = (!(original instanceof Function) && original) ? original : self;\n                invoked  = invoked || false;\n\n                if(typeof o === 'object' && typeof path === 'string') {\n                    delimiter = typeof delimiter === 'string' ? delimiter : '.';\n                    path      = path.split(delimiter);\n\n                    var p = path.shift();\n                    if(p) {\n                        return libs.object.each(o, function (o, k, i, exit) {\n                            if(path.length === 0 && k === p) {\n                                done.call(original, o, self, k);\n                                invoked = true;\n                                exit(o);\n                            }\n                            else {\n                                var obj = libs.object.findChildAtPath(o, path.join(delimiter), delimiter, original, invoked, done);\n                                if(obj !== null) exit(obj);\n                            }\n                        });\n                    }\n                }\n                if(!invoked && original === self && done instanceof Function) done.call(original, null, self, null);\n                return null;\n            },\n\n            /**\n             * Produces a shallow clone of the object, that is, if JSON.stringify can handle it.<br>\n             * The object must be non-circular.\n             * @param {Object} o The object to operate on.\n             * @return {*} A shallow clone of the object.\n             * @function\n             */\n            clone: function clone (o) {\n                if(typeof o === 'string' || typeof o === 'number') return o;\n\n                try {\n                    return JSON.parse(JSON.stringify(o));\n                }\n                catch (e) {\n                    throw new Error('Unable to clone object: ' + e.message);\n                }\n            },\n\n            /**\n             * Filters an array or object using only the types allowed. That is, if the item in the array is of a type listed\n             * in the arguments, then it will be added to the filtered array. In this case 'array' is a valid type.\n             * @param {Object} o The object to operate on.\n             * @param {...String} types A list of typeof types that are allowed in the array.\n             * @return {Array<*>} An array filtered by only the allowed types.\n             */\n            only: function only (o, types) {\n                types = libs.object.toArray(arguments);\n                types.shift();\n\n                // Allows the 'plural' form of the type...\n                libs.object.each(types, function (type, key) { this[key] = type.replace(/s$/, ''); });\n\n                if(typeof o !== 'object' || !o) return o;\n                var isArray  = o instanceof Array ? true : false,\n                    filtered = isArray ? [] : {},\n                    typeArr  = types.indexOf('array'),\n                    typeObj  = types.indexOf('object object');\n\n                libs.object.each(o, function (item, key) {\n                    var typeItem = types.indexOf(typeof item);\n\n                    if(typeObj !== -1 && typeArr === -1) {\n                        if((typeof item === 'object' && !(item instanceof Array)) || (typeof item !== 'object' && typeItem !== -1)) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    }\n                    else if(typeObj !== -1 && typeArr !== -1) {\n                        types.push('object');\n                        if(typeItem !== -1) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    }\n                    else if(typeItem !== -1 || (item instanceof Array && typeArr !== -1)) {\n                        if(isArray) filtered.push(item); else filtered[key] = item;\n                    }\n                });\n                return filtered;\n            },\n\n            /**\n             * Filters an object using the given predicate function. For objects, a new object will be returned, with\n             * the values that passed the predicate function. For strings, a new string will be returned with the characters\n             * that passed the predicate function. For numbers, a new number will be returned with the digits that passed\n             * the predicate function. Functions will be operated on as strings.\n             * @param {Object} o The object to operate on.\n             * @param {Function} predicate The function used to filter the object.\n             * @return {*} The filtered object\n             */\n            where: function where (o, predicate) {\n                if(!(predicate instanceof Function)) {\n                    var temp = predicate;\n                    predicate = function (i) { return i == temp; };\n                }\n\n                if(o === null || o === undefined) return o;\n                if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                    filtered = !isObject ? [] : {};\n\n                libs.object.each(o, function (item, key) {\n                    if(predicate.call(item, item, key)) {\n                        if(isObject) filtered[key] = item; else filtered.push(item);\n                    }\n                });\n\n                if(typeof o !== 'object') filtered = filtered.join('');\n                return filtered;\n            },\n\n            /**\n             * Filters an object by keys using the given predicate function.\n             * @param {Object} o The object to operate on.\n             * @param {Function} predicate The function used to filter the object.\n             * @return {*} The filtered object\n             */\n            whereKeys: function whereKeys (o, predicate) {\n                if(!(predicate instanceof Function)) {\n                    var temp = predicate;\n                    predicate = function (k) { return k == temp; };\n                }\n\n                if(o === null || o === undefined) return o;\n                if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                    filtered = !isObject ? [] : {};\n\n                libs.object.each(o, function (item, key) {\n                    if(predicate.call(key, key, item)) {\n                        if(isObject) filtered[key] = item; else filtered.push(item);\n                    }\n                });\n\n                if(typeof o !== 'object') filtered = filtered.join('');\n                return filtered;\n            },\n\n            /**\n             * For objects, inverts the objects keys/values. If the value isn't a number or array, it will be omitted.\n             * For strings, it will reverse the string.\n             * For number, it will compute the number's inverse (i.e. 1 / x).\n             * For functions, invert returns a new function that wraps the given function and inverts it's result.\n             * @param {Object} o The object to operate on.\n             * @return {*} The inverse, as described above.\n             */\n            invert: function invert (o) {\n                if(o === null || o === undefined) return o;\n                if(typeof o === 'string')   return libs.string.reverse(o);\n                if(typeof o === 'number')   return 1 / o;\n                if(typeof o === 'boolean')  return !o;\n\n                if(typeof o === 'function') {\n                    return function () { return libs.object.invert(o.apply(o, arguments)); };\n                }\n\n                var obj = {};\n                libs.object.each(o, function (item, key) {\n                    if(typeof item === 'string' || typeof item === 'number') {\n                        if(!obj[item]) {\n                            obj[item] = key;\n                        }\n                        else {\n                            var tmp = obj[item];\n                            obj[item] = [];\n                            obj[item].push(tmp, key);\n                        }\n                    }\n                });\n\n                return obj;\n            },\n\n            /**\n             * Returns the maximum item in the object.\n             * @param {Object} o The object to operate on.\n             * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n             * @return {*} The maximum item in the object collection.\n             */\n            max: function max (o, func) {\n                if(!o || typeof o !== 'object') return o;\n                if(!(func instanceof Function)) func = undefined;\n                var max, maxValue;\n\n                if(!func) {\n                    max = libs.object.first(o);\n                    libs.object.each(o, 1, function (item) {\n                        if(item >= max) max = item;\n                    });\n                }\n                else {\n                    max = libs.object.first(o);\n                    maxValue = func.call(max, max);\n\n                    libs.object.each(o, 1, function (item) {\n                        if(func.call(item, item) >= maxValue) max = item;\n                    });\n                }\n                return max;\n            },\n\n            /**\n             * Returns the minimum item in the object.\n             * @param {Object} o The object to operate on.\n             * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n             * @return {*} The minimum item in the object collection.\n             */\n            min: function min (o, func) {\n                if(!o || typeof o !== 'object') return o;\n                if(!(func instanceof Function)) func = undefined;\n\n                if(typeof o !== 'object') return o;\n                var min, minValue;\n\n                if(!func) {\n                    min = libs.object.first(o);\n                    libs.object.each(o, 1, function (item) {\n                        if(item <= min) min = item;\n                    });\n                }\n                else {\n                    min = libs.object.first(o);\n                    minValue = func.call(min, min);\n\n                    libs.object.each(o, 1, function (item) {\n                        if(func.call(item, item) <= minValue) min = item;\n                    });\n                }\n                return min;\n            },\n\n            /**\n             * Tests whether or not the object has a method called 'method'.\n             * @param {Object} o The object to operate on.\n             * @param {String} method The name of the method to test existence for.\n             * @return {Boolean} True if the object has a function called 'method', false otherwise.\n             */\n            implements: function _implements () {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift();\n\n                if(!a) return false;\n                return libs.object.every(args, function (m) {\n                    if(!(a[m] instanceof Function)) return false;\n                });\n            },\n\n            /**\n             * Same as Object.j.implements, excepct with a hasOwnProperty check.\n             * @param {Object} o The object to operate on.\n             * @param {String} method The name of the method to test existence for.\n             * @return {Boolean} True if the object has its own function called 'method', false otherwise.\n             */\n            implementsOwn: function implementsOwn (o, method) {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift();\n\n                if(!a) return false;\n                return libs.object.every(args, function (m) {\n                    if(!(a[m] instanceof Function) || !o.hasOwnProperty(method)) return false;\n                });\n            }\n        }\n    };\n\n    return libs;\n}\n\n(function () {\n    'use strict';\n    module.exports = libs;\n}());\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n"],"sourceRoot":"/source/"}