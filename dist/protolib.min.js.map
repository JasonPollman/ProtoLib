{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index","protolib.js","lib/libp.js","lib/libs.js","node_modules/os-browserify/browser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","oid","IS_BROWSER","window","Object","defineProperty","prototype","configurable","enumerable","get","this","__protolib_id__","enumberable","writable","value","toString","_objectUid","__get_protolib_id__","_numberUid","Number","_stringUid","String","_arrayUid","Array","_functionUid","Function","_dateUid","Date","ProtoLib","handle","deleteCacheForConstructor","constr","inheritanceList","hasOwnProperty","indexOf","cached","self","attachLibraryToSelf","libs","getProto","getPrototypeOf","__proto__","constructor","applyLibraryToPrototypes","attached","set","v","pid","proto","addMethod","lib","last","k","currentThis","libp","object","each","unshift","removeLibraryFromPrototypes","getThisValueAndInvoke","callback","undefined","valueOf","string","number","array","date","my","setHandle","h","extend","name","staticNamespace","getCallback","arguments","constructorId","constructorName","args","toArray","c","push","apply","remove","uid","__protolib_static_namespace__","unload","load","./lib/libp","./lib/libs",2,"camelize","decamelize","differenceFromString","other","replaceTokens","replaceStringTokens","intersectString","repeat","times","rtrim","what","ltrim","htmlEncode","htmlDecode","addSlashes","ucFirst","lcFirst","titleCase","splice","index","count","add","ellipses","place","shuffle","splitter","reverse","withoutTrailingSlash","withTrailingSlash","regexpSafe","pad","delim","pre","newlineToBreak","tabsToSpan","wordWrapToLength","width","padleft","padright","omitFirst","union","difference","intersect","without","rotate","direction","amount","rotateLeft","rotateRight","makeUnique","unique","ascending","descending","to","isInt","randomIntInRange","randomNumberInRange","factorial","choose","daysFrom","daysFromNow","secondsFrom","secondsFromNow","yearsFrom","yearsFromNow","monthsFrom","monthsFromNow","hoursFrom","hoursFromNow","minutesFrom","minutesFromNow","monthsAgo","daysAgo","secondsAgo","minutesAgo","yearsAgo","clockTime","function","inherits","histogram","copy","start","end","occurrencesOf","keys","size","isNumeric","getNumeric","isEmpty","isArray","isPureObject","isString","isUndefined","isNull","isBoolean","isFunction","isArguments","toNumber","toInt","random","every","any","first","findChildAtPath","path","delimiter","done","clone","only","where","predicateFunction","whereKeys","invert","max","min","implements","method","implementsOwn","advanceDays","adjustForWeeked","d","advanceMonths","advanceYears","yymmdd","omitMS",3,"fixFirefoxFunctionString","replace","getKeys","HAS_OS","NULL_FUNCTION","ret","split","join","$","toLowerCase","trim","sarr","oarr","differenceFromArray","generic","intersectArray","parseInt","isNaN","isFinite","os","RegExp","map","&","<",">","\"","'","m","&amp;","&lt;","&gt;","&quot;","&#039;","charAt","toUpperCase","slice","arr","substring","substr","replaceSplits","j","Math","floor","tmp","str","platform","thisLength","paddingLeft","cols","item","len","olen","shift","daysInTheFuture","adjustForWeekend","setTime","getTime","getDay","monthsInTheFuture","yearsInTheFuture","yyyymmdd","dd","getDate","mm","getMonth","yyyy","getFullYear","MAX_VALUE","NaN","Infinity","setDate","setSeconds","getSeconds","setFullYear","setMonth","setHours","getHours","setMinutes","getMinutes","ms","secs","mins","hrs","superConstructor","TypeError","super_","setPrototypeOf","arrays","simpleDiff","intermediate","intersection","idx","res","pop","visited","sort","b","val","obj","regexp","exec","parseFloat","vals","radix","test","negative","abs","rangeA","rangeB","property","broken","exit","isArgs","key","original","invoked","p","JSON","parse","stringify","message","types","type","filtered","typeArr","typeObj","typeItem","predicate","temp","isObject","func","maxValue","minValue",4,"endianness","hostname","location","loadavg","uptime","freemem","totalmem","cpus","release","navigator","appVersion","networkInterfaces","getNetworkInterfaces","arch","tmpdir","tmpDir","EOL"],"mappings":"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","file":"protolib.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function () {\n    'use strict';\n\n    /**\n     * Function Identifier.\n     * @type {Number}\n     */\n    var oid = -1,\n\n     /**\n      * True if the Node.js environment is loaded, false otherwise.\n      * @type {Boolean}\n      */\n    IS_BROWSER = typeof window !== 'undefined';\n\n    // This provides a way to determine the name of a function constructor in a platform agnostic way...\n    Object.defineProperty(Object.prototype, '__get_protolib_id__', {\n        configurable : true,\n        enumerable   : false,\n        get          : function () {\n            if(typeof this.__protolib_id__ !== 'string' && (typeof this === 'object' || typeof this === 'function')) {\n                Object.defineProperty(this, '__protolib_id__', {\n                    configurable : false,\n                    enumberable  : false,\n                    writable     : false,\n                    value        : '0x' + (++oid).toString(16)\n                });\n            }\n            return this.__protolib_id__;\n        }\n    });\n\n    var _objectUid   = Object.__get_protolib_id__,\n        _numberUid   = Number.__get_protolib_id__,\n        _stringUid   = String.__get_protolib_id__,\n        _arrayUid    = Array.__get_protolib_id__,\n        _functionUid = Function.__get_protolib_id__,\n        _dateUid     = Date.__get_protolib_id__;\n\n    var ProtoLib = function (handle) {\n        // Prevent Function.call or binding...\n        if(!(this instanceof ProtoLib)) return new ProtoLib(handle);\n\n        // Set either the user the default \"handle\" (library accessor)\n        handle = typeof handle === 'string' ? handle : '_';\n\n        /**\n         * A self reference.\n         * @type {ProtoLib}\n         */\n        var self = this,\n\n        /**\n         * Whether or not the library functions have been attached to the prototypes.\n         * @type {Boolean}\n         */\n        attached = false,\n\n        /**\n         * Points to the current this item.\n         * @type {*}\n         */\n        currentThis = null,\n\n        /**\n         * Stores cached library proto reference objects\n         * @type {Object}\n         */\n        cached = {},\n\n        /**\n         * Stores the constructor chain for each prototype as an array.\n         * For example: { string: ['object', 'string'] }.\n         * Another example: { myCustomClassThatExtendsString: ['object', 'string', 'myCustomClassThatExtendsString'] }\n         * @type {Object}\n         */\n        inheritanceList = {},\n\n        /**\n         * The static library\n         */\n        libs = require('./lib/libs')(),\n\n        /**\n         * The protolibrary\n         */\n        libp = require('./lib/libp')(libs, getThisValueAndInvoke);\n\n        // Map the object ids to the library names...\n        libp[_objectUid]   = libp.object;\n        libp[_stringUid]   = libp.string;\n        libp[_numberUid]   = libp.number;\n        libp[_arrayUid]    = libp.array;\n        libp[_functionUid] = libp.function;\n        libp[_dateUid]     = libp.date;\n\n        // Tuck unnamed static extensions here...\n        libs.my = {};\n\n        /**\n         * Deletes the cache for the given constructor, and all others that inherits from its prototype.\n         * Which means if constr === Object, all cache will be deleted.\n         * @param {Function} constr The constructor to delete the cache for.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function deleteCacheForConstructor (constr) {\n            for(var i in inheritanceList) {\n                if(inheritanceList.hasOwnProperty(i)) {\n                    if(inheritanceList[i].indexOf(constr.__get_protolib_id__) > -1) {\n                        delete cached[i];\n                        delete inheritanceList[i];\n                    }\n                }\n            }\n            return self;\n        }\n\n        /**\n         * Appends all the library functions to this instance for static use.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function attachLibraryToSelf () {\n            for(var i in libs)\n                if(libs.hasOwnProperty(i) && !self[i]) self[i] = libs[i];\n            return self;\n        }\n\n        function getProto (o) {\n            try {\n                return Object.getPrototypeOf(o);\n            }\n            catch (e) {\n                // IE throw when calling Object.getPrototypeOf on primitive values...\n                // But not with deprecated __proto__ ???\n                return o.__proto__ || o.constructor.prototype; // jshint ignore:line\n            }\n        }\n\n        /**\n         * Adds the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function applyLibraryToPrototypes () {\n            if(!attached) {\n                attached = true;\n                Object.defineProperty(Object.prototype, handle, {\n                    configurable : true,\n                    enumerable   : false,\n                    // Allow users to overwrite the handle on a per instance basis...\n                    set: function (v) {\n                        if(this[handle] !== v) {\n                            Object.defineProperty(this, handle, {\n                                configurable : true,\n                                enumerable   : true,\n                                writable     : true,\n                                value        : v\n                            });\n                        }\n                    },\n                    // Returns the libp library...\n                    get: function () {\n                        var pid, proto, addMethod,\n                            lib  = {},\n                            i    = 0,\n                            last = null;\n\n                        addMethod = function addMethod (o, k) { if(!lib[k]) lib[k] = o; };\n                        proto = getProto(this);\n\n                        do {\n                            currentThis = this;\n                            pid = proto.constructor.__get_protolib_id__;\n\n                            if(cached[pid] && i === 0) {\n                                return cached[pid];\n                            }\n                            else if(libp[pid]) {\n                                libs.object.each(libp[pid], addMethod);\n                                if(!inheritanceList[pid]) inheritanceList[pid] = [pid];\n                                if(last) inheritanceList[last].unshift(pid);\n                                cached[last] = lib;\n                                last = pid;\n                            }\n\n                            ++i;\n                        }\n                        while (proto = getProto(proto)); // jshint ignore:line\n                        return lib;\n                    }\n                });\n            }\n            return self;\n        }\n\n        /**\n         * Removes the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function removeLibraryFromPrototypes () {\n            if(attached) {\n                delete Object.prototype[handle];\n                attached = false;\n            }\n            return self;\n        }\n\n        /**\n         * Retrieves the last item from the 'thisPointerStack' and invokes the provided callback with it.\n         * @param {Function} callback The callback to be invoked with the current 'this' value.\n         * @return The result of the invocation of the callback.\n         */\n        function getThisValueAndInvoke (callback) {\n            return callback(currentThis !== undefined && currentThis !== null ? currentThis.valueOf() : currentThis);\n        }\n\n        /**\n         * Sets the handle\n         * @param {String} h The new handle\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.setHandle = function (h) {\n            if(typeof h === 'string') handle = h;\n            removeLibraryFromPrototypes();\n            applyLibraryToPrototypes();\n            return self;\n        };\n\n        /**\n         * Adds a library method to a prototype.\n         * @param {String} name The name of the library method to add.\n         * @param {Function=} [constr=Object] The constructor of the object to extend.\n         * @param {Function} callback The method to add.\n         * @return {Boolean} True if the method was added, false otherwise.\n         */\n        this.extend = function (name, constr, staticNamespace, callback) {\n            callback = libs.object.getCallback(arguments);\n\n            if(typeof name !== 'string'     || !(callback instanceof Function)) return false;\n            if(typeof constr !== 'function' || constr === callback) constr = Object;\n\n            var constructorId   = constr.__get_protolib_id__,\n                constructorName = typeof staticNamespace === 'string' ?\n                    staticNamespace : typeof constr.name === 'string' ? constr.name : 'my';\n\n            switch(true) {\n                case constr === Object:\n                    constructorName = 'object';\n                    break;\n\n                case constr === Array:\n                    constructorName = 'array';\n                    break;\n\n                case constr === String:\n                    constructorName = 'string';\n                    break;\n\n                case constr === Number:\n                    constructorName = 'number';\n                    break;\n\n                case constr === Function:\n                    constructorName = 'function';\n                    break;\n\n                case constr === Date:\n                    constructorName = 'date';\n                    break;\n            }\n\n            // Set this property so we can remove it later if ProtoLib.remove is called on it...\n            Object.defineProperty(constr, '__protolib_static_namespace__', {\n                configurable : true,\n                writable     : true,\n                enumerable   : false,\n                value        : constructorName\n            });\n\n            if(!libp[constructorId])   libp[constructorId]   = {};\n            if(!libs[constructorName]) libs[constructorName] = {};\n\n            libs[constructorName][name] = callback;\n            libp[constructorId][name]   = function () {\n                var args = libs.object.toArray(arguments);\n                return getThisValueAndInvoke(function (c) {\n                    args.push(c);\n                    return callback.apply(c, args);\n                });\n            };\n\n            deleteCacheForConstructor(constr);\n            return true;\n        };\n\n        /**\n         * Removes a library method from a constructor's prototype.\n         * @param {String} name The name of the library method to remove.\n         * @param {Function} constr The constructor to remove the method from.\n         * @return {Boolean} True if the method was removed, false otherwise.\n         */\n        this.remove = function (name, constr) {\n            if(typeof name !== 'string' || typeof constr !== 'function') return false;\n\n            var uid = constr.__get_protolib_id__;\n            if(libp[uid] && libp[uid][name]) {\n                delete libp[uid][name];\n\n                if(libs[constr.__protolib_static_namespace__] && libs[constr.__protolib_static_namespace__][name])\n                    delete libs[constr.__protolib_static_namespace__][name];\n\n                deleteCacheForConstructor(constr);\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Removes the prototype library reference from the object prototype.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.unload = function () {\n            removeLibraryFromPrototypes();\n            return self;\n        };\n\n        /**\n         * Applies the library to the object prototype and all static functions\n         * to the current ProtoLib instance.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.load = function () {\n            applyLibraryToPrototypes();\n            attachLibraryToSelf();\n            return self;\n        };\n\n        // Apply the library to the object prototype, and attach all the static functions\n        // to the current ProtoLib instance...\n        self.load();\n    };\n\n    return !IS_BROWSER ?\n        module.exports  = ProtoLib :\n        window.ProtoLib = ProtoLib ;\n}());\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function () {\n    'use strict';\n\n    /**\n     * Function Identifier.\n     * @type {Number}\n     */\n    var oid = -1,\n\n     /**\n      * True if the Node.js environment is loaded, false otherwise.\n      * @type {Boolean}\n      */\n    IS_BROWSER = typeof window !== 'undefined';\n\n    // This provides a way to determine the name of a function constructor in a platform agnostic way...\n    Object.defineProperty(Object.prototype, '__get_protolib_id__', {\n        configurable : true,\n        enumerable   : false,\n        get          : function () {\n            if(typeof this.__protolib_id__ !== 'string' && (typeof this === 'object' || typeof this === 'function')) {\n                Object.defineProperty(this, '__protolib_id__', {\n                    configurable : false,\n                    enumberable  : false,\n                    writable     : false,\n                    value        : '0x' + (++oid).toString(16)\n                });\n            }\n            return this.__protolib_id__;\n        }\n    });\n\n    var _objectUid   = Object.__get_protolib_id__,\n        _numberUid   = Number.__get_protolib_id__,\n        _stringUid   = String.__get_protolib_id__,\n        _arrayUid    = Array.__get_protolib_id__,\n        _functionUid = Function.__get_protolib_id__,\n        _dateUid     = Date.__get_protolib_id__;\n\n    var ProtoLib = function (handle) {\n        // Prevent Function.call or binding...\n        if(!(this instanceof ProtoLib)) return new ProtoLib(handle);\n\n        // Set either the user the default \"handle\" (library accessor)\n        handle = typeof handle === 'string' ? handle : '_';\n\n        /**\n         * A self reference.\n         * @type {ProtoLib}\n         */\n        var self = this,\n\n        /**\n         * Whether or not the library functions have been attached to the prototypes.\n         * @type {Boolean}\n         */\n        attached = false,\n\n        /**\n         * Points to the current this item.\n         * @type {*}\n         */\n        currentThis = null,\n\n        /**\n         * Stores cached library proto reference objects\n         * @type {Object}\n         */\n        cached = {},\n\n        /**\n         * Stores the constructor chain for each prototype as an array.\n         * For example: { string: ['object', 'string'] }.\n         * Another example: { myCustomClassThatExtendsString: ['object', 'string', 'myCustomClassThatExtendsString'] }\n         * @type {Object}\n         */\n        inheritanceList = {},\n\n        /**\n         * The static library\n         */\n        libs = require('./lib/libs')(),\n\n        /**\n         * The protolibrary\n         */\n        libp = require('./lib/libp')(libs, getThisValueAndInvoke);\n\n        // Map the object ids to the library names...\n        libp[_objectUid]   = libp.object;\n        libp[_stringUid]   = libp.string;\n        libp[_numberUid]   = libp.number;\n        libp[_arrayUid]    = libp.array;\n        libp[_functionUid] = libp.function;\n        libp[_dateUid]     = libp.date;\n\n        // Tuck unnamed static extensions here...\n        libs.my = {};\n\n        /**\n         * Deletes the cache for the given constructor, and all others that inherits from its prototype.\n         * Which means if constr === Object, all cache will be deleted.\n         * @param {Function} constr The constructor to delete the cache for.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function deleteCacheForConstructor (constr) {\n            for(var i in inheritanceList) {\n                if(inheritanceList.hasOwnProperty(i)) {\n                    if(inheritanceList[i].indexOf(constr.__get_protolib_id__) > -1) {\n                        delete cached[i];\n                        delete inheritanceList[i];\n                    }\n                }\n            }\n            return self;\n        }\n\n        /**\n         * Appends all the library functions to this instance for static use.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function attachLibraryToSelf () {\n            for(var i in libs)\n                if(libs.hasOwnProperty(i) && !self[i]) self[i] = libs[i];\n            return self;\n        }\n\n        function getProto (o) {\n            try {\n                return Object.getPrototypeOf(o);\n            }\n            catch (e) {\n                // IE throw when calling Object.getPrototypeOf on primitive values...\n                // But not with deprecated __proto__ ???\n                return o.__proto__ || o.constructor.prototype; // jshint ignore:line\n            }\n        }\n\n        /**\n         * Adds the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function applyLibraryToPrototypes () {\n            if(!attached) {\n                attached = true;\n                Object.defineProperty(Object.prototype, handle, {\n                    configurable : true,\n                    enumerable   : false,\n                    // Allow users to overwrite the handle on a per instance basis...\n                    set: function (v) {\n                        if(this[handle] !== v) {\n                            Object.defineProperty(this, handle, {\n                                configurable : true,\n                                enumerable   : true,\n                                writable     : true,\n                                value        : v\n                            });\n                        }\n                    },\n                    // Returns the libp library...\n                    get: function () {\n                        var pid, proto, addMethod,\n                            lib  = {},\n                            i    = 0,\n                            last = null;\n\n                        addMethod = function addMethod (o, k) { if(!lib[k]) lib[k] = o; };\n                        proto = getProto(this);\n\n                        do {\n                            currentThis = this;\n                            pid = proto.constructor.__get_protolib_id__;\n\n                            if(cached[pid] && i === 0) {\n                                return cached[pid];\n                            }\n                            else if(libp[pid]) {\n                                libs.object.each(libp[pid], addMethod);\n                                if(!inheritanceList[pid]) inheritanceList[pid] = [pid];\n                                if(last) inheritanceList[last].unshift(pid);\n                                cached[last] = lib;\n                                last = pid;\n                            }\n\n                            ++i;\n                        }\n                        while (proto = getProto(proto)); // jshint ignore:line\n                        return lib;\n                    }\n                });\n            }\n            return self;\n        }\n\n        /**\n         * Removes the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function removeLibraryFromPrototypes () {\n            if(attached) {\n                delete Object.prototype[handle];\n                attached = false;\n            }\n            return self;\n        }\n\n        /**\n         * Retrieves the last item from the 'thisPointerStack' and invokes the provided callback with it.\n         * @param {Function} callback The callback to be invoked with the current 'this' value.\n         * @return The result of the invocation of the callback.\n         */\n        function getThisValueAndInvoke (callback) {\n            return callback(currentThis !== undefined && currentThis !== null ? currentThis.valueOf() : currentThis);\n        }\n\n        /**\n         * Sets the handle\n         * @param {String} h The new handle\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.setHandle = function (h) {\n            if(typeof h === 'string') handle = h;\n            removeLibraryFromPrototypes();\n            applyLibraryToPrototypes();\n            return self;\n        };\n\n        /**\n         * Adds a library method to a prototype.\n         * @param {String} name The name of the library method to add.\n         * @param {Function=} [constr=Object] The constructor of the object to extend.\n         * @param {Function} callback The method to add.\n         * @return {Boolean} True if the method was added, false otherwise.\n         */\n        this.extend = function (name, constr, staticNamespace, callback) {\n            callback = libs.object.getCallback(arguments);\n\n            if(typeof name !== 'string'     || !(callback instanceof Function)) return false;\n            if(typeof constr !== 'function' || constr === callback) constr = Object;\n\n            var constructorId   = constr.__get_protolib_id__,\n                constructorName = typeof staticNamespace === 'string' ?\n                    staticNamespace : typeof constr.name === 'string' ? constr.name : 'my';\n\n            switch(true) {\n                case constr === Object:\n                    constructorName = 'object';\n                    break;\n\n                case constr === Array:\n                    constructorName = 'array';\n                    break;\n\n                case constr === String:\n                    constructorName = 'string';\n                    break;\n\n                case constr === Number:\n                    constructorName = 'number';\n                    break;\n\n                case constr === Function:\n                    constructorName = 'function';\n                    break;\n\n                case constr === Date:\n                    constructorName = 'date';\n                    break;\n            }\n\n            // Set this property so we can remove it later if ProtoLib.remove is called on it...\n            Object.defineProperty(constr, '__protolib_static_namespace__', {\n                configurable : true,\n                writable     : true,\n                enumerable   : false,\n                value        : constructorName\n            });\n\n            if(!libp[constructorId])   libp[constructorId]   = {};\n            if(!libs[constructorName]) libs[constructorName] = {};\n\n            libs[constructorName][name] = callback;\n            libp[constructorId][name]   = function () {\n                var args = libs.object.toArray(arguments);\n                return getThisValueAndInvoke(function (c) {\n                    args.push(c);\n                    return callback.apply(c, args);\n                });\n            };\n\n            deleteCacheForConstructor(constr);\n            return true;\n        };\n\n        /**\n         * Removes a library method from a constructor's prototype.\n         * @param {String} name The name of the library method to remove.\n         * @param {Function} constr The constructor to remove the method from.\n         * @return {Boolean} True if the method was removed, false otherwise.\n         */\n        this.remove = function (name, constr) {\n            if(typeof name !== 'string' || typeof constr !== 'function') return false;\n\n            var uid = constr.__get_protolib_id__;\n            if(libp[uid] && libp[uid][name]) {\n                delete libp[uid][name];\n\n                if(libs[constr.__protolib_static_namespace__] && libs[constr.__protolib_static_namespace__][name])\n                    delete libs[constr.__protolib_static_namespace__][name];\n\n                deleteCacheForConstructor(constr);\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Removes the prototype library reference from the object prototype.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.unload = function () {\n            removeLibraryFromPrototypes();\n            return self;\n        };\n\n        /**\n         * Applies the library to the object prototype and all static functions\n         * to the current ProtoLib instance.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.load = function () {\n            applyLibraryToPrototypes();\n            attachLibraryToSelf();\n            return self;\n        };\n\n        // Apply the library to the object prototype, and attach all the static functions\n        // to the current ProtoLib instance...\n        self.load();\n    };\n\n    return !IS_BROWSER ?\n        module.exports  = ProtoLib :\n        window.ProtoLib = ProtoLib ;\n}());\n\n},{\"./lib/libp\":2,\"./lib/libs\":3}],2:[function(require,module,exports){\n(function () {\n    'use strict';\n    function libp (libs, getThisValueAndInvoke) {\n        var libp = {\n            string: {\n\n                camelize: function camelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.camelize(s);\n                    });\n                },\n\n                decamelize: function decamelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.decamelize(s);\n                    });\n                },\n\n                differenceFromString: function differenceFromString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.differenceFromString(s, other);\n                    });\n                },\n\n                replaceTokens: function replaceTokens () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.replaceStringTokens(s);\n                    });\n                },\n\n                intersectString: function intersectString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.intersectString(s, other);\n                    });\n                },\n\n                repeat: function repeat (times) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.repeat(s, times);\n                    });\n                },\n\n                rtrim: function rtrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.rtrim(s, what);\n                    });\n                },\n\n                ltrim: function ltrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ltrim(s, what);\n                    });\n                },\n\n                htmlEncode: function htmlEncode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlEncode(s);\n                    });\n                },\n\n                htmlDecode: function htmlDecode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlDecode(s);\n                    });\n                },\n\n                addSlashes: function addSlashes () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.addSlashes(s);\n                    });\n                },\n\n                ucFirst: function ucFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ucFirst(s);\n                    });\n                },\n\n                lcFirst: function lcFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.lcFirst(s);\n                    });\n                },\n\n                titleCase: function titleCase () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.titleCase(s);\n                    });\n                },\n\n                splice: function splice (index, count, add) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.splice(s, index, count, add);\n                    });\n                },\n\n                ellipses: function ellipses_ (length, place, ellipses) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ellipses(s, length, place, ellipses);\n                    });\n                },\n\n                shuffle: function shuffle (splitter) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.shuffle(s, splitter);\n                    });\n                },\n\n                reverse: function reverse () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.reverse(s);\n                    });\n                },\n\n                withoutTrailingSlash: function withoutTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withoutTrailingSlash(s);\n                    });\n                },\n\n                withTrailingSlash: function withTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withTrailingSlash(s);\n                    });\n                },\n\n                regexpSafe: function regexpSafe () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.regexpSafe(s);\n                    });\n                },\n\n                pad: function pad (length, delim, pre) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.pad(s, length, delim, pre);\n                    });\n                },\n\n                newlineToBreak: function newlineToBreak () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.newlineToBreak(s);\n                    });\n                },\n\n                tabsToSpan: function tabsToSpan () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.tabsToSpan(s);\n                    });\n                },\n\n                wordWrapToLength: function wordWrapToLength (width, padleft, padright, omitFirst) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.wordWrapToLength(s, width, padleft, padright, omitFirst);\n                    });\n                },\n            },\n\n            array: {\n                shuffle: function shuffle () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.shuffle(a);\n                    });\n                },\n\n                union: function union () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.union.apply(a, args);\n                    });\n                },\n\n                difference: function difference () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.difference.apply(a, args);\n                    });\n                },\n\n                intersect: function intersect () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.intersect.apply(a, args);\n                    });\n                },\n\n                without: function without () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.without.apply(a, args);\n                    });\n                },\n\n                rotate: function rotate (direction, amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotate(a, direction, amount);\n                    });\n                },\n\n                rotateLeft: function rotateLeft (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateLeft(a, amount);\n                    });\n                },\n\n                rotateRight: function rotateRight (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateRight(a, amount);\n                    });\n                },\n\n                makeUnique: function makeUnique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.makeUnique(a);\n                    });\n                },\n\n                unique: function unique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.unique(a);\n                    });\n                },\n\n                ascending: function ascending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.ascending(a);\n                    });\n                },\n\n                descending: function descending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.descending(a);\n                    });\n                }\n            },\n\n            number: {\n\n                to: function to_ (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        var isInt = false;\n                        if(n % 1 === 0 && n.toString().indexOf('.') === -1) isInt = true;\n                        return isInt ? libs.number.randomIntInRange(n, k) : libs.number.randomNumberInRange(n, k);\n                    });\n                },\n\n                isInt: function isInt () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.isInt(n);\n                    });\n                },\n\n                factorial: function factorial () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.factorial(n);\n                    });\n                },\n\n                choose: function choose (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.choose(n, k);\n                    });\n                },\n\n                pad: function pad (length) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.pad(n, length);\n                    });\n                },\n\n                daysFrom: function daysFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFrom(n, date);\n                    });\n                },\n\n                daysFromNow: function daysFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFromNow(n);\n                    });\n                },\n\n                secondsFrom: function secondsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFrom(n, date);\n                    });\n                },\n\n                secondsFromNow: function secondsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFromNow(n);\n                    });\n                },\n\n                yearsFrom: function yearsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFrom(n, date);\n                    });\n                },\n\n                yearsFromNow: function yearsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFromNow(n);\n                    });\n                },\n\n                monthsFrom: function monthsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFrom(n, date);\n                    });\n                },\n\n                monthsFromNow: function monthsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFromNow(n);\n                    });\n                },\n\n                hoursFrom: function hoursFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFrom(n, date);\n                    });\n                },\n\n                hoursFromNow: function hoursFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFromNow(n);\n                    });\n                },\n\n                minutesFrom: function minutesFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFrom(n, date);\n                    });\n                },\n\n                minutesFromNow: function minutesFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFromNow(n);\n                    });\n                },\n\n                monthsAgo: function monthsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsAgo(n);\n                    });\n                },\n\n                daysAgo: function daysAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysAgo(n);\n                    });\n                },\n\n                secondsAgo: function secondsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsAgo(n);\n                    });\n                },\n\n                minutesAgo: function minutesAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesAgo(n);\n                    });\n                },\n\n                yearsAgo: function yearsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsAgo(n);\n                    });\n                },\n\n                clockTime: function clockTime () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.clockTime(n);\n                    });\n                }\n            },\n\n            function: {\n                inherits: function inherits (s) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.function.inherits(o, s);\n                    });\n                }\n            },\n\n            object: {\n                histogram: function histogram () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.histogram(o);\n                    });\n                },\n\n                copy: function copy () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.copy(o);\n                    });\n                },\n\n                each: function each (start, end, callback) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.each(o, start, end, callback);\n                    });\n                },\n\n                occurrencesOf: function occurrencesOf (what) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.occurrencesOf(o, what);\n                    });\n                },\n\n                keys: function keys () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.keys(o);\n                    });\n                },\n\n                size: function size () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.size(o);\n                    });\n                },\n\n                isNumeric: function isNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNumeric(o);\n                    });\n                },\n\n                getNumeric: function getNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getNumeric(o);\n                    });\n                },\n\n                isEmpty: function isEmpty () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isEmpty(o);\n                    });\n                },\n\n                isArray: function isArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArray(o);\n                    });\n                },\n\n                isPureObject: function isPureObject () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isPureObject(o);\n                    });\n                },\n\n                isString: function isString () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isString(o);\n                    });\n                },\n\n                isUndefined: function isUndefined () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isUndefined(o);\n                    });\n                },\n\n                isNull: function isNull () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNull(o);\n                    });\n                },\n\n                isBoolean: function isBoolean () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isBoolean(o);\n                    });\n                },\n\n                isFunction: function isFunction () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isFunction(o);\n                    });\n                },\n\n                isArguments: function isArguments () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArguments(o);\n                    });\n                },\n\n                toNumber: function toNumber () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toNumber(o);\n                    });\n                },\n\n                toInt: function toInt () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toInt(o);\n                    });\n                },\n\n                toArray: function toArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toArray(o);\n                    });\n                },\n\n                getCallback: function getCallback () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getCallback(o);\n                    });\n                },\n\n                random: function random () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.random(o);\n                    });\n                },\n\n                every: function every (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.every(o, f);\n                    });\n                },\n\n                any: function any (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.any(o, f);\n                    });\n                },\n\n                first: function first (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.first(o, n);\n                    });\n                },\n\n                last: function last (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.last(o, n);\n                    });\n                },\n\n                findChildAtPath: function findChildAtPath (path, delimiter, done) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.findChildAtPath(o, path, delimiter, done);\n                    });\n                },\n\n                clone: function clone () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.clone(o);\n                    });\n                },\n\n                only: function only () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (o) {\n                        args.unshift(o);\n                        return libs.object.only.apply(o, args);\n                    });\n                },\n\n                where: function where (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.where(o, predicateFunction);\n                    });\n                },\n\n                whereKeys: function whereKeys (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.whereKeys(o, predicateFunction);\n                    });\n                },\n\n                invert: function invert () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.invert(o);\n                    });\n                },\n\n                max: function max (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.max(o, f);\n                    });\n                },\n\n                min: function min (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.min(o, f);\n                    });\n                },\n\n                implements: function _implements (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implements(o, method);\n                    });\n                },\n\n                implementsOwn: function implementsOwn (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implementsOwn(o, method);\n                    });\n                },\n            },\n\n            date: {\n                advanceDays: function advanceDays (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceDays(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceMonths: function advanceMonths (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceMonths(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceYears: function advanceYears (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceYears(d, n, adjustForWeeked);\n                    });\n                },\n\n                yymmdd: function yymmdd (delim) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.yymmdd(d, delim);\n                    });\n                },\n\n                clockTime: function clockTime (omitMS) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.clockTime(d, !!omitMS);\n                    });\n                },\n            }\n        };\n\n        return libp;\n    }\n    module.exports = libp;\n}());\n\n},{}],3:[function(require,module,exports){\nfunction libs () {\n    'use strict';\n    var IS_BROWSER = typeof window !== 'undefined',\n        HAS_OS     = IS_BROWSER ? false : typeof require('os') === 'object';\n\n    /**\n     * Alters Firefox's Function.toString() results to match Chrome/Safari.\n     * @param {String} s The string representation of the function.\n     * @return {String} The altered string, with newlines replaced and 'use strict' removed.\n     */\n    function fixFirefoxFunctionString (s) {\n        return s.replace(/(?:\\r)?\\n+/g, '').replace(/\"use strict\";|'use strict';/g, '');\n    }\n\n    /**\n     * IE doesn't allow Object.keys on primitive types...\n     * @return {Array<String|Number>}\n     */\n    function getKeys (o) {\n        switch(typeof o) {\n            case 'object':\n                return o ? Object.keys(o) : [];\n\n            case 'string':\n                var keys = [];\n                for(var i = 0; i < o.length; i++) keys.push(i.toString());\n                return keys;\n\n            default:\n                return [];\n        }\n    }\n\n    var NULL_FUNCTION = function EMPTY_CALLBACK_REPLACEMENT () {};\n\n    var libs = {\n\n        /**\n         * String library functions\n         * @type {Object}\n         */\n        string: {\n\n            /**\n             * Camelizes all of the provided string arguments.\n             * @param {...String} string A list of strings to camelize.\n             * @return {Array<String>} An array of the provided arguments, with all strings camelized.\n             */\n            camelize: function camelize () {\n                var ret = [];\n                libs.object.every(arguments, function (s) {\n                    if(s) {\n                        if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                        s = s.toString().replace(/[^a-z0-9$]/gi, '_').replace(/\\$(\\w)/g, '$_$1').split(/[\\s_]+/g);\n                        libs.object.each(s, 1, s.length, function (i, k) {\n                            this[k] = libs.string.ucFirst(i);\n                        });\n                        s = libs.string.lcFirst(s.join(''));\n                    }\n                    ret.push(s);\n                });\n                return ret.length === 1 ? ret[0] : ret;\n            },\n\n            /**\n             * Decamelizes all of the provided string arguments.\n             * @param {...String} string A list of strings to decamelize.\n             * @return {Array<String>} An array of the provided arguments, with all strings decamelized.\n             */\n            decamelize: function decamelize () {\n                var ret = [];\n                libs.object.every(arguments, function (s) {\n                    if(s) {\n                        if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                        s = s.toString().replace(/([A-Z$])/g, function ($) {\n                            return ' ' + (typeof $ === 'string' ? $.toLowerCase() : '');\n                        });\n                    }\n                    ret.push(typeof s === 'string' ? s.trim() : s);\n                });\n                return ret.length === 1 ? ret[0] : ret;\n            },\n\n            /**\n             * Returns all the characters found in one string but not the other.\n             * @param {String} s The string to operate on.\n             * @param {String} other The string to compute the difference against.\n             * @return {String} A difference string.\n             */\n            differenceFromString: function differenceFromString (s, other) {\n                if(typeof other !== 'string' || typeof s !== 'string') return s;\n                var sarr = s.split(''), oarr = other.split('');\n                return libs.array.differenceFromArray(sarr, oarr).join('');\n            },\n\n            /**\n             * Replaces tokens (snippets of text wrapped in brackets) with their values.\n             * @param {String} s The string to operate on.\n             * @return {String} The token replaced values.\n             */\n            replaceTokens: function replaceTokens (s) {\n                return libs.generic.replaceStringTokens(s);\n            },\n\n            /**\n             * Returns only the characters common to both strings\n             * @param {String} s The string to operate on.\n             * @param {String} other The string to compute the intersection against.\n             * @return {String} The intersection between the two strings.\n             */\n            intersectString: function intersectString (s, other) {\n                if(typeof other !== 'string' || typeof s !== 'string') return s;\n                var sarr = s.split(''), oarr = other.split('');\n                return libs.intersectArray(sarr, oarr).join('');\n            },\n\n            /**\n             * Repeat a string 'times' times.\n             * @param {String} s The string to operate on.\n             * @param {Number} times The number of times to repeat the string\n             * @return {String} The repeated string.\n             */\n            repeat: function repeat (s, times) {\n                times = parseInt(times, 10);\n                times = isNaN(times) || !isFinite(times) || times <= 0 ? 1 : times;\n\n                var os = s;\n                for(var i = 1; i < times; i++) s += os;\n                return s;\n            },\n\n            /**\n             * Right trims a string. Same as String.trim, but only for the end of a string.\n             * @param {String} s The string to operate on.\n             * @param {String} [what='\\\\s+'] What to trim.\n             * @return {String} The right trimmed string\n             */\n            rtrim: function rtrim (s, what) {\n                what = typeof what === 'string' ? what : '\\\\s+';\n                return s.replace(new RegExp(what + '$'), '');\n            },\n\n            /**\n             * Left trims a string. Same as String.trim, but only for the beginning of a string.\n             * @param {String} s The string to operate on.\n             * @param {String} [what='\\\\s+'] What to trim.\n             * @return {String} The left trimmed string\n             */\n            ltrim: function ltrim (s, what) {\n                what = typeof what === 'string' ? what : '\\\\s+';\n                return s.replace(new RegExp('^' + what), '');\n            },\n\n            /**\n             * Escapes HTML special characters\n             * @param {String} s The string to operate on.\n             * @return {String} The HTML escaped string\n             */\n            htmlEncode: function htmlEncode (s) {\n                var map = {\n                    '&'  : '&amp;',\n                    '<'  : '&lt;',\n                    '>'  : '&gt;',\n                    '\"'  : '&quot;',\n                    '\\'' : '&#039;'\n                };\n                return s.replace(/[&<>\"']/g, function (m) { return map[m]; });\n            },\n\n            /**\n             * Un-escapes HTML special characters\n             * @param {String} s The string to operate on.\n             * @return {String} The HTML escaped string\n             */\n            htmlDecode: function htmlDecode (s) {\n                var map = {\n                    '&amp;'  : '&',\n                    '&lt;'   : '<',\n                    '&gt;'   : '>',\n                    '&quot;' : '\"',\n                    '&#039;' : '\\''\n                };\n                return s.replace(/(&amp;|&lt;|&gt;|&quot;|&#039;)/g, function (m) { return map[m]; });\n            },\n\n            /**\n             * Creates an 'eval' safe string, by adding slashes to \", ', \\t, \\n, \\f, \\r, and the NULL byte.\n             * @param {String} s The string to operate on.\n             * @return {String} A string with slashes\n             */\n            addSlashes: function addSlashes (s) {\n                return s.replace(/[\\\\\"'\\t\\n\\f\\r]/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\n            },\n\n            /**\n             * Returns a string with the first letter capitalized.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with the first letter upper cased.\n             * @function\n             */\n            ucFirst: function ucFirst (s) {\n                return s.charAt(0).toUpperCase() + s.slice(1);\n            },\n\n            /**\n             * Returns a string with the first letter lowercased.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with the first letter lower cased.\n             * @function\n             */\n            lcFirst: function lcFirst (s) {\n                return s.charAt(0).toLowerCase() + s.slice(1);\n            },\n\n            /**\n             * Returns a string in Title Case.\n             * @param {String} s The string to operate on.\n             * @return {String} The title cased string.\n             * @function\n             */\n            titleCase: function titleCase (s) {\n                var arr = [];\n                libs.object.each(s.split(' '), function (t) { arr.push(libs.string.ucFirst(t)); });\n                return arr.join(' ');\n            },\n\n            /**\n             * Splices a string, much like an array.\n             * @param {String} s The string to operate on.\n             * @param {Number} index The index to begin splicing the string at\n             * @param {Number} count The number of characters to delete\n             * @param {String} add The string to append at the spliced section\n             * @return {String} The spliced string.\n             * @function\n             */\n            splice: function splice (s, index, count, add) {\n                return s.slice(0, index) + (add || '') + s.slice(index + count);\n            },\n\n            /**\n             * Return a truncated string with ellipses.\n             * @param {String} s The string to operate on.\n             * @param {Number=} length The length of the desired string. If ommited, the strings original length will be used.\n             * @param {String=} [place='back'] Possible values are 'front' and 'back'. Specifying 'front' will truncate the\n             * string and add ellipses to the front, 'back' (or any other value) will add the ellipses to the back.\n             * @param {String=} [ellipses='...'] The string value of the ellipses. Use this to add anything other than '...'\n             * @returns {String} A truncated string with ellipses (if its length is greater than 'length')\n             * @function\n             */\n            ellipses: function ellipses_ (s, length, place, ellipses) {\n                if(isNaN(parseInt(length, 10))) length = s.length;\n                if(length < 0 || !isFinite(length)) length = 0;\n\n                ellipses = typeof ellipses === 'string' ? ellipses : '...';\n                if(s.length <= length) return s;\n\n                if(length <= ellipses.length) {\n                    return ellipses.substring(0, length);\n                }\n                else if(!place || place !== 'front') {\n                    return s.substr(0, length - ellipses.length) + ellipses;\n                }\n                else {\n                    return ellipses + s.substr(0, length - ellipses.length);\n                }\n            },\n\n            /**\n             * Shuffles a string\n             * @param {String} s The string to operate on.\n             * @param {String} splitter A string used to split the string, to tokenize it before shuffling.\n             * @return {String} The mixed up string.\n             */\n            shuffle: function shuffle (s, splitter) {\n                var a = s.split(typeof splitter === 'string' ? splitter : ''), n = a.length,\n                replaceSplits = n - 1;\n\n                for(var i = n - 1; i > 0; i--) {\n                    var j = Math.floor(Math.random() * (i + 1)),\n                        tmp = a[i];\n\n                    a[i] = a[j];\n                    a[j] = tmp;\n                }\n\n                for(var k = 0; k < replaceSplits; k++) a.splice(libs.number.randomIntInRange(0, a.length), 0, splitter);\n                return a.join('');\n            },\n\n            /**\n             * Reverses a string.\n             * @param {String} s The string to operate on.\n             * @return {String} The reversed string.\n             */\n            reverse: function reverse (s) {\n                if(s.length < 64) {\n                    var str = '';\n                    for(var i = s.length; i >= 0; i--) str += s.charAt(i);\n                    return str;\n                }\n                else {\n                    return s.split('').reverse().join('');\n                }\n            },\n\n            /**\n             * Strips the trailing slashes from a string.\n             * @param {String} s The string to operate on.\n             * If using Node.js, it will replace the trailing slash based on the value of os.platform\n             * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n             * @returns {String} The string without a trailing slash.\n             * @function\n             */\n            withoutTrailingSlash: function withoutTrailingSlash (s) {\n                if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return s.replace(/\\\\+$/, '');\n                return s.replace(/\\/+$/, '');\n            },\n\n            /**\n             * Add a trailing slash to a string, if it doesn't already have one.\n             * If using Node.js, it will replace the trailing slash based on the value of os.platform\n             * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n             * @param {String} s The string to operate on.\n             * @returns {String} The string without a trailing slash.\n             * @function\n             */\n            withTrailingSlash: function withTrailingSlash (s) {\n                if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return libs.string.withoutTrailingSlash(s) + '\\\\';\n                return libs.string.withoutTrailingSlash(s) + '/';\n            },\n\n            /**\n             * Escapes regular expression special characters. This is useful is you wish to create a new regular expression\n             * from a stored string value.\n             * @param {String} s The string to operate on.\n             * @returns {String} The regular expression safe string\n             * @function\n             */\n            regexpSafe: function regexpSafe (s) {\n                return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            },\n\n            /**\n             * Pads a string with 'delim' characters to the specified length. If the length is less than the string length,\n             * the string will be truncated.\n             * @param {String} s The string to operate on.\n             * @param {Number} length The length to pad the string to. If less that the length of the string, the string will\n             * be returned. If less than the length of the string, the string will be sliced.\n             * @param {String=} [delim=' '] The character to pad the string with.\n             * @param {Boolean=} [pre=false] If true, the padding will be added to the beginning of the string, otherwise the padding\n             * will be added to the end.\n             * @returns {String} The padded string\n             * @function\n             */\n            pad: function pad (s, length, delim, pre) {\n                var i, thisLength = s.length;\n\n                if(!delim) delim = ' ';\n                if(length === 0) return ''; else if(isNaN(parseInt(length, 10))) return s;\n\n                length = parseInt(length, 10);\n                if(length < thisLength) return !pre ? s.slice(0, length) : s.slice(-length);\n\n                if(pre) {\n                    for(i = 0; i < length - thisLength; i++) s = delim + s;\n                }\n                else {\n                    for(i = 0; i < length - thisLength; i++) s += delim;\n                }\n                return s;\n            },\n\n            /**\n             * Replaces newlines with br tags.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with newlines converted to br tags.\n             */\n            newlineToBreak: function newlineToBreak (s) {\n                return s.replace(/(\\r\\n|\\n)/g, '<br>');\n            },\n\n            /**\n             * Replaces tabs with a span element with the class 'tab'\n             * @param {String} s The string to operate on.\n             * @return {String} The string with tabs converted to spans with the class 'tab'\n             */\n            tabsToSpan: function tabsToSpan (s) {\n                return s.replace(/\\t/g, '<span class=\"tab\"></span>');\n            },\n\n            /**\n             * Adjusts a string to fit within the confines of 'width', without breaking words.\n             * @param {String} s The string to operate on.\n             * @param {Number=} [length=120] The length to word wrap the string to.\n             * @param {Number=} [padleft=0] The number of columns to pad the string on the left\n             * @param {Number=} [padright=0] The number of columns to pad the string on the right\n             * @param {Boolean=} omitFirst If true, the first line will not be padded left\n             * @return {String} The string adjusted and padded for the stdout.\n             * @function\n             */\n            wordWrapToLength: function wordWrapToLength (s, width, padleft, padright, omitFirst) {\n                if(padright === undefined && padleft) padright = padleft;\n\n                padleft  = !isNaN(parseInt(padleft,  10)) ? parseInt(padleft, 10)  : 0;\n                padright = !isNaN(parseInt(padright, 10)) ? parseInt(padright, 10) : 0;\n\n                var paddingLeft = '';\n                for(var n = 0; n < padleft;  n++) paddingLeft  += ' ';\n\n                var cols   = !isNaN(parseInt(width, 10)) ? length : 120,\n                    arr    = s.split(' '),\n                    item   = null,\n                    len    = !omitFirst ? cols - padright - padleft : cols - padright,\n                    str    = !omitFirst ? paddingLeft : '',\n                    olen   = cols - padright - padleft;\n\n                while((item = arr.shift()) !== undefined) {\n                    if(item.length < len) {\n                        str += item + ' ';\n                        len -= item.length + 1;\n                    }\n                    else if(item.length > olen) {\n                        str += item.substring(0, len - 1) + '-\\n' + paddingLeft;\n                        arr.unshift(item.substring(len, item.length - 1));\n                        len = cols - padright - padleft;\n                    }\n                    else {\n                        str += '\\n' + paddingLeft + item + ' ';\n                        len = cols - padright - 1 - padleft - item.length;\n                    }\n                }\n                return str;\n            }\n        },\n\n        /**\n         * Date library functions\n         * @type {Object}\n         */\n        date: {\n            /**\n             * Moves a date forward 'daysInTheFuture' days.\n             * @param {Date} The date object to operate on.\n             * @param {Number} daysInTheFuture The number of days in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified days.\n             * @function\n             */\n            advanceDays: function advanceDays (d, daysInTheFuture, adjustForWeekend) {\n                daysInTheFuture = daysInTheFuture && libs.generic.isNumeric(daysInTheFuture) ? daysInTheFuture : 1;\n                d.setTime(d.getTime() + (daysInTheFuture * 86400000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Moves a date forward 'monthsInTheFuture' months.\n             * @param {Date} The date object to operate on.\n             * @param {Number} monthsInTheFuture The number of months in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified months.\n             * @function\n             */\n            advanceMonths: function advanceMonths (d, monthsInTheFuture, adjustForWeekend) {\n                monthsInTheFuture = monthsInTheFuture && libs.generic.isNumeric(monthsInTheFuture) ? monthsInTheFuture : 1;\n                d.setTime(d.getTime() + (monthsInTheFuture * 2629746000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Moves a date forward 'yearsInTheFuture' years.\n             * @param {Date} The date object to operate on.\n             * @param {Number} yearsInTheFuture The number of years in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified years.\n             * @function\n             */\n            advanceYears: function advanceYears (d, yearsInTheFuture, adjustForWeekend) {\n                yearsInTheFuture = yearsInTheFuture && libs.generic.isNumeric(yearsInTheFuture) ? yearsInTheFuture : 1;\n                d.setTime(d.getTime() + (yearsInTheFuture * 31536000000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Returns the date in the yyyy-mm-dd format.\n             * @param {Date} The date object to operate on.\n             * @param {String} [delim='-'] The delimiter to used the separate the date components (e.g. '-' or '.')\n             * @returns {String} The date in the yyyy-mm-dd format.\n             * @function\n             */\n            yyyymmdd: function yyyymmdd (d, delim) {\n                delim = typeof delim !== 'string' ? '-' : delim ;\n\n                var dd   = d.getDate(),\n                    mm   = d.getMonth() + 1,\n                    yyyy = d.getFullYear();\n\n                if(dd < 10) dd = '0' + dd;\n                if(mm < 10) mm = '0' + mm;\n                return yyyy + delim + mm + delim + dd;\n            },\n\n            /**\n             * Converts a date to the HH:MM:SS.MSEC time format\n             * @param {Date} The date object to operate on.\n             * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n             * @returns {String} The formatted number, now a string.\n             * @function\n             */\n            clockTime: function clockTime (d, omitMS) {\n                return libs.number.clockTime(d.getTime(), !!omitMS);\n            }\n        },\n\n        /**\n         * Number library functions\n         * @type {Object}\n         */\n        number: {\n\n            /**\n             * Returns a random integer in range [min, max] (inclusive)\n             * @param {Number} min The minimum possible value (inclusive)\n             * @param {Number} max The maximum possible value (inclusive)\n             * @return {Number} A random number between min and max\n             */\n            randomIntInRange: function (min, max) {\n                min = parseInt(min, 10);\n                max = parseInt(max, 10);\n\n                if(isNaN(min) && !isFinite(min)) min = 0;\n                if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                return Math.floor(Math.random() * (max - min + 1)) + min;\n            },\n\n            /**\n             * Returns a random float in range [min, max] (inclusive)\n             * @param {Number} min The minimum possible value (inclusive)\n             * @param {Number} max The maximum possible value (inclusive)\n             * @return {Number} A random number between min and max\n             */\n            randomNumberInRange: function (min, max) {\n                min = parseInt(min, 10);\n                max = parseInt(max, 10);\n\n                if(isNaN(min) && !isFinite(min)) min = 0;\n                if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                return Math.random() * (max - min + 1) + min;\n            },\n\n            /**\n             * Recursively computes the factorial of the number n.\n             * @param {Number} n A number.\n             * @return {Number|Infinity} n!\n             */\n            factorial: function factorial (n) {\n                if(typeof n !== 'number' || n < 0) return NaN;\n                if(n > 170) return Infinity;\n                if(n === 0 || n === 1) return 1;\n                return n * factorial(n - 1);\n            },\n\n            /**\n             * Determines is the given numbers are integers\n             * @param {...Number} n Numbers.\n             * @return {Boolean} True if all arguments are integers, false otherwise.\n             */\n            isInt: function isInt () {\n                return libs.object.every(arguments, function (n) {\n                    return typeof n === 'number' && n % 1 === 0 && n.toString().indexOf('.') === -1;\n                });\n            },\n\n            /**\n             * Recursively computes n choose k.\n             * @param {Number} n A number.\n             * @param {Number} k A number.\n             * @return {Number|Infinity} n choose k.\n             */\n            choose: function choose (n, k) {\n                if(typeof n !== 'number' || typeof k !== 'number') return NaN;\n                if(k === 0) return 1;\n                return (n * choose(n - 1, k - 1)) / k;\n            },\n\n            /**\n             * Pads a number with preceeding zeros.\n             * @param {Number} n The number object to operate on.\n             * @param {Number} length The final length of the string\n             * @returns {String} The padded number, now a string.\n             * @function\n             */\n            pad: function pad (n, length) {\n                return libs.string.pad(n.toString(), length, '0', true);\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            daysFrom: function daysFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setDate(date.getDate() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            daysFromNow: function daysFromNow (n) {\n                return libs.number.daysFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            secondsFrom: function secondsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setSeconds(date.getSeconds() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            secondsFromNow: function secondsFromNow (n) {\n                return libs.number.secondsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of years.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            yearsFrom: function yearsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setFullYear(date.getFullYear() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of years.\n             * @return {Date} A date object\n             */\n            yearsFromNow: function yearsFromNow (n) {\n                return libs.number.yearsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of months.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            monthsFrom: function monthsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setMonth(date.getMonth() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of months.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            monthsFromNow: function monthsFromNow (n) {\n                return libs.number.monthsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of hours.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            hoursFrom: function hoursFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setHours(date.getHours() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of hours.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            hoursFromNow: function hoursFromNow (n) {\n                return libs.number.hoursFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of minutes.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} A modified date.\n             */\n            minutesFrom: function minutesFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setMinutes(date.getMinutes() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of minutes.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} The date object\n             */\n            minutesFromNow: function minutesFromNow (n) {\n                return libs.number.minutesFrom(n, new Date());\n            },\n\n            /**\n             * The time, months in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            monthsAgo: function monthsAgo (n) {\n                return libs.number.minutesFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, days in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            daysAgo: function daysAgo (n) {\n                return libs.number.daysFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, seconds in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            secondsAgo: function secondsAgo (n) {\n                return libs.number.secondsFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, minutes in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            minutesAgo: function minutesAgo (n) {\n                return libs.number.minutesFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, years in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            yearsAgo: function yearsAgo (n) {\n                return libs.number.yearsFromNow(-n, new Date());\n            },\n\n            /**\n             * Converts a number to the HH:MM:SS.MSEC time format\n             * @param {Number} t The number object to operate on.\n             * @memberof Number.prototype\n             * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n             * @returns {String} The formatted number, now a string.\n             * @function\n             */\n            clockTime: function clockTime (t, omitMS) {\n                var ms, secs, mins, hrs;\n\n                ms = t % 1000;\n                t = (t - ms) / 1000;\n\n                secs = t % 60;\n                t = (t - secs) / 60;\n\n                mins = t % 60;\n                hrs = (t - mins) / 60;\n\n                return libs.number.pad(hrs.toString(), 2)  + ':' + libs.number.pad(mins.toString(), 2) + ':' +\n                       libs.number.pad(secs.toString(), 2) + ((omitMS === true) ? '' : '.' + libs.number.pad(ms.toString(), 3));\n            }\n        },\n\n        /**\n         * Function library functions\n         * @type {Object}\n         */\n        function: {\n\n            /**\n             * Inherit the prototype methods from one constructor into another.\n             * @param {Function} constructor The inheriting constructor\n             * @param {Function} superConstructor The parent constructor\n             * @return {Function} The inheriting constructor\n             */\n            inherits: function inherits (constructor, superConstructor) {\n                if (constructor === undefined || constructor === null)\n                throw new TypeError('The constructor to \"inherits\" must not be ' + 'null or undefined');\n\n                if (superConstructor === undefined || superConstructor === null)\n                throw new TypeError('The super constructor to \"inherits\" must not ' + 'be null or undefined');\n\n                if (superConstructor.prototype === undefined)\n                throw new TypeError('The super constructor to \"inherits\" must ' + 'have a prototype');\n\n                constructor.super_ = superConstructor;\n                Object.setPrototypeOf(constructor.prototype, superConstructor.prototype);\n                return constructor;\n            },\n        },\n\n        /**\n         * Array library functions\n         * @type {Object}\n         */\n        array: {\n\n            /**\n             * Shuffles an array\n             * @param {Array} a The Array object to operate on.\n             * @return {Array<*>} The mixed up array\n             */\n            shuffle: function shuffle (a) {\n                for(var i = a.length - 1; i > 0; i--) {\n                    var j = Math.floor(Math.random() * (i + 1)), tmp = a[i];\n                    a[i] = a[j];\n                    a[j] = tmp;\n                }\n                return a;\n            },\n\n            /**\n             * Computes the union between the current array, and all the array objects passed in. That is,\n             * the set of unique objects present in all of the arrays.\n             * @param {Array} a The Array object to operate on.\n             * @param {...Array} arr A list of array objects\n             * @return {Array<*>} The union set of the provided arrays.\n             */\n            union: function union (a) {\n                var args = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                var union = [];\n                args.unshift(a);\n                libs.object.each(args, function (array) {\n                    libs.object.each(array, function (item) {\n                        if(union.indexOf(item) === -1) union.push(item);\n                    });\n                });\n                return union;\n            },\n\n            /**\n             * Returns all the items unique to all arrays.\n             * @param {...Array} arrays The Array objects to operate on.\n             * @param {Array} other The array to compute the difference from.\n             * @return {Array} A new array with items unique to each array.\n             */\n            difference: function difference () {\n                var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                if(arrays.length === 0) return [];\n                if(arrays.length === 1) return libs.object.copy(arrays[0]);\n                var i, simpleDiff = [];\n\n                if(arrays.length === 2) {\n                    for(i = 0; i < arrays[0].length; i++)\n                        if(arrays[1].indexOf(arrays[0][i]) === -1) simpleDiff.push(arrays[0][i]);\n\n                    for(i = 0; i < arrays[1].length; i++)\n                        if(arrays[0].indexOf(arrays[1][i]) === -1) simpleDiff.push(arrays[1][i]);\n\n                    return simpleDiff;\n                }\n\n                var difference = arrays[0], intermediate = [];\n                for(i = 1; i < arrays.length; i++) {\n                    for(var n = 0; n < difference.length; n++) {\n                        if(arrays[i].indexOf(difference[n]) === -1) {\n                            intermediate.push(difference[n]);\n                        }\n                    }\n                    for(var k = 0; k < arrays.length; k++) {\n                        //if(arrays[i] !== arrays)\n                    }\n                    difference = intermediate;\n                    intermediate = [];\n                }\n\n                return difference;\n            },\n\n            /**\n             * Returns the items common to all arrays.\n             * @param {...Array} items The arrays from which to compute the intersection.\n             * @return {Array} A new array with items common to both arrays.\n             */\n            intersect: function intersect () {\n                var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                if(arrays.length === 0) return [];\n                if(arrays.length === 1) return libs.object.copy(arrays[0]);\n\n                var intersection = arrays[0], intermediate = [];\n                for(var i = 1; i < arrays.length; i++) {\n                    for(var n = 0; n < intersection.length; n++) {\n                        if(arrays[i].indexOf(intersection[n]) > -1) {\n                            intermediate.push(intersection[n]);\n                            var idx = arrays[i].indexOf(intersection[n]);\n                            arrays[i].splice(idx, 1);\n                        }\n                    }\n                    intersection = intermediate;\n                    intermediate = [];\n                }\n\n                return intersection;\n            },\n\n            /**\n             * Creates a new array from the current one, with all occurences of the provided arguments ommited.<br>\n             * For example: <em>[1,2,3,4,5].without(1)</em> will return <em>[2,3,4,5]</em>\n             * and <em>[1, null, 2, null, undefined].without(null, undefined)</em> will return <em>[1, 2]</em>\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array<*>} A shallow copy of the array with the provided arguments ommited.\n             * @function\n             */\n            without: function without () {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift(),\n                    res  = [];\n\n                libs.object.each(a, function (v) { if(args.indexOf(v) === -1) res.push(v); });\n                return res;\n            },\n\n            /**\n             * Rotates the array left or right the specified number of times. If the direction is left, it will shift off the\n             * first <em>n</em> elements and push them to the end of the array. If right, it will pop off the last <em>n</em>\n             * items and unshift them onto the front of the array.\n             * @param {Array} a The Array object to operate on.\n             * @param {String=} [direction='left'] The direction to rotate array members.\n             * @param {Number=} [amount=1] The number of elements to shift\n             * @return {Array<*>} The current array, shifted.\n             * @function\n             */\n            rotate: function rotate (a, direction, amount) {\n                if(direction && libs.object.isNumeric(direction) && !amount) {\n                    amount    = direction;\n                    direction = undefined;\n                }\n\n                if(!amount || (amount && !libs.object.isNumeric(amount))) amount = 1;\n                for(var i = 0; i < amount; i++) {\n                    if(direction !== 'right') a.push(a.shift()); else a.unshift(a.pop());\n                }\n                return a;\n            },\n\n            /**\n             * Rotates the array left the specified number of times.\n             * This is useful if trying to create a circular queue.\n             * @param {Array} a The Array object to operate on.\n             * @param {Number=} [amount=1] The number of times to rotate the array left.\n             * @return {Array<*>} The current array, rotated left.\n             * @function\n             */\n            rotateLeft: function rotateLeft (a, amount) {\n                return libs.array.rotate(a, 'left', amount);\n            },\n\n            /**\n             * Rotates the array right the specified number of times.\n             * This is useful if trying to create a circular queue.\n             * @param {Array} a The Array object to operate on.\n             * @param {Number=} [amount=1] The number of times to rotate the array left.\n             * @return {Array<*>} The current array, rotated right.\n             * @function\n             */\n            rotateRight: function rotateLeft (a, amount) {\n                return libs.array.rotate(a, 'right', amount);\n            },\n\n            /**\n             * Removes duplicates from the current array.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array<*>} The current array, with duplicates removed.\n             * @function\n             */\n            makeUnique: function makeUnique (a) {\n                var visited = [];\n                for(var i = 0; i < a.length; i++) {\n                    if(visited.indexOf(a[i]) === -1) {\n                        visited.push(a[i]);\n                    }\n                    else {\n                        a.splice(i, 1);\n                        i--; // Splice will affect the internal array pointer, so fix it...\n                    }\n                }\n                return a;\n            },\n\n            /**\n             * Gets an array of unique items from the current array.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} A new array with no duplicate values.\n             * @function\n             */\n            unique: function unique (a) {\n                var visited = [],\n                    unique  = [];\n\n                libs.object.each(a, function (item) {\n                    if(visited.indexOf(item) === -1) {\n                        unique.push(item);\n                        visited.push(item);\n                    }\n                });\n                return unique;\n            },\n\n            /**\n             * Sorts the array in ascending order.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} The array sorted in ascending order.\n             * @function\n             */\n            ascending: function ascending (a) {\n                return a.sort(function (a, b) {\n                    if(a !== undefined && a !== null) a = a.toString();\n                    if(b !== undefined && b !== null) b = b.toString();\n                    return a < b ? -1 : a > b ? 1 : 0;\n                });\n            },\n\n            /**\n             * Sorts the array in descending order.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} The array sorted in descending order.\n             * @function\n             */\n            descending: function descending (a) {\n                return a.sort(function (a, b) {\n                    if(a !== undefined && a !== null) a = a.toString();\n                    if(b !== undefined && b !== null) b = b.toString();\n                    return a > b ? -1 : a < b ? 1 : 0;\n                });\n            }\n        },\n\n        /**\n         * Array library functions\n         * @type {Object}\n         */\n        object: {\n\n            /**\n             * Computes the frequencies for each item in all of arguments.\n             * @param {...*} objs The objects to compute the histogram from.\n             * @return {Object<Number>} An object that has the items from all of the arguments as its keys and their frequencies as it's values.\n             */\n            histogram: function histogram () {\n                var histogram = {};\n                libs.object.every(arguments, function (o) {\n                    if(typeof o === 'boolean') {\n                        if(!histogram[o]) histogram[o] = 1; else histogram[o]++;\n                    }\n                    else if(typeof o === 'function') {\n                        if(!histogram['function']) histogram['function'] = 1; else histogram[o]++;\n                    }\n                    else {\n                        libs.object.every(o, function (val) {\n                            switch(true) {\n                                case typeof val === 'function':\n                                case typeof val === 'undefined':\n                                    val = typeof val;\n                                    break;\n                                case typeof val === 'object' && val === null:\n                                    val = 'null';\n                                    break;\n                                case typeof val === 'object' && val instanceof Array:\n                                    val = 'array';\n                                    break;\n                                case typeof val === 'object':\n                                    val = 'object';\n                                    break;\n                                default:\n                                    val = val.toString();\n                            }\n\n                            if(typeof histogram[val] !== 'number') histogram[val] = 0;\n                            histogram[val]++;\n                        });\n                    }\n                });\n                return histogram;\n            },\n\n            /**\n             * Creates a shallow copy of 'item'.\n             * @param {*} item The item to shallow \"copy\".\n             * @return {*} A shallow copy of the item.\n             */\n            copy: function copy (item) {\n                var copy;\n                if(!item) return item;\n\n                switch (typeof item) {\n                    case 'string':\n                    case 'number':\n                    case 'function':\n                    case 'boolean':\n                        return item;\n\n                    default:\n                        if(item instanceof Array) {\n                            copy = [];\n                        }\n                        else {\n                            copy = {};\n                        }\n                }\n\n                libs.object.every(item, function (o, k) { copy[k] = o; });\n                return copy;\n            },\n\n            /**\n             * Returns the number of occurences of \"what\"\n             * @param {*} obj The item to count the occurences of \"what\" in.\n             * @param {*} what The item to count the occurences of the item in the array.\n             * @return {[type]} [description]\n             */\n            occurrencesOf: function occurrencesOf (obj, what) {\n                if(arguments.length < 2) return 0;\n\n                if(typeof obj === 'boolean') {\n                    return 0;\n                }\n                if(typeof obj === 'number') {\n                    return occurrencesOf(obj.toString(), what);\n                }\n                else if(typeof obj === 'function') {\n                    return occurrencesOf(fixFirefoxFunctionString(obj.toString()), what);\n                }\n\n                var count = 0;\n                if(typeof obj === 'string') {\n                    if(typeof what === 'string' || typeof what === 'number') {\n                        var regexp = new RegExp(what.toString(), 'g'), m;\n                        while(m = regexp.exec(obj)) count++;\n                    }\n                }\n                else if(typeof obj !== 'string') {\n                    libs.object.every(obj, function (item) {\n                        if(item === what) count++;\n                    });\n                }\n                return count;\n            },\n\n            /**\n             * Returns the object's keys.\n             * @param {Object} o The object to operate on.\n             * @returns {Array<String|Number>} The object's key set\n             * @function\n             */\n            keys : function keys (o) {\n                if(o === undefined || o == null) return [];\n\n                var keys = getKeys(o), idx;\n                if(libs.object.isArguments(o)) {\n                    idx = keys.indexOf('length');\n                    if(idx > -1) keys.splice(idx, 1);\n                }\n                return keys;\n            },\n\n            /**\n             * Returns the 'size' or 'length' of an object.\n             * <ul>\n             *      <li> String   -> The string's length  </li>\n             *      <li> Number   -> The number of digits </li>\n             *      <li> Object   -> The number of keys   </li>\n             *      <li> Array    -> The number of items  </li>\n             *      <li> Function -> 1                    </li>\n             * </ul>\n             * @param {Object} o The object to operate on.\n             * @returns {Number} The number of items within the object.\n             * @function\n             */\n            size: function size (o) {\n                switch(true) {\n                    case typeof o === 'function':\n                        return 1;\n\n                    case typeof o === 'number':\n                        return o.toString().length;\n\n                    case o instanceof Array:\n                    case typeof o === 'string':\n                        return o.length;\n\n                    case libs.object.isArguments(o) && typeof o.length !== 'undefined':\n                        return o.length - 1;\n\n                    case o && typeof o === 'object':\n                        return Object.keys(o).length;\n\n                    default:\n                        return 0;\n                }\n            },\n\n            /**\n             * Determines if an object can be converted to a number.\n             * @param {...Object} o The object to operate on.\n             * @returns {Boolean} True if the object is numeric, false otherwise.\n             * @function\n             */\n            isNumeric: function isNumeric () {\n                return libs.object.every(arguments, function (item) {\n                    return !isNaN(parseFloat(item)) && isFinite(item);\n                });\n            },\n\n            /**\n             * Converts an object to a number.\n             * @param {...Object} o The object to operate on.\n             * @returns {Number} The object as a number.\n             * @function\n             */\n            getNumeric: function getNumeric () {\n                var res = [], len = arguments.length;\n                libs.object.every(arguments, function (item) {\n                    res.push(!isNaN(parseFloat(item)) && isFinite(item));\n                });\n                return len === 1 ? res[0] : res;\n            },\n\n            /**\n             * Determines if an object has no keys, if an array has no items, or if a string === ''.\n             * @param {...Object} o The object to operate on.\n             * @returns {Boolean} True if the object is 'empty', false otherwise.\n             * @function\n             */\n            isEmpty: function isEmpty () {\n                return libs.object.every(arguments, function (item) {\n                    return libs.object.size(item) === 0 && item !== false && item !== '' && item !== true;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all arrays, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is an array, false otherwise.\n             */\n            isArray: function isArray () {\n                return libs.object.every(arguments, function (item) {\n                    return item instanceof Array;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all objects and not arrays, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is an object and not an array, false otherwise.\n             */\n            isPureObject: function isPureObject () {\n                return libs.object.every(arguments, function (item) {\n                    return !(item instanceof Array) && typeof item === 'object';\n                });\n            },\n\n            /**\n             * True if the objects passed in are all strings, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a string, false otherwise.\n             */\n            isString: function isString () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'string';\n                });\n            },\n\n            /**\n             * True if the objects passed in are all booleans, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a boolean, false otherwise.\n             */\n            isBoolean: function isBoolean () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'boolean';\n                });\n            },\n\n            /**\n             * True if the objects passed in are allfunction, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isFunction: function isFunction () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'function';\n                });\n            },\n\n            /**\n             * True if the objects passed in are allll, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isNull: function isNull () {\n                return libs.object.every(arguments, function (item) {\n                    return item === null;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all undefined, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isUndefined: function isUndefined () {\n                return libs.object.every(arguments, function (item) {\n                    return item === undefined;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all arguments objects, false otherwise.\n             * @param {Object} o The object to operate on.\n             * @return {Boolean} True if the object is an arguments object, false otherwise\n             */\n            isArguments: function isArguments () {\n                return libs.object.every(arguments, function (item) {\n                    return Object.prototype.toString.call(item) === '[object Arguments]';\n                });\n            },\n\n            /**\n             * Convers an object to a number, if possible.\n             * @param {...Object} o The object to operate on.\n             * @returns {Number} The object as a float or NaN.\n             * @function\n             */\n            toNumber: function toNumber () {\n                var vals = [];\n                libs.object.every(arguments, function (o) {\n                    vals.push(libs.object.isNumeric(o) ? parseFloat(o) : NaN);\n                });\n                return vals.length === 1 ? vals[0] : vals;\n            },\n\n            /**\n             * Convers an object to an integer, if possible.\n             * @param {Object} o The object to operate on.\n             * @returns {Number} The object as an integer or NaN.\n             * @function\n             */\n            toInt: function toInt () {\n                var vals = [];\n                libs.object.every(arguments, function (o) {\n                    var radix = /^0x/.test(o) ? 16 : 10; // Check for hex string\n                    vals.push(libs.object.isNumeric(o) ? parseInt(o, radix) : NaN);\n                });\n                return vals.length === 1 ? vals[0] : vals;\n            },\n\n            /**\n             * Returns a random array item, random object property, random character in a string, or random digit in a number.\n             * @param {Object} o The object to operate on.\n             * @returns {*}\n             * @function\n             */\n            random: function random (o) {\n                if(typeof o === 'object') {\n                    return o instanceof Array ?\n                        o[Math.floor(Math.random() * o.length)] :\n                        o[Object.keys(o)[Math.floor(Math.random() * Object.keys(o).length)]];\n                }\n                else if(typeof o === 'string' || typeof o === 'number') {\n                    var val = o, negative = false;\n\n                    if(o.length === 0) return '';\n                    if(typeof o === 'number' && o < 0) {\n                        negative = true;\n                        val = Math.abs(val);\n                    }\n\n                    val = val.toString()[Math.floor(Math.random() * val.toString().length)];\n                    if(typeof o === 'number') val = parseInt(val, 10);\n                    return negative ? -val : val;\n                }\n                return o;\n            },\n\n            /**\n             * Invokes the callback 'f' for each property the object contains. If this is called\n             * on a number or function, the object will be cast to a string.<br><br>\n             * The callback `f` will be invoked with the following arguments:\n             * <ul>\n             * \t<li>value     - The value of the current object being iterated over</li>\n             * \t<li>key       - The key of the current object (if an object, the index if an array)</li>\n             * \t<li>iteration - The current iteration (same as key if a string or array)</li>\n             * \t<li>exit      - A function which will break the loop and return the values passed to it,\n             * \t\t\t\t\tor a single value if only a single value is passed.</li>\n             * </ul>\n             * @function\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [rangeA=0] The iteration start index\n             * @param {Number=} [rangeB='length of the item'] The iteration end index\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {*} The value passed to the exit parameter of the callback...\n             */\n            each: function each (o, rangeA, rangeB, f) {\n\n                // Can't use last here.. would cause circular ref...\n                f = undefined;\n                for(var k = arguments.length - 1; k >= 0; k--) {\n                    if(arguments[k] instanceof Function) {\n                        f = arguments[k];\n                        break;\n                    }\n                }\n\n                var ret    = null,\n                    broken = false,\n                    self   = o,\n                    keys, property, value,\n\n                    exit = function () {\n                        broken   = true;\n                        ret      = arguments.length > 1 ? libs.object.toArray(arguments) : arguments[0];\n                    };\n\n                if(f instanceof Function) {\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = getKeys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    rangeA = parseInt(rangeA);\n                    rangeA = (isNaN(rangeA) || !isFinite(rangeA)) ? 0 : rangeA;\n\n                    rangeB = parseInt(rangeB);\n                    rangeB = (isNaN(rangeB) || !isFinite(rangeB)) ? keys.length : rangeB;\n\n                    var i = 0, n;\n                    if(Math.abs(rangeA) > Math.abs(rangeB)) {\n                        if(rangeB < 0) rangeB = 0;\n                        if(rangeA < 0) rangeA = 0;\n                        if(rangeA > keys.length - 1) rangeA = keys.length - 1;\n\n                        for(n = rangeA; n >= rangeB; n--) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            f.call(o, value, property, n, exit, i++, o);\n                            if(broken) break;\n                        }\n                    }\n                    else {\n                        rangeB = rangeB + 1 > keys.length ? keys.length : rangeB + 1;\n                        if(rangeB < 0) rangeB = 0;\n                        if(rangeA < 0) rangeA = 0;\n\n                        for(n = rangeA; n < rangeB; n++) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            f.call(o, value, property, n, exit, i++, o);\n                            if(broken) break;\n                        }\n                    }\n                }\n                return ret;\n            },\n\n            /**\n             * Invokes the callback 'f' for every property the object contains. If the callback returns false, the\n             * loop is broken and false is returned; otherwise true is returned.\n             * @param {Object} o The object to operate on.\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {Boolean} True if none of the callback invocations returned false.\n             * @function\n             */\n            every: function every (o, f) {\n                f = f instanceof Function ? f : undefined;\n\n                if(f instanceof Function) {\n                    var self = o, keys, property, value;\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari...\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = getKeys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    var i = 0;\n                    for(var n = 0; n < keys.length; n++) {\n                        property = keys[n];\n                        value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                        if(f.call(o, value, property, n, i++, o) === false) return false;\n                    }\n                }\n                return true;\n            },\n\n            /**\n             * Invokes the callback 'f' for every property the object contains. If the callback returns true, the\n             * loop is broken and false is returned; otherwise true is returned.\n             * @param {Object} o The object to operate on.\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {Boolean} True if none of the callback invocations returned false.\n             * @function\n             */\n            any: function any (o, f) {\n                f = f instanceof Function ? f : undefined;\n\n                if(f instanceof Function) {\n                    var self = o, keys, property, value;\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari...\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = getKeys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    var i = 0;\n                    for(var n = 0; n < keys.length; n++) {\n                        property = keys[n];\n                        value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                        var ret = f.call(o, value, property, n, i++, o);\n                        if(ret !== undefined) return ret;\n                    }\n                }\n                return undefined;\n            },\n\n            /**\n             * Converts an object to an array. For strings, numbers, and functions this will\n             * return a char array to their respective .toString() values\n             * @param {Object} o The object to operate on.\n             * @function\n             * @return {Array<*>} The object, converted to an array.\n             */\n            toArray: function toArray (o) {\n                if(o instanceof Array) return libs.object.copy(o);\n                var arr = [];\n                libs.object.each(o, function (val) { arr.push(val); });\n                return arr;\n            },\n\n            /**\n             * Returns the first n elements of an object. If the object is an array, and only one items is retrieved,\n             * that item will be returned, rather than an array.\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [n=1] The number of elements to return\n             * @return {Array<*>} The first n elements of the array.\n             */\n            first: function first (o, n) {\n                n = parseInt(n, 10);\n                n = isNaN(n) || !isFinite(n) ? 1 : n;\n                var v = null;\n\n                if(typeof o === 'boolean') {\n                    return o;\n                }\n                else if(typeof o !== 'object') {\n                    if(n !== 0) v = o.toString().slice(0, n); else return null;\n                }\n                else if(o instanceof Array) {\n                    if(n === 1) return o[0];\n                    return n !== 0 ? o.slice(0, n) : [];\n                }\n                else {\n                    v = {};\n                    libs.object.each(o, 0, n - 1, function (item, key) { v[key] = item; });\n                    var keys = getKeys(v);\n                    return keys.length === 1 ? v[keys[0]] : v;\n                }\n                return v.length === 1 ? v[0] : v;\n            },\n\n            /**\n             * Returns the last n elements of an object. If the object is an array, and only one items is retrieved,\n             * that item will be returned rather than an array.\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [n=1] The number of elements to return\n             * @return {Array<*>} The last n elements of the array.\n             * @function\n             */\n            last: function last (o, n) {\n                if(typeof o === 'boolean') return o;\n\n                n = parseInt(n, 10);\n                n = isNaN(n) || !isFinite(n) ? 1 : n;\n                var v = null, keys, len = libs.object.size(o), idx;\n\n                if(typeof o === 'boolean') {\n                    return o;\n                }\n                else if(libs.object.isArguments(o)) {\n                    keys = getKeys(o);\n                    idx  = keys.indexOf('length');\n\n                    if(idx > -1) keys.splice(idx, 1);\n                    v = []; len = keys.length;\n                    // Arguments object should ignore undefined members...\n                    libs.object.each(keys, 0, len, function (k) { if(o[k] !== undefined) v.unshift(o[k]); });\n                    v = v.slice(0, n);\n                }\n                else if(typeof o !== 'object') {\n                    if(n !== 0) v = o.toString().slice(-n); else return null;\n                }\n                else if(o instanceof Array) {\n                    if(n === 1) return o[o.length -1];\n                    return n !== 0 ? o.slice(-n) : [];\n                }\n                else {\n                    v = {};\n                    if(n < 0) n = 0;\n                    libs.object.each(o, len - n, len, function (item, key) { v[key] = item; });\n                    keys = getKeys(v);\n                    return keys.length === 1 ? v[keys[0]] : v;\n                }\n                return v.length === 1 ? v[0] : v.length > 0 ? v : null;\n            },\n\n            /**\n             * If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n             * Useful for ensuring that a callback can always be invoked, without checking if the argument is a function\n             * over and over.\n             * @param {Object} o The object to get the callback for.\n             * @return {Function} If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n             */\n            getCallback: function getCallback (o) {\n                var last = libs.object.last(o);\n                return last instanceof Function ? last : NULL_FUNCTION;\n            },\n\n            /**\n             * Find a child of an object using the given path, split by the given delimiter (or '.' by default)\n             * @param {Object} o The object to operate on.\n             * @param {String} path The path to the child object\n             * @param {String=} [delimiter='.'] The path delimiter\n             * @param {Function=} done A callback for completion\n             * @return {*|Null} The child object at the given string path, or null if it doesn't exist.\n             * @function\n             */\n            findChildAtPath: function findChildAtPath (o, path, delimiter, original, invoked, done) {\n                done = libs.object.getCallback(arguments);\n                var self = o;\n\n                original = (!(original instanceof Function) && original) ? original : self;\n                invoked  = invoked || false;\n\n                if(typeof o === 'object' && typeof path === 'string') {\n                    delimiter = typeof delimiter === 'string' ? delimiter : '.';\n                    path      = path.split(delimiter);\n\n                    var p = path.shift();\n                    if(p) {\n                        return libs.object.each(o, function (o, k, i, exit) {\n                            if(path.length === 0 && k === p) {\n                                done.call(original, o, self, k);\n                                invoked = true;\n                                exit(o);\n                            }\n                            else {\n                                var obj = libs.object.findChildAtPath(o, path.join(delimiter), delimiter, original, invoked, done);\n                                if(obj !== null) exit(obj);\n                            }\n                        });\n                    }\n                }\n                if(!invoked && original === self && done instanceof Function) done.call(original, null, self, null);\n                return null;\n            },\n\n            /**\n             * Produces a shallow clone of the object, that is, if JSON.stringify can handle it.<br>\n             * The object must be non-circular.\n             * @param {Object} o The object to operate on.\n             * @return {*} A shallow clone of the object.\n             * @function\n             */\n            clone: function clone (o) {\n                if(typeof o === 'string' || typeof o === 'number') return o;\n\n                try {\n                    return JSON.parse(JSON.stringify(o));\n                }\n                catch (e) {\n                    throw new Error('Unable to clone object: ' + e.message);\n                }\n            },\n\n            /**\n             * Filters an array or object using only the types allowed. That is, if the item in the array is of a type listed\n             * in the arguments, then it will be added to the filtered array. In this case 'array' is a valid type.\n             * @param {Object} o The object to operate on.\n             * @param {...String} types A list of typeof types that are allowed in the array.\n             * @return {Array<*>} An array filtered by only the allowed types.\n             */\n            only: function only (o, types) {\n                types = libs.object.toArray(arguments);\n                types.shift();\n\n                // Allows the 'plural' form of the type...\n                libs.object.each(types, function (type, key) { this[key] = type.replace(/s$/, ''); });\n\n                if(typeof o !== 'object' || !o) return o;\n                var isArray  = o instanceof Array ? true : false,\n                    filtered = isArray ? [] : {},\n                    typeArr  = types.indexOf('array'),\n                    typeObj  = types.indexOf('object object');\n\n                libs.object.each(o, function (item, key) {\n                    var typeItem = types.indexOf(typeof item);\n\n                    if(typeObj !== -1 && typeArr === -1) {\n                        if((typeof item === 'object' && !(item instanceof Array)) || (typeof item !== 'object' && typeItem !== -1)) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    }\n                    else if(typeObj !== -1 && typeArr !== -1) {\n                        types.push('object');\n                        if(typeItem !== -1) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    }\n                    else if(typeItem !== -1 || (item instanceof Array && typeArr !== -1)) {\n                        if(isArray) filtered.push(item); else filtered[key] = item;\n                    }\n                });\n                return filtered;\n            },\n\n            /**\n             * Filters an object using the given predicate function. For objects, a new object will be returned, with\n             * the values that passed the predicate function. For strings, a new string will be returned with the characters\n             * that passed the predicate function. For numbers, a new number will be returned with the digits that passed\n             * the predicate function. Functions will be operated on as strings.\n             * @param {Object} o The object to operate on.\n             * @param {Function} predicate The function used to filter the object.\n             * @return {*} The filtered object\n             */\n            where: function where (o, predicate) {\n                if(!(predicate instanceof Function)) {\n                    var temp = predicate;\n                    predicate = function (i) { return i == temp; };\n                }\n\n                if(o === null || o === undefined) return o;\n                if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                    filtered = !isObject ? [] : {};\n\n                libs.object.each(o, function (item, key) {\n                    if(predicate.call(item, item, key)) {\n                        if(isObject) filtered[key] = item; else filtered.push(item);\n                    }\n                });\n\n                if(typeof o !== 'object') filtered = filtered.join('');\n                return filtered;\n            },\n\n            /**\n             * Filters an object by keys using the given predicate function.\n             * @param {Object} o The object to operate on.\n             * @param {Function} predicate The function used to filter the object.\n             * @return {*} The filtered object\n             */\n            whereKeys: function whereKeys (o, predicate) {\n                if(!(predicate instanceof Function)) {\n                    var temp = predicate;\n                    predicate = function (k) { return k == temp; };\n                }\n\n                if(o === null || o === undefined) return o;\n                if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                    filtered = !isObject ? [] : {};\n\n                libs.object.each(o, function (item, key) {\n                    if(predicate.call(key, key, item)) {\n                        if(isObject) filtered[key] = item; else filtered.push(item);\n                    }\n                });\n\n                if(typeof o !== 'object') filtered = filtered.join('');\n                return filtered;\n            },\n\n            /**\n             * For objects, inverts the objects keys/values. If the value isn't a number or array, it will be omitted.\n             * For strings, it will reverse the string.\n             * For number, it will compute the number's inverse (i.e. 1 / x).\n             * For functions, invert returns a new function that wraps the given function and inverts it's result.\n             * @param {Object} o The object to operate on.\n             * @return {*} The inverse, as described above.\n             */\n            invert: function invert (o) {\n                if(o === null || o === undefined) return o;\n                if(typeof o === 'string')   return libs.string.reverse(o);\n                if(typeof o === 'number')   return 1 / o;\n                if(typeof o === 'boolean')  return !o;\n\n                if(typeof o === 'function') {\n                    return function () { return libs.object.invert(o.apply(o, arguments)); };\n                }\n\n                var obj = {};\n                libs.object.each(o, function (item, key) {\n                    if(typeof item === 'string' || typeof item === 'number') {\n                        if(!obj[item]) {\n                            obj[item] = key;\n                        }\n                        else {\n                            var tmp = obj[item];\n                            obj[item] = [];\n                            obj[item].push(tmp, key);\n                        }\n                    }\n                });\n\n                return obj;\n            },\n\n            /**\n             * Returns the maximum item in the object.\n             * @param {Object} o The object to operate on.\n             * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n             * @return {*} The maximum item in the object collection.\n             */\n            max: function max (o, func) {\n                if(!o || typeof o !== 'object') return o;\n                if(!(func instanceof Function)) func = undefined;\n                var max, maxValue;\n\n                if(!func) {\n                    max = libs.object.first(o);\n                    libs.object.each(o, 1, function (item) {\n                        if(item >= max) max = item;\n                    });\n                }\n                else {\n                    max = libs.object.first(o);\n                    maxValue = func.call(max, max);\n\n                    libs.object.each(o, 1, function (item) {\n                        if(func.call(item, item) >= maxValue) max = item;\n                    });\n                }\n                return max;\n            },\n\n            /**\n             * Returns the minimum item in the object.\n             * @param {Object} o The object to operate on.\n             * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n             * @return {*} The minimum item in the object collection.\n             */\n            min: function min (o, func) {\n                if(!o || typeof o !== 'object') return o;\n                if(!(func instanceof Function)) func = undefined;\n\n                if(typeof o !== 'object') return o;\n                var min, minValue;\n\n                if(!func) {\n                    min = libs.object.first(o);\n                    libs.object.each(o, 1, function (item) {\n                        if(item <= min) min = item;\n                    });\n                }\n                else {\n                    min = libs.object.first(o);\n                    minValue = func.call(min, min);\n\n                    libs.object.each(o, 1, function (item) {\n                        if(func.call(item, item) <= minValue) min = item;\n                    });\n                }\n                return min;\n            },\n\n            /**\n             * Tests whether or not the object has a method called 'method'.\n             * @param {Object} o The object to operate on.\n             * @param {String} method The name of the method to test existence for.\n             * @return {Boolean} True if the object has a function called 'method', false otherwise.\n             */\n            implements: function _implements () {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift();\n\n                if(!a) return false;\n                return libs.object.every(args, function (m) {\n                    if(!(a[m] instanceof Function)) return false;\n                });\n            },\n\n            /**\n             * Same as Object.j.implements, excepct with a hasOwnProperty check.\n             * @param {Object} o The object to operate on.\n             * @param {String} method The name of the method to test existence for.\n             * @return {Boolean} True if the object has its own function called 'method', false otherwise.\n             */\n            implementsOwn: function implementsOwn (o, method) {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift();\n\n                if(!a) return false;\n                return libs.object.every(args, function (m) {\n                    if(!(a[m] instanceof Function) || !o.hasOwnProperty(method)) return false;\n                });\n            }\n        }\n    };\n\n    return libs;\n}\n\n(function () {\n    'use strict';\n    module.exports = libs;\n}());\n\n},{\"os\":4}],4:[function(require,module,exports){\nexports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\n},{}]},{},[1])\n\n","(function () {\n    'use strict';\n    function libp (libs, getThisValueAndInvoke) {\n        var libp = {\n            string: {\n\n                camelize: function camelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.camelize(s);\n                    });\n                },\n\n                decamelize: function decamelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.decamelize(s);\n                    });\n                },\n\n                differenceFromString: function differenceFromString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.differenceFromString(s, other);\n                    });\n                },\n\n                replaceTokens: function replaceTokens () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.replaceStringTokens(s);\n                    });\n                },\n\n                intersectString: function intersectString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.intersectString(s, other);\n                    });\n                },\n\n                repeat: function repeat (times) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.repeat(s, times);\n                    });\n                },\n\n                rtrim: function rtrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.rtrim(s, what);\n                    });\n                },\n\n                ltrim: function ltrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ltrim(s, what);\n                    });\n                },\n\n                htmlEncode: function htmlEncode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlEncode(s);\n                    });\n                },\n\n                htmlDecode: function htmlDecode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlDecode(s);\n                    });\n                },\n\n                addSlashes: function addSlashes () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.addSlashes(s);\n                    });\n                },\n\n                ucFirst: function ucFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ucFirst(s);\n                    });\n                },\n\n                lcFirst: function lcFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.lcFirst(s);\n                    });\n                },\n\n                titleCase: function titleCase () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.titleCase(s);\n                    });\n                },\n\n                splice: function splice (index, count, add) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.splice(s, index, count, add);\n                    });\n                },\n\n                ellipses: function ellipses_ (length, place, ellipses) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ellipses(s, length, place, ellipses);\n                    });\n                },\n\n                shuffle: function shuffle (splitter) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.shuffle(s, splitter);\n                    });\n                },\n\n                reverse: function reverse () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.reverse(s);\n                    });\n                },\n\n                withoutTrailingSlash: function withoutTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withoutTrailingSlash(s);\n                    });\n                },\n\n                withTrailingSlash: function withTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withTrailingSlash(s);\n                    });\n                },\n\n                regexpSafe: function regexpSafe () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.regexpSafe(s);\n                    });\n                },\n\n                pad: function pad (length, delim, pre) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.pad(s, length, delim, pre);\n                    });\n                },\n\n                newlineToBreak: function newlineToBreak () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.newlineToBreak(s);\n                    });\n                },\n\n                tabsToSpan: function tabsToSpan () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.tabsToSpan(s);\n                    });\n                },\n\n                wordWrapToLength: function wordWrapToLength (width, padleft, padright, omitFirst) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.wordWrapToLength(s, width, padleft, padright, omitFirst);\n                    });\n                },\n            },\n\n            array: {\n                shuffle: function shuffle () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.shuffle(a);\n                    });\n                },\n\n                union: function union () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.union.apply(a, args);\n                    });\n                },\n\n                difference: function difference () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.difference.apply(a, args);\n                    });\n                },\n\n                intersect: function intersect () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.intersect.apply(a, args);\n                    });\n                },\n\n                without: function without () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.without.apply(a, args);\n                    });\n                },\n\n                rotate: function rotate (direction, amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotate(a, direction, amount);\n                    });\n                },\n\n                rotateLeft: function rotateLeft (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateLeft(a, amount);\n                    });\n                },\n\n                rotateRight: function rotateRight (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateRight(a, amount);\n                    });\n                },\n\n                makeUnique: function makeUnique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.makeUnique(a);\n                    });\n                },\n\n                unique: function unique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.unique(a);\n                    });\n                },\n\n                ascending: function ascending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.ascending(a);\n                    });\n                },\n\n                descending: function descending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.descending(a);\n                    });\n                }\n            },\n\n            number: {\n\n                to: function to_ (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        var isInt = false;\n                        if(n % 1 === 0 && n.toString().indexOf('.') === -1) isInt = true;\n                        return isInt ? libs.number.randomIntInRange(n, k) : libs.number.randomNumberInRange(n, k);\n                    });\n                },\n\n                isInt: function isInt () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.isInt(n);\n                    });\n                },\n\n                factorial: function factorial () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.factorial(n);\n                    });\n                },\n\n                choose: function choose (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.choose(n, k);\n                    });\n                },\n\n                pad: function pad (length) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.pad(n, length);\n                    });\n                },\n\n                daysFrom: function daysFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFrom(n, date);\n                    });\n                },\n\n                daysFromNow: function daysFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFromNow(n);\n                    });\n                },\n\n                secondsFrom: function secondsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFrom(n, date);\n                    });\n                },\n\n                secondsFromNow: function secondsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFromNow(n);\n                    });\n                },\n\n                yearsFrom: function yearsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFrom(n, date);\n                    });\n                },\n\n                yearsFromNow: function yearsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFromNow(n);\n                    });\n                },\n\n                monthsFrom: function monthsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFrom(n, date);\n                    });\n                },\n\n                monthsFromNow: function monthsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFromNow(n);\n                    });\n                },\n\n                hoursFrom: function hoursFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFrom(n, date);\n                    });\n                },\n\n                hoursFromNow: function hoursFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFromNow(n);\n                    });\n                },\n\n                minutesFrom: function minutesFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFrom(n, date);\n                    });\n                },\n\n                minutesFromNow: function minutesFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFromNow(n);\n                    });\n                },\n\n                monthsAgo: function monthsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsAgo(n);\n                    });\n                },\n\n                daysAgo: function daysAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysAgo(n);\n                    });\n                },\n\n                secondsAgo: function secondsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsAgo(n);\n                    });\n                },\n\n                minutesAgo: function minutesAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesAgo(n);\n                    });\n                },\n\n                yearsAgo: function yearsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsAgo(n);\n                    });\n                },\n\n                clockTime: function clockTime () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.clockTime(n);\n                    });\n                }\n            },\n\n            function: {\n                inherits: function inherits (s) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.function.inherits(o, s);\n                    });\n                }\n            },\n\n            object: {\n                histogram: function histogram () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.histogram(o);\n                    });\n                },\n\n                copy: function copy () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.copy(o);\n                    });\n                },\n\n                each: function each (start, end, callback) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.each(o, start, end, callback);\n                    });\n                },\n\n                occurrencesOf: function occurrencesOf (what) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.occurrencesOf(o, what);\n                    });\n                },\n\n                keys: function keys () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.keys(o);\n                    });\n                },\n\n                size: function size () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.size(o);\n                    });\n                },\n\n                isNumeric: function isNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNumeric(o);\n                    });\n                },\n\n                getNumeric: function getNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getNumeric(o);\n                    });\n                },\n\n                isEmpty: function isEmpty () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isEmpty(o);\n                    });\n                },\n\n                isArray: function isArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArray(o);\n                    });\n                },\n\n                isPureObject: function isPureObject () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isPureObject(o);\n                    });\n                },\n\n                isString: function isString () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isString(o);\n                    });\n                },\n\n                isUndefined: function isUndefined () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isUndefined(o);\n                    });\n                },\n\n                isNull: function isNull () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNull(o);\n                    });\n                },\n\n                isBoolean: function isBoolean () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isBoolean(o);\n                    });\n                },\n\n                isFunction: function isFunction () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isFunction(o);\n                    });\n                },\n\n                isArguments: function isArguments () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArguments(o);\n                    });\n                },\n\n                toNumber: function toNumber () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toNumber(o);\n                    });\n                },\n\n                toInt: function toInt () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toInt(o);\n                    });\n                },\n\n                toArray: function toArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toArray(o);\n                    });\n                },\n\n                getCallback: function getCallback () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getCallback(o);\n                    });\n                },\n\n                random: function random () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.random(o);\n                    });\n                },\n\n                every: function every (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.every(o, f);\n                    });\n                },\n\n                any: function any (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.any(o, f);\n                    });\n                },\n\n                first: function first (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.first(o, n);\n                    });\n                },\n\n                last: function last (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.last(o, n);\n                    });\n                },\n\n                findChildAtPath: function findChildAtPath (path, delimiter, done) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.findChildAtPath(o, path, delimiter, done);\n                    });\n                },\n\n                clone: function clone () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.clone(o);\n                    });\n                },\n\n                only: function only () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (o) {\n                        args.unshift(o);\n                        return libs.object.only.apply(o, args);\n                    });\n                },\n\n                where: function where (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.where(o, predicateFunction);\n                    });\n                },\n\n                whereKeys: function whereKeys (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.whereKeys(o, predicateFunction);\n                    });\n                },\n\n                invert: function invert () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.invert(o);\n                    });\n                },\n\n                max: function max (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.max(o, f);\n                    });\n                },\n\n                min: function min (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.min(o, f);\n                    });\n                },\n\n                implements: function _implements (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implements(o, method);\n                    });\n                },\n\n                implementsOwn: function implementsOwn (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implementsOwn(o, method);\n                    });\n                },\n            },\n\n            date: {\n                advanceDays: function advanceDays (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceDays(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceMonths: function advanceMonths (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceMonths(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceYears: function advanceYears (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceYears(d, n, adjustForWeeked);\n                    });\n                },\n\n                yymmdd: function yymmdd (delim) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.yymmdd(d, delim);\n                    });\n                },\n\n                clockTime: function clockTime (omitMS) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.clockTime(d, !!omitMS);\n                    });\n                },\n            }\n        };\n\n        return libp;\n    }\n    module.exports = libp;\n}());\n","function libs () {\n    'use strict';\n    var IS_BROWSER = typeof window !== 'undefined',\n        HAS_OS     = IS_BROWSER ? false : typeof require('os') === 'object';\n\n    /**\n     * Alters Firefox's Function.toString() results to match Chrome/Safari.\n     * @param {String} s The string representation of the function.\n     * @return {String} The altered string, with newlines replaced and 'use strict' removed.\n     */\n    function fixFirefoxFunctionString (s) {\n        return s.replace(/(?:\\r)?\\n+/g, '').replace(/\"use strict\";|'use strict';/g, '');\n    }\n\n    /**\n     * IE doesn't allow Object.keys on primitive types...\n     * @return {Array<String|Number>}\n     */\n    function getKeys (o) {\n        switch(typeof o) {\n            case 'object':\n                return o ? Object.keys(o) : [];\n\n            case 'string':\n                var keys = [];\n                for(var i = 0; i < o.length; i++) keys.push(i.toString());\n                return keys;\n\n            default:\n                return [];\n        }\n    }\n\n    var NULL_FUNCTION = function EMPTY_CALLBACK_REPLACEMENT () {};\n\n    var libs = {\n\n        /**\n         * String library functions\n         * @type {Object}\n         */\n        string: {\n\n            /**\n             * Camelizes all of the provided string arguments.\n             * @param {...String} string A list of strings to camelize.\n             * @return {Array<String>} An array of the provided arguments, with all strings camelized.\n             */\n            camelize: function camelize () {\n                var ret = [];\n                libs.object.every(arguments, function (s) {\n                    if(s) {\n                        if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                        s = s.toString().replace(/[^a-z0-9$]/gi, '_').replace(/\\$(\\w)/g, '$_$1').split(/[\\s_]+/g);\n                        libs.object.each(s, 1, s.length, function (i, k) {\n                            this[k] = libs.string.ucFirst(i);\n                        });\n                        s = libs.string.lcFirst(s.join(''));\n                    }\n                    ret.push(s);\n                });\n                return ret.length === 1 ? ret[0] : ret;\n            },\n\n            /**\n             * Decamelizes all of the provided string arguments.\n             * @param {...String} string A list of strings to decamelize.\n             * @return {Array<String>} An array of the provided arguments, with all strings decamelized.\n             */\n            decamelize: function decamelize () {\n                var ret = [];\n                libs.object.every(arguments, function (s) {\n                    if(s) {\n                        if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                        s = s.toString().replace(/([A-Z$])/g, function ($) {\n                            return ' ' + (typeof $ === 'string' ? $.toLowerCase() : '');\n                        });\n                    }\n                    ret.push(typeof s === 'string' ? s.trim() : s);\n                });\n                return ret.length === 1 ? ret[0] : ret;\n            },\n\n            /**\n             * Returns all the characters found in one string but not the other.\n             * @param {String} s The string to operate on.\n             * @param {String} other The string to compute the difference against.\n             * @return {String} A difference string.\n             */\n            differenceFromString: function differenceFromString (s, other) {\n                if(typeof other !== 'string' || typeof s !== 'string') return s;\n                var sarr = s.split(''), oarr = other.split('');\n                return libs.array.differenceFromArray(sarr, oarr).join('');\n            },\n\n            /**\n             * Replaces tokens (snippets of text wrapped in brackets) with their values.\n             * @param {String} s The string to operate on.\n             * @return {String} The token replaced values.\n             */\n            replaceTokens: function replaceTokens (s) {\n                return libs.generic.replaceStringTokens(s);\n            },\n\n            /**\n             * Returns only the characters common to both strings\n             * @param {String} s The string to operate on.\n             * @param {String} other The string to compute the intersection against.\n             * @return {String} The intersection between the two strings.\n             */\n            intersectString: function intersectString (s, other) {\n                if(typeof other !== 'string' || typeof s !== 'string') return s;\n                var sarr = s.split(''), oarr = other.split('');\n                return libs.intersectArray(sarr, oarr).join('');\n            },\n\n            /**\n             * Repeat a string 'times' times.\n             * @param {String} s The string to operate on.\n             * @param {Number} times The number of times to repeat the string\n             * @return {String} The repeated string.\n             */\n            repeat: function repeat (s, times) {\n                times = parseInt(times, 10);\n                times = isNaN(times) || !isFinite(times) || times <= 0 ? 1 : times;\n\n                var os = s;\n                for(var i = 1; i < times; i++) s += os;\n                return s;\n            },\n\n            /**\n             * Right trims a string. Same as String.trim, but only for the end of a string.\n             * @param {String} s The string to operate on.\n             * @param {String} [what='\\\\s+'] What to trim.\n             * @return {String} The right trimmed string\n             */\n            rtrim: function rtrim (s, what) {\n                what = typeof what === 'string' ? what : '\\\\s+';\n                return s.replace(new RegExp(what + '$'), '');\n            },\n\n            /**\n             * Left trims a string. Same as String.trim, but only for the beginning of a string.\n             * @param {String} s The string to operate on.\n             * @param {String} [what='\\\\s+'] What to trim.\n             * @return {String} The left trimmed string\n             */\n            ltrim: function ltrim (s, what) {\n                what = typeof what === 'string' ? what : '\\\\s+';\n                return s.replace(new RegExp('^' + what), '');\n            },\n\n            /**\n             * Escapes HTML special characters\n             * @param {String} s The string to operate on.\n             * @return {String} The HTML escaped string\n             */\n            htmlEncode: function htmlEncode (s) {\n                var map = {\n                    '&'  : '&amp;',\n                    '<'  : '&lt;',\n                    '>'  : '&gt;',\n                    '\"'  : '&quot;',\n                    '\\'' : '&#039;'\n                };\n                return s.replace(/[&<>\"']/g, function (m) { return map[m]; });\n            },\n\n            /**\n             * Un-escapes HTML special characters\n             * @param {String} s The string to operate on.\n             * @return {String} The HTML escaped string\n             */\n            htmlDecode: function htmlDecode (s) {\n                var map = {\n                    '&amp;'  : '&',\n                    '&lt;'   : '<',\n                    '&gt;'   : '>',\n                    '&quot;' : '\"',\n                    '&#039;' : '\\''\n                };\n                return s.replace(/(&amp;|&lt;|&gt;|&quot;|&#039;)/g, function (m) { return map[m]; });\n            },\n\n            /**\n             * Creates an 'eval' safe string, by adding slashes to \", ', \\t, \\n, \\f, \\r, and the NULL byte.\n             * @param {String} s The string to operate on.\n             * @return {String} A string with slashes\n             */\n            addSlashes: function addSlashes (s) {\n                return s.replace(/[\\\\\"'\\t\\n\\f\\r]/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\n            },\n\n            /**\n             * Returns a string with the first letter capitalized.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with the first letter upper cased.\n             * @function\n             */\n            ucFirst: function ucFirst (s) {\n                return s.charAt(0).toUpperCase() + s.slice(1);\n            },\n\n            /**\n             * Returns a string with the first letter lowercased.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with the first letter lower cased.\n             * @function\n             */\n            lcFirst: function lcFirst (s) {\n                return s.charAt(0).toLowerCase() + s.slice(1);\n            },\n\n            /**\n             * Returns a string in Title Case.\n             * @param {String} s The string to operate on.\n             * @return {String} The title cased string.\n             * @function\n             */\n            titleCase: function titleCase (s) {\n                var arr = [];\n                libs.object.each(s.split(' '), function (t) { arr.push(libs.string.ucFirst(t)); });\n                return arr.join(' ');\n            },\n\n            /**\n             * Splices a string, much like an array.\n             * @param {String} s The string to operate on.\n             * @param {Number} index The index to begin splicing the string at\n             * @param {Number} count The number of characters to delete\n             * @param {String} add The string to append at the spliced section\n             * @return {String} The spliced string.\n             * @function\n             */\n            splice: function splice (s, index, count, add) {\n                return s.slice(0, index) + (add || '') + s.slice(index + count);\n            },\n\n            /**\n             * Return a truncated string with ellipses.\n             * @param {String} s The string to operate on.\n             * @param {Number=} length The length of the desired string. If ommited, the strings original length will be used.\n             * @param {String=} [place='back'] Possible values are 'front' and 'back'. Specifying 'front' will truncate the\n             * string and add ellipses to the front, 'back' (or any other value) will add the ellipses to the back.\n             * @param {String=} [ellipses='...'] The string value of the ellipses. Use this to add anything other than '...'\n             * @returns {String} A truncated string with ellipses (if its length is greater than 'length')\n             * @function\n             */\n            ellipses: function ellipses_ (s, length, place, ellipses) {\n                if(isNaN(parseInt(length, 10))) length = s.length;\n                if(length < 0 || !isFinite(length)) length = 0;\n\n                ellipses = typeof ellipses === 'string' ? ellipses : '...';\n                if(s.length <= length) return s;\n\n                if(length <= ellipses.length) {\n                    return ellipses.substring(0, length);\n                }\n                else if(!place || place !== 'front') {\n                    return s.substr(0, length - ellipses.length) + ellipses;\n                }\n                else {\n                    return ellipses + s.substr(0, length - ellipses.length);\n                }\n            },\n\n            /**\n             * Shuffles a string\n             * @param {String} s The string to operate on.\n             * @param {String} splitter A string used to split the string, to tokenize it before shuffling.\n             * @return {String} The mixed up string.\n             */\n            shuffle: function shuffle (s, splitter) {\n                var a = s.split(typeof splitter === 'string' ? splitter : ''), n = a.length,\n                replaceSplits = n - 1;\n\n                for(var i = n - 1; i > 0; i--) {\n                    var j = Math.floor(Math.random() * (i + 1)),\n                        tmp = a[i];\n\n                    a[i] = a[j];\n                    a[j] = tmp;\n                }\n\n                for(var k = 0; k < replaceSplits; k++) a.splice(libs.number.randomIntInRange(0, a.length), 0, splitter);\n                return a.join('');\n            },\n\n            /**\n             * Reverses a string.\n             * @param {String} s The string to operate on.\n             * @return {String} The reversed string.\n             */\n            reverse: function reverse (s) {\n                if(s.length < 64) {\n                    var str = '';\n                    for(var i = s.length; i >= 0; i--) str += s.charAt(i);\n                    return str;\n                }\n                else {\n                    return s.split('').reverse().join('');\n                }\n            },\n\n            /**\n             * Strips the trailing slashes from a string.\n             * @param {String} s The string to operate on.\n             * If using Node.js, it will replace the trailing slash based on the value of os.platform\n             * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n             * @returns {String} The string without a trailing slash.\n             * @function\n             */\n            withoutTrailingSlash: function withoutTrailingSlash (s) {\n                if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return s.replace(/\\\\+$/, '');\n                return s.replace(/\\/+$/, '');\n            },\n\n            /**\n             * Add a trailing slash to a string, if it doesn't already have one.\n             * If using Node.js, it will replace the trailing slash based on the value of os.platform\n             * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n             * @param {String} s The string to operate on.\n             * @returns {String} The string without a trailing slash.\n             * @function\n             */\n            withTrailingSlash: function withTrailingSlash (s) {\n                if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return libs.string.withoutTrailingSlash(s) + '\\\\';\n                return libs.string.withoutTrailingSlash(s) + '/';\n            },\n\n            /**\n             * Escapes regular expression special characters. This is useful is you wish to create a new regular expression\n             * from a stored string value.\n             * @param {String} s The string to operate on.\n             * @returns {String} The regular expression safe string\n             * @function\n             */\n            regexpSafe: function regexpSafe (s) {\n                return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n            },\n\n            /**\n             * Pads a string with 'delim' characters to the specified length. If the length is less than the string length,\n             * the string will be truncated.\n             * @param {String} s The string to operate on.\n             * @param {Number} length The length to pad the string to. If less that the length of the string, the string will\n             * be returned. If less than the length of the string, the string will be sliced.\n             * @param {String=} [delim=' '] The character to pad the string with.\n             * @param {Boolean=} [pre=false] If true, the padding will be added to the beginning of the string, otherwise the padding\n             * will be added to the end.\n             * @returns {String} The padded string\n             * @function\n             */\n            pad: function pad (s, length, delim, pre) {\n                var i, thisLength = s.length;\n\n                if(!delim) delim = ' ';\n                if(length === 0) return ''; else if(isNaN(parseInt(length, 10))) return s;\n\n                length = parseInt(length, 10);\n                if(length < thisLength) return !pre ? s.slice(0, length) : s.slice(-length);\n\n                if(pre) {\n                    for(i = 0; i < length - thisLength; i++) s = delim + s;\n                }\n                else {\n                    for(i = 0; i < length - thisLength; i++) s += delim;\n                }\n                return s;\n            },\n\n            /**\n             * Replaces newlines with br tags.\n             * @param {String} s The string to operate on.\n             * @return {String} The string with newlines converted to br tags.\n             */\n            newlineToBreak: function newlineToBreak (s) {\n                return s.replace(/(\\r\\n|\\n)/g, '<br>');\n            },\n\n            /**\n             * Replaces tabs with a span element with the class 'tab'\n             * @param {String} s The string to operate on.\n             * @return {String} The string with tabs converted to spans with the class 'tab'\n             */\n            tabsToSpan: function tabsToSpan (s) {\n                return s.replace(/\\t/g, '<span class=\"tab\"></span>');\n            },\n\n            /**\n             * Adjusts a string to fit within the confines of 'width', without breaking words.\n             * @param {String} s The string to operate on.\n             * @param {Number=} [length=120] The length to word wrap the string to.\n             * @param {Number=} [padleft=0] The number of columns to pad the string on the left\n             * @param {Number=} [padright=0] The number of columns to pad the string on the right\n             * @param {Boolean=} omitFirst If true, the first line will not be padded left\n             * @return {String} The string adjusted and padded for the stdout.\n             * @function\n             */\n            wordWrapToLength: function wordWrapToLength (s, width, padleft, padright, omitFirst) {\n                if(padright === undefined && padleft) padright = padleft;\n\n                padleft  = !isNaN(parseInt(padleft,  10)) ? parseInt(padleft, 10)  : 0;\n                padright = !isNaN(parseInt(padright, 10)) ? parseInt(padright, 10) : 0;\n\n                var paddingLeft = '';\n                for(var n = 0; n < padleft;  n++) paddingLeft  += ' ';\n\n                var cols   = !isNaN(parseInt(width, 10)) ? length : 120,\n                    arr    = s.split(' '),\n                    item   = null,\n                    len    = !omitFirst ? cols - padright - padleft : cols - padright,\n                    str    = !omitFirst ? paddingLeft : '',\n                    olen   = cols - padright - padleft;\n\n                while((item = arr.shift()) !== undefined) {\n                    if(item.length < len) {\n                        str += item + ' ';\n                        len -= item.length + 1;\n                    }\n                    else if(item.length > olen) {\n                        str += item.substring(0, len - 1) + '-\\n' + paddingLeft;\n                        arr.unshift(item.substring(len, item.length - 1));\n                        len = cols - padright - padleft;\n                    }\n                    else {\n                        str += '\\n' + paddingLeft + item + ' ';\n                        len = cols - padright - 1 - padleft - item.length;\n                    }\n                }\n                return str;\n            }\n        },\n\n        /**\n         * Date library functions\n         * @type {Object}\n         */\n        date: {\n            /**\n             * Moves a date forward 'daysInTheFuture' days.\n             * @param {Date} The date object to operate on.\n             * @param {Number} daysInTheFuture The number of days in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified days.\n             * @function\n             */\n            advanceDays: function advanceDays (d, daysInTheFuture, adjustForWeekend) {\n                daysInTheFuture = daysInTheFuture && libs.generic.isNumeric(daysInTheFuture) ? daysInTheFuture : 1;\n                d.setTime(d.getTime() + (daysInTheFuture * 86400000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Moves a date forward 'monthsInTheFuture' months.\n             * @param {Date} The date object to operate on.\n             * @param {Number} monthsInTheFuture The number of months in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified months.\n             * @function\n             */\n            advanceMonths: function advanceMonths (d, monthsInTheFuture, adjustForWeekend) {\n                monthsInTheFuture = monthsInTheFuture && libs.generic.isNumeric(monthsInTheFuture) ? monthsInTheFuture : 1;\n                d.setTime(d.getTime() + (monthsInTheFuture * 2629746000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Moves a date forward 'yearsInTheFuture' years.\n             * @param {Date} The date object to operate on.\n             * @param {Number} yearsInTheFuture The number of years in the future to advance the date\n             * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n             * @returns {Date} The date, adjusted the number of specified years.\n             * @function\n             */\n            advanceYears: function advanceYears (d, yearsInTheFuture, adjustForWeekend) {\n                yearsInTheFuture = yearsInTheFuture && libs.generic.isNumeric(yearsInTheFuture) ? yearsInTheFuture : 1;\n                d.setTime(d.getTime() + (yearsInTheFuture * 31536000000));\n\n                if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                    while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                }\n                return d;\n            },\n\n            /**\n             * Returns the date in the yyyy-mm-dd format.\n             * @param {Date} The date object to operate on.\n             * @param {String} [delim='-'] The delimiter to used the separate the date components (e.g. '-' or '.')\n             * @returns {String} The date in the yyyy-mm-dd format.\n             * @function\n             */\n            yyyymmdd: function yyyymmdd (d, delim) {\n                delim = typeof delim !== 'string' ? '-' : delim ;\n\n                var dd   = d.getDate(),\n                    mm   = d.getMonth() + 1,\n                    yyyy = d.getFullYear();\n\n                if(dd < 10) dd = '0' + dd;\n                if(mm < 10) mm = '0' + mm;\n                return yyyy + delim + mm + delim + dd;\n            },\n\n            /**\n             * Converts a date to the HH:MM:SS.MSEC time format\n             * @param {Date} The date object to operate on.\n             * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n             * @returns {String} The formatted number, now a string.\n             * @function\n             */\n            clockTime: function clockTime (d, omitMS) {\n                return libs.number.clockTime(d.getTime(), !!omitMS);\n            }\n        },\n\n        /**\n         * Number library functions\n         * @type {Object}\n         */\n        number: {\n\n            /**\n             * Returns a random integer in range [min, max] (inclusive)\n             * @param {Number} min The minimum possible value (inclusive)\n             * @param {Number} max The maximum possible value (inclusive)\n             * @return {Number} A random number between min and max\n             */\n            randomIntInRange: function (min, max) {\n                min = parseInt(min, 10);\n                max = parseInt(max, 10);\n\n                if(isNaN(min) && !isFinite(min)) min = 0;\n                if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                return Math.floor(Math.random() * (max - min + 1)) + min;\n            },\n\n            /**\n             * Returns a random float in range [min, max] (inclusive)\n             * @param {Number} min The minimum possible value (inclusive)\n             * @param {Number} max The maximum possible value (inclusive)\n             * @return {Number} A random number between min and max\n             */\n            randomNumberInRange: function (min, max) {\n                min = parseInt(min, 10);\n                max = parseInt(max, 10);\n\n                if(isNaN(min) && !isFinite(min)) min = 0;\n                if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                return Math.random() * (max - min + 1) + min;\n            },\n\n            /**\n             * Recursively computes the factorial of the number n.\n             * @param {Number} n A number.\n             * @return {Number|Infinity} n!\n             */\n            factorial: function factorial (n) {\n                if(typeof n !== 'number' || n < 0) return NaN;\n                if(n > 170) return Infinity;\n                if(n === 0 || n === 1) return 1;\n                return n * factorial(n - 1);\n            },\n\n            /**\n             * Determines is the given numbers are integers\n             * @param {...Number} n Numbers.\n             * @return {Boolean} True if all arguments are integers, false otherwise.\n             */\n            isInt: function isInt () {\n                return libs.object.every(arguments, function (n) {\n                    return typeof n === 'number' && n % 1 === 0 && n.toString().indexOf('.') === -1;\n                });\n            },\n\n            /**\n             * Recursively computes n choose k.\n             * @param {Number} n A number.\n             * @param {Number} k A number.\n             * @return {Number|Infinity} n choose k.\n             */\n            choose: function choose (n, k) {\n                if(typeof n !== 'number' || typeof k !== 'number') return NaN;\n                if(k === 0) return 1;\n                return (n * choose(n - 1, k - 1)) / k;\n            },\n\n            /**\n             * Pads a number with preceeding zeros.\n             * @param {Number} n The number object to operate on.\n             * @param {Number} length The final length of the string\n             * @returns {String} The padded number, now a string.\n             * @function\n             */\n            pad: function pad (n, length) {\n                return libs.string.pad(n.toString(), length, '0', true);\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            daysFrom: function daysFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setDate(date.getDate() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            daysFromNow: function daysFromNow (n) {\n                return libs.number.daysFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            secondsFrom: function secondsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setSeconds(date.getSeconds() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of days.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            secondsFromNow: function secondsFromNow (n) {\n                return libs.number.secondsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of years.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            yearsFrom: function yearsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setFullYear(date.getFullYear() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of years.\n             * @return {Date} A date object\n             */\n            yearsFromNow: function yearsFromNow (n) {\n                return libs.number.yearsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of months.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            monthsFrom: function monthsFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setMonth(date.getMonth() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of months.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            monthsFromNow: function monthsFromNow (n) {\n                return libs.number.monthsFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of hours.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} The modified date.\n             */\n            hoursFrom: function hoursFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setHours(date.getHours() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of hours.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A date object\n             */\n            hoursFromNow: function hoursFromNow (n) {\n                return libs.number.hoursFrom(n, new Date());\n            },\n\n            /**\n             * Advances (or reverses) the date the specified number of minutes.\n             * @param {Number} n The number object to operate on.\n             * @param {Date} date The date to change.\n             * @return {Date} A modified date.\n             */\n            minutesFrom: function minutesFrom (n, date) {\n                if(typeof date === 'number') date = new Date(date);\n                if(!(date instanceof Date))  date = new Date();\n\n                date.setMinutes(date.getMinutes() + n);\n                return date;\n            },\n\n            /**\n             * Advances (or reverses) the current date the specified number of minutes.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} The date object\n             */\n            minutesFromNow: function minutesFromNow (n) {\n                return libs.number.minutesFrom(n, new Date());\n            },\n\n            /**\n             * The time, months in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            monthsAgo: function monthsAgo (n) {\n                return libs.number.minutesFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, days in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            daysAgo: function daysAgo (n) {\n                return libs.number.daysFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, seconds in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            secondsAgo: function secondsAgo (n) {\n                return libs.number.secondsFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, minutes in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            minutesAgo: function minutesAgo (n) {\n                return libs.number.minutesFromNow(-n, new Date());\n            },\n\n            /**\n             * The time, years in the past.\n             * @param {Number} n The number object to operate on.\n             * @return {Date} A Date object.\n             */\n            yearsAgo: function yearsAgo (n) {\n                return libs.number.yearsFromNow(-n, new Date());\n            },\n\n            /**\n             * Converts a number to the HH:MM:SS.MSEC time format\n             * @param {Number} t The number object to operate on.\n             * @memberof Number.prototype\n             * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n             * @returns {String} The formatted number, now a string.\n             * @function\n             */\n            clockTime: function clockTime (t, omitMS) {\n                var ms, secs, mins, hrs;\n\n                ms = t % 1000;\n                t = (t - ms) / 1000;\n\n                secs = t % 60;\n                t = (t - secs) / 60;\n\n                mins = t % 60;\n                hrs = (t - mins) / 60;\n\n                return libs.number.pad(hrs.toString(), 2)  + ':' + libs.number.pad(mins.toString(), 2) + ':' +\n                       libs.number.pad(secs.toString(), 2) + ((omitMS === true) ? '' : '.' + libs.number.pad(ms.toString(), 3));\n            }\n        },\n\n        /**\n         * Function library functions\n         * @type {Object}\n         */\n        function: {\n\n            /**\n             * Inherit the prototype methods from one constructor into another.\n             * @param {Function} constructor The inheriting constructor\n             * @param {Function} superConstructor The parent constructor\n             * @return {Function} The inheriting constructor\n             */\n            inherits: function inherits (constructor, superConstructor) {\n                if (constructor === undefined || constructor === null)\n                throw new TypeError('The constructor to \"inherits\" must not be ' + 'null or undefined');\n\n                if (superConstructor === undefined || superConstructor === null)\n                throw new TypeError('The super constructor to \"inherits\" must not ' + 'be null or undefined');\n\n                if (superConstructor.prototype === undefined)\n                throw new TypeError('The super constructor to \"inherits\" must ' + 'have a prototype');\n\n                constructor.super_ = superConstructor;\n                Object.setPrototypeOf(constructor.prototype, superConstructor.prototype);\n                return constructor;\n            },\n        },\n\n        /**\n         * Array library functions\n         * @type {Object}\n         */\n        array: {\n\n            /**\n             * Shuffles an array\n             * @param {Array} a The Array object to operate on.\n             * @return {Array<*>} The mixed up array\n             */\n            shuffle: function shuffle (a) {\n                for(var i = a.length - 1; i > 0; i--) {\n                    var j = Math.floor(Math.random() * (i + 1)), tmp = a[i];\n                    a[i] = a[j];\n                    a[j] = tmp;\n                }\n                return a;\n            },\n\n            /**\n             * Computes the union between the current array, and all the array objects passed in. That is,\n             * the set of unique objects present in all of the arrays.\n             * @param {Array} a The Array object to operate on.\n             * @param {...Array} arr A list of array objects\n             * @return {Array<*>} The union set of the provided arrays.\n             */\n            union: function union (a) {\n                var args = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                var union = [];\n                args.unshift(a);\n                libs.object.each(args, function (array) {\n                    libs.object.each(array, function (item) {\n                        if(union.indexOf(item) === -1) union.push(item);\n                    });\n                });\n                return union;\n            },\n\n            /**\n             * Returns all the items unique to all arrays.\n             * @param {...Array} arrays The Array objects to operate on.\n             * @param {Array} other The array to compute the difference from.\n             * @return {Array} A new array with items unique to each array.\n             */\n            difference: function difference () {\n                var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                if(arrays.length === 0) return [];\n                if(arrays.length === 1) return libs.object.copy(arrays[0]);\n                var i, simpleDiff = [];\n\n                if(arrays.length === 2) {\n                    for(i = 0; i < arrays[0].length; i++)\n                        if(arrays[1].indexOf(arrays[0][i]) === -1) simpleDiff.push(arrays[0][i]);\n\n                    for(i = 0; i < arrays[1].length; i++)\n                        if(arrays[0].indexOf(arrays[1][i]) === -1) simpleDiff.push(arrays[1][i]);\n\n                    return simpleDiff;\n                }\n\n                var difference = arrays[0], intermediate = [];\n                for(i = 1; i < arrays.length; i++) {\n                    for(var n = 0; n < difference.length; n++) {\n                        if(arrays[i].indexOf(difference[n]) === -1) {\n                            intermediate.push(difference[n]);\n                        }\n                    }\n                    for(var k = 0; k < arrays.length; k++) {\n                        //if(arrays[i] !== arrays)\n                    }\n                    difference = intermediate;\n                    intermediate = [];\n                }\n\n                return difference;\n            },\n\n            /**\n             * Returns the items common to all arrays.\n             * @param {...Array} items The arrays from which to compute the intersection.\n             * @return {Array} A new array with items common to both arrays.\n             */\n            intersect: function intersect () {\n                var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                if(arrays.length === 0) return [];\n                if(arrays.length === 1) return libs.object.copy(arrays[0]);\n\n                var intersection = arrays[0], intermediate = [];\n                for(var i = 1; i < arrays.length; i++) {\n                    for(var n = 0; n < intersection.length; n++) {\n                        if(arrays[i].indexOf(intersection[n]) > -1) {\n                            intermediate.push(intersection[n]);\n                            var idx = arrays[i].indexOf(intersection[n]);\n                            arrays[i].splice(idx, 1);\n                        }\n                    }\n                    intersection = intermediate;\n                    intermediate = [];\n                }\n\n                return intersection;\n            },\n\n            /**\n             * Creates a new array from the current one, with all occurences of the provided arguments ommited.<br>\n             * For example: <em>[1,2,3,4,5].without(1)</em> will return <em>[2,3,4,5]</em>\n             * and <em>[1, null, 2, null, undefined].without(null, undefined)</em> will return <em>[1, 2]</em>\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array<*>} A shallow copy of the array with the provided arguments ommited.\n             * @function\n             */\n            without: function without () {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift(),\n                    res  = [];\n\n                libs.object.each(a, function (v) { if(args.indexOf(v) === -1) res.push(v); });\n                return res;\n            },\n\n            /**\n             * Rotates the array left or right the specified number of times. If the direction is left, it will shift off the\n             * first <em>n</em> elements and push them to the end of the array. If right, it will pop off the last <em>n</em>\n             * items and unshift them onto the front of the array.\n             * @param {Array} a The Array object to operate on.\n             * @param {String=} [direction='left'] The direction to rotate array members.\n             * @param {Number=} [amount=1] The number of elements to shift\n             * @return {Array<*>} The current array, shifted.\n             * @function\n             */\n            rotate: function rotate (a, direction, amount) {\n                if(direction && libs.object.isNumeric(direction) && !amount) {\n                    amount    = direction;\n                    direction = undefined;\n                }\n\n                if(!amount || (amount && !libs.object.isNumeric(amount))) amount = 1;\n                for(var i = 0; i < amount; i++) {\n                    if(direction !== 'right') a.push(a.shift()); else a.unshift(a.pop());\n                }\n                return a;\n            },\n\n            /**\n             * Rotates the array left the specified number of times.\n             * This is useful if trying to create a circular queue.\n             * @param {Array} a The Array object to operate on.\n             * @param {Number=} [amount=1] The number of times to rotate the array left.\n             * @return {Array<*>} The current array, rotated left.\n             * @function\n             */\n            rotateLeft: function rotateLeft (a, amount) {\n                return libs.array.rotate(a, 'left', amount);\n            },\n\n            /**\n             * Rotates the array right the specified number of times.\n             * This is useful if trying to create a circular queue.\n             * @param {Array} a The Array object to operate on.\n             * @param {Number=} [amount=1] The number of times to rotate the array left.\n             * @return {Array<*>} The current array, rotated right.\n             * @function\n             */\n            rotateRight: function rotateLeft (a, amount) {\n                return libs.array.rotate(a, 'right', amount);\n            },\n\n            /**\n             * Removes duplicates from the current array.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array<*>} The current array, with duplicates removed.\n             * @function\n             */\n            makeUnique: function makeUnique (a) {\n                var visited = [];\n                for(var i = 0; i < a.length; i++) {\n                    if(visited.indexOf(a[i]) === -1) {\n                        visited.push(a[i]);\n                    }\n                    else {\n                        a.splice(i, 1);\n                        i--; // Splice will affect the internal array pointer, so fix it...\n                    }\n                }\n                return a;\n            },\n\n            /**\n             * Gets an array of unique items from the current array.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} A new array with no duplicate values.\n             * @function\n             */\n            unique: function unique (a) {\n                var visited = [],\n                    unique  = [];\n\n                libs.object.each(a, function (item) {\n                    if(visited.indexOf(item) === -1) {\n                        unique.push(item);\n                        visited.push(item);\n                    }\n                });\n                return unique;\n            },\n\n            /**\n             * Sorts the array in ascending order.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} The array sorted in ascending order.\n             * @function\n             */\n            ascending: function ascending (a) {\n                return a.sort(function (a, b) {\n                    if(a !== undefined && a !== null) a = a.toString();\n                    if(b !== undefined && b !== null) b = b.toString();\n                    return a < b ? -1 : a > b ? 1 : 0;\n                });\n            },\n\n            /**\n             * Sorts the array in descending order.\n             * This is a destructive action, and will modify the array in place.\n             * @param {Array} a The Array object to operate on.\n             * @returns {Array} The array sorted in descending order.\n             * @function\n             */\n            descending: function descending (a) {\n                return a.sort(function (a, b) {\n                    if(a !== undefined && a !== null) a = a.toString();\n                    if(b !== undefined && b !== null) b = b.toString();\n                    return a > b ? -1 : a < b ? 1 : 0;\n                });\n            }\n        },\n\n        /**\n         * Array library functions\n         * @type {Object}\n         */\n        object: {\n\n            /**\n             * Computes the frequencies for each item in all of arguments.\n             * @param {...*} objs The objects to compute the histogram from.\n             * @return {Object<Number>} An object that has the items from all of the arguments as its keys and their frequencies as it's values.\n             */\n            histogram: function histogram () {\n                var histogram = {};\n                libs.object.every(arguments, function (o) {\n                    if(typeof o === 'boolean') {\n                        if(!histogram[o]) histogram[o] = 1; else histogram[o]++;\n                    }\n                    else if(typeof o === 'function') {\n                        if(!histogram['function']) histogram['function'] = 1; else histogram[o]++;\n                    }\n                    else {\n                        libs.object.every(o, function (val) {\n                            switch(true) {\n                                case typeof val === 'function':\n                                case typeof val === 'undefined':\n                                    val = typeof val;\n                                    break;\n                                case typeof val === 'object' && val === null:\n                                    val = 'null';\n                                    break;\n                                case typeof val === 'object' && val instanceof Array:\n                                    val = 'array';\n                                    break;\n                                case typeof val === 'object':\n                                    val = 'object';\n                                    break;\n                                default:\n                                    val = val.toString();\n                            }\n\n                            if(typeof histogram[val] !== 'number') histogram[val] = 0;\n                            histogram[val]++;\n                        });\n                    }\n                });\n                return histogram;\n            },\n\n            /**\n             * Creates a shallow copy of 'item'.\n             * @param {*} item The item to shallow \"copy\".\n             * @return {*} A shallow copy of the item.\n             */\n            copy: function copy (item) {\n                var copy;\n                if(!item) return item;\n\n                switch (typeof item) {\n                    case 'string':\n                    case 'number':\n                    case 'function':\n                    case 'boolean':\n                        return item;\n\n                    default:\n                        if(item instanceof Array) {\n                            copy = [];\n                        }\n                        else {\n                            copy = {};\n                        }\n                }\n\n                libs.object.every(item, function (o, k) { copy[k] = o; });\n                return copy;\n            },\n\n            /**\n             * Returns the number of occurences of \"what\"\n             * @param {*} obj The item to count the occurences of \"what\" in.\n             * @param {*} what The item to count the occurences of the item in the array.\n             * @return {[type]} [description]\n             */\n            occurrencesOf: function occurrencesOf (obj, what) {\n                if(arguments.length < 2) return 0;\n\n                if(typeof obj === 'boolean') {\n                    return 0;\n                }\n                if(typeof obj === 'number') {\n                    return occurrencesOf(obj.toString(), what);\n                }\n                else if(typeof obj === 'function') {\n                    return occurrencesOf(fixFirefoxFunctionString(obj.toString()), what);\n                }\n\n                var count = 0;\n                if(typeof obj === 'string') {\n                    if(typeof what === 'string' || typeof what === 'number') {\n                        var regexp = new RegExp(what.toString(), 'g'), m;\n                        while(m = regexp.exec(obj)) count++;\n                    }\n                }\n                else if(typeof obj !== 'string') {\n                    libs.object.every(obj, function (item) {\n                        if(item === what) count++;\n                    });\n                }\n                return count;\n            },\n\n            /**\n             * Returns the object's keys.\n             * @param {Object} o The object to operate on.\n             * @returns {Array<String|Number>} The object's key set\n             * @function\n             */\n            keys : function keys (o) {\n                if(o === undefined || o == null) return [];\n\n                var keys = getKeys(o), idx;\n                if(libs.object.isArguments(o)) {\n                    idx = keys.indexOf('length');\n                    if(idx > -1) keys.splice(idx, 1);\n                }\n                return keys;\n            },\n\n            /**\n             * Returns the 'size' or 'length' of an object.\n             * <ul>\n             *      <li> String   -> The string's length  </li>\n             *      <li> Number   -> The number of digits </li>\n             *      <li> Object   -> The number of keys   </li>\n             *      <li> Array    -> The number of items  </li>\n             *      <li> Function -> 1                    </li>\n             * </ul>\n             * @param {Object} o The object to operate on.\n             * @returns {Number} The number of items within the object.\n             * @function\n             */\n            size: function size (o) {\n                switch(true) {\n                    case typeof o === 'function':\n                        return 1;\n\n                    case typeof o === 'number':\n                        return o.toString().length;\n\n                    case o instanceof Array:\n                    case typeof o === 'string':\n                        return o.length;\n\n                    case libs.object.isArguments(o) && typeof o.length !== 'undefined':\n                        return o.length - 1;\n\n                    case o && typeof o === 'object':\n                        return Object.keys(o).length;\n\n                    default:\n                        return 0;\n                }\n            },\n\n            /**\n             * Determines if an object can be converted to a number.\n             * @param {...Object} o The object to operate on.\n             * @returns {Boolean} True if the object is numeric, false otherwise.\n             * @function\n             */\n            isNumeric: function isNumeric () {\n                return libs.object.every(arguments, function (item) {\n                    return !isNaN(parseFloat(item)) && isFinite(item);\n                });\n            },\n\n            /**\n             * Converts an object to a number.\n             * @param {...Object} o The object to operate on.\n             * @returns {Number} The object as a number.\n             * @function\n             */\n            getNumeric: function getNumeric () {\n                var res = [], len = arguments.length;\n                libs.object.every(arguments, function (item) {\n                    res.push(!isNaN(parseFloat(item)) && isFinite(item));\n                });\n                return len === 1 ? res[0] : res;\n            },\n\n            /**\n             * Determines if an object has no keys, if an array has no items, or if a string === ''.\n             * @param {...Object} o The object to operate on.\n             * @returns {Boolean} True if the object is 'empty', false otherwise.\n             * @function\n             */\n            isEmpty: function isEmpty () {\n                return libs.object.every(arguments, function (item) {\n                    return libs.object.size(item) === 0 && item !== false && item !== '' && item !== true;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all arrays, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is an array, false otherwise.\n             */\n            isArray: function isArray () {\n                return libs.object.every(arguments, function (item) {\n                    return item instanceof Array;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all objects and not arrays, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is an object and not an array, false otherwise.\n             */\n            isPureObject: function isPureObject () {\n                return libs.object.every(arguments, function (item) {\n                    return !(item instanceof Array) && typeof item === 'object';\n                });\n            },\n\n            /**\n             * True if the objects passed in are all strings, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a string, false otherwise.\n             */\n            isString: function isString () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'string';\n                });\n            },\n\n            /**\n             * True if the objects passed in are all booleans, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a boolean, false otherwise.\n             */\n            isBoolean: function isBoolean () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'boolean';\n                });\n            },\n\n            /**\n             * True if the objects passed in are allfunction, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isFunction: function isFunction () {\n                return libs.object.every(arguments, function (item) {\n                    return typeof item === 'function';\n                });\n            },\n\n            /**\n             * True if the objects passed in are allll, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isNull: function isNull () {\n                return libs.object.every(arguments, function (item) {\n                    return item === null;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all undefined, false otherwise.\n             * @param {...Object} o The object to operate on.\n             * @return {Boolean} True if the object is a function, false otherwise.\n             */\n            isUndefined: function isUndefined () {\n                return libs.object.every(arguments, function (item) {\n                    return item === undefined;\n                });\n            },\n\n            /**\n             * True if the objects passed in are all arguments objects, false otherwise.\n             * @param {Object} o The object to operate on.\n             * @return {Boolean} True if the object is an arguments object, false otherwise\n             */\n            isArguments: function isArguments () {\n                return libs.object.every(arguments, function (item) {\n                    return Object.prototype.toString.call(item) === '[object Arguments]';\n                });\n            },\n\n            /**\n             * Convers an object to a number, if possible.\n             * @param {...Object} o The object to operate on.\n             * @returns {Number} The object as a float or NaN.\n             * @function\n             */\n            toNumber: function toNumber () {\n                var vals = [];\n                libs.object.every(arguments, function (o) {\n                    vals.push(libs.object.isNumeric(o) ? parseFloat(o) : NaN);\n                });\n                return vals.length === 1 ? vals[0] : vals;\n            },\n\n            /**\n             * Convers an object to an integer, if possible.\n             * @param {Object} o The object to operate on.\n             * @returns {Number} The object as an integer or NaN.\n             * @function\n             */\n            toInt: function toInt () {\n                var vals = [];\n                libs.object.every(arguments, function (o) {\n                    var radix = /^0x/.test(o) ? 16 : 10; // Check for hex string\n                    vals.push(libs.object.isNumeric(o) ? parseInt(o, radix) : NaN);\n                });\n                return vals.length === 1 ? vals[0] : vals;\n            },\n\n            /**\n             * Returns a random array item, random object property, random character in a string, or random digit in a number.\n             * @param {Object} o The object to operate on.\n             * @returns {*}\n             * @function\n             */\n            random: function random (o) {\n                if(typeof o === 'object') {\n                    return o instanceof Array ?\n                        o[Math.floor(Math.random() * o.length)] :\n                        o[Object.keys(o)[Math.floor(Math.random() * Object.keys(o).length)]];\n                }\n                else if(typeof o === 'string' || typeof o === 'number') {\n                    var val = o, negative = false;\n\n                    if(o.length === 0) return '';\n                    if(typeof o === 'number' && o < 0) {\n                        negative = true;\n                        val = Math.abs(val);\n                    }\n\n                    val = val.toString()[Math.floor(Math.random() * val.toString().length)];\n                    if(typeof o === 'number') val = parseInt(val, 10);\n                    return negative ? -val : val;\n                }\n                return o;\n            },\n\n            /**\n             * Invokes the callback 'f' for each property the object contains. If this is called\n             * on a number or function, the object will be cast to a string.<br><br>\n             * The callback `f` will be invoked with the following arguments:\n             * <ul>\n             * \t<li>value     - The value of the current object being iterated over</li>\n             * \t<li>key       - The key of the current object (if an object, the index if an array)</li>\n             * \t<li>iteration - The current iteration (same as key if a string or array)</li>\n             * \t<li>exit      - A function which will break the loop and return the values passed to it,\n             * \t\t\t\t\tor a single value if only a single value is passed.</li>\n             * </ul>\n             * @function\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [rangeA=0] The iteration start index\n             * @param {Number=} [rangeB='length of the item'] The iteration end index\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {*} The value passed to the exit parameter of the callback...\n             */\n            each: function each (o, rangeA, rangeB, f) {\n\n                // Can't use last here.. would cause circular ref...\n                f = undefined;\n                for(var k = arguments.length - 1; k >= 0; k--) {\n                    if(arguments[k] instanceof Function) {\n                        f = arguments[k];\n                        break;\n                    }\n                }\n\n                var ret    = null,\n                    broken = false,\n                    self   = o,\n                    keys, property, value,\n\n                    exit = function () {\n                        broken   = true;\n                        ret      = arguments.length > 1 ? libs.object.toArray(arguments) : arguments[0];\n                    };\n\n                if(f instanceof Function) {\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = getKeys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    rangeA = parseInt(rangeA);\n                    rangeA = (isNaN(rangeA) || !isFinite(rangeA)) ? 0 : rangeA;\n\n                    rangeB = parseInt(rangeB);\n                    rangeB = (isNaN(rangeB) || !isFinite(rangeB)) ? keys.length : rangeB;\n\n                    var i = 0, n;\n                    if(Math.abs(rangeA) > Math.abs(rangeB)) {\n                        if(rangeB < 0) rangeB = 0;\n                        if(rangeA < 0) rangeA = 0;\n                        if(rangeA > keys.length - 1) rangeA = keys.length - 1;\n\n                        for(n = rangeA; n >= rangeB; n--) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            f.call(o, value, property, n, exit, i++, o);\n                            if(broken) break;\n                        }\n                    }\n                    else {\n                        rangeB = rangeB + 1 > keys.length ? keys.length : rangeB + 1;\n                        if(rangeB < 0) rangeB = 0;\n                        if(rangeA < 0) rangeA = 0;\n\n                        for(n = rangeA; n < rangeB; n++) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            f.call(o, value, property, n, exit, i++, o);\n                            if(broken) break;\n                        }\n                    }\n                }\n                return ret;\n            },\n\n            /**\n             * Invokes the callback 'f' for every property the object contains. If the callback returns false, the\n             * loop is broken and false is returned; otherwise true is returned.\n             * @param {Object} o The object to operate on.\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {Boolean} True if none of the callback invocations returned false.\n             * @function\n             */\n            every: function every (o, f) {\n                f = f instanceof Function ? f : undefined;\n\n                if(f instanceof Function) {\n                    var self = o, keys, property, value;\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari...\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = getKeys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    var i = 0;\n                    for(var n = 0; n < keys.length; n++) {\n                        property = keys[n];\n                        value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                        if(f.call(o, value, property, n, i++, o) === false) return false;\n                    }\n                }\n                return true;\n            },\n\n            /**\n             * Invokes the callback 'f' for every property the object contains. If the callback returns true, the\n             * loop is broken and false is returned; otherwise true is returned.\n             * @param {Object} o The object to operate on.\n             * @param {Function} f The callback to invoke for each item within the object\n             * @returns {Boolean} True if none of the callback invocations returned false.\n             * @function\n             */\n            any: function any (o, f) {\n                f = f instanceof Function ? f : undefined;\n\n                if(f instanceof Function) {\n                    var self = o, keys, property, value;\n                    if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                    // Firefox does some funky stuff here...\n                    if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                    // For Safari...\n                    var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                    keys = getKeys(self);\n                    idx  = keys.indexOf('length');\n\n                    if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                    var i = 0;\n                    for(var n = 0; n < keys.length; n++) {\n                        property = keys[n];\n                        value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                        var ret = f.call(o, value, property, n, i++, o);\n                        if(ret !== undefined) return ret;\n                    }\n                }\n                return undefined;\n            },\n\n            /**\n             * Converts an object to an array. For strings, numbers, and functions this will\n             * return a char array to their respective .toString() values\n             * @param {Object} o The object to operate on.\n             * @function\n             * @return {Array<*>} The object, converted to an array.\n             */\n            toArray: function toArray (o) {\n                if(o instanceof Array) return libs.object.copy(o);\n                var arr = [];\n                libs.object.each(o, function (val) { arr.push(val); });\n                return arr;\n            },\n\n            /**\n             * Returns the first n elements of an object. If the object is an array, and only one items is retrieved,\n             * that item will be returned, rather than an array.\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [n=1] The number of elements to return\n             * @return {Array<*>} The first n elements of the array.\n             */\n            first: function first (o, n) {\n                n = parseInt(n, 10);\n                n = isNaN(n) || !isFinite(n) ? 1 : n;\n                var v = null;\n\n                if(typeof o === 'boolean') {\n                    return o;\n                }\n                else if(typeof o !== 'object') {\n                    if(n !== 0) v = o.toString().slice(0, n); else return null;\n                }\n                else if(o instanceof Array) {\n                    if(n === 1) return o[0];\n                    return n !== 0 ? o.slice(0, n) : [];\n                }\n                else {\n                    v = {};\n                    libs.object.each(o, 0, n - 1, function (item, key) { v[key] = item; });\n                    var keys = getKeys(v);\n                    return keys.length === 1 ? v[keys[0]] : v;\n                }\n                return v.length === 1 ? v[0] : v;\n            },\n\n            /**\n             * Returns the last n elements of an object. If the object is an array, and only one items is retrieved,\n             * that item will be returned rather than an array.\n             * @param {Object} o The object to operate on.\n             * @param {Number=} [n=1] The number of elements to return\n             * @return {Array<*>} The last n elements of the array.\n             * @function\n             */\n            last: function last (o, n) {\n                if(typeof o === 'boolean') return o;\n\n                n = parseInt(n, 10);\n                n = isNaN(n) || !isFinite(n) ? 1 : n;\n                var v = null, keys, len = libs.object.size(o), idx;\n\n                if(typeof o === 'boolean') {\n                    return o;\n                }\n                else if(libs.object.isArguments(o)) {\n                    keys = getKeys(o);\n                    idx  = keys.indexOf('length');\n\n                    if(idx > -1) keys.splice(idx, 1);\n                    v = []; len = keys.length;\n                    // Arguments object should ignore undefined members...\n                    libs.object.each(keys, 0, len, function (k) { if(o[k] !== undefined) v.unshift(o[k]); });\n                    v = v.slice(0, n);\n                }\n                else if(typeof o !== 'object') {\n                    if(n !== 0) v = o.toString().slice(-n); else return null;\n                }\n                else if(o instanceof Array) {\n                    if(n === 1) return o[o.length -1];\n                    return n !== 0 ? o.slice(-n) : [];\n                }\n                else {\n                    v = {};\n                    if(n < 0) n = 0;\n                    libs.object.each(o, len - n, len, function (item, key) { v[key] = item; });\n                    keys = getKeys(v);\n                    return keys.length === 1 ? v[keys[0]] : v;\n                }\n                return v.length === 1 ? v[0] : v.length > 0 ? v : null;\n            },\n\n            /**\n             * If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n             * Useful for ensuring that a callback can always be invoked, without checking if the argument is a function\n             * over and over.\n             * @param {Object} o The object to get the callback for.\n             * @return {Function} If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n             */\n            getCallback: function getCallback (o) {\n                var last = libs.object.last(o);\n                return last instanceof Function ? last : NULL_FUNCTION;\n            },\n\n            /**\n             * Find a child of an object using the given path, split by the given delimiter (or '.' by default)\n             * @param {Object} o The object to operate on.\n             * @param {String} path The path to the child object\n             * @param {String=} [delimiter='.'] The path delimiter\n             * @param {Function=} done A callback for completion\n             * @return {*|Null} The child object at the given string path, or null if it doesn't exist.\n             * @function\n             */\n            findChildAtPath: function findChildAtPath (o, path, delimiter, original, invoked, done) {\n                done = libs.object.getCallback(arguments);\n                var self = o;\n\n                original = (!(original instanceof Function) && original) ? original : self;\n                invoked  = invoked || false;\n\n                if(typeof o === 'object' && typeof path === 'string') {\n                    delimiter = typeof delimiter === 'string' ? delimiter : '.';\n                    path      = path.split(delimiter);\n\n                    var p = path.shift();\n                    if(p) {\n                        return libs.object.each(o, function (o, k, i, exit) {\n                            if(path.length === 0 && k === p) {\n                                done.call(original, o, self, k);\n                                invoked = true;\n                                exit(o);\n                            }\n                            else {\n                                var obj = libs.object.findChildAtPath(o, path.join(delimiter), delimiter, original, invoked, done);\n                                if(obj !== null) exit(obj);\n                            }\n                        });\n                    }\n                }\n                if(!invoked && original === self && done instanceof Function) done.call(original, null, self, null);\n                return null;\n            },\n\n            /**\n             * Produces a shallow clone of the object, that is, if JSON.stringify can handle it.<br>\n             * The object must be non-circular.\n             * @param {Object} o The object to operate on.\n             * @return {*} A shallow clone of the object.\n             * @function\n             */\n            clone: function clone (o) {\n                if(typeof o === 'string' || typeof o === 'number') return o;\n\n                try {\n                    return JSON.parse(JSON.stringify(o));\n                }\n                catch (e) {\n                    throw new Error('Unable to clone object: ' + e.message);\n                }\n            },\n\n            /**\n             * Filters an array or object using only the types allowed. That is, if the item in the array is of a type listed\n             * in the arguments, then it will be added to the filtered array. In this case 'array' is a valid type.\n             * @param {Object} o The object to operate on.\n             * @param {...String} types A list of typeof types that are allowed in the array.\n             * @return {Array<*>} An array filtered by only the allowed types.\n             */\n            only: function only (o, types) {\n                types = libs.object.toArray(arguments);\n                types.shift();\n\n                // Allows the 'plural' form of the type...\n                libs.object.each(types, function (type, key) { this[key] = type.replace(/s$/, ''); });\n\n                if(typeof o !== 'object' || !o) return o;\n                var isArray  = o instanceof Array ? true : false,\n                    filtered = isArray ? [] : {},\n                    typeArr  = types.indexOf('array'),\n                    typeObj  = types.indexOf('object object');\n\n                libs.object.each(o, function (item, key) {\n                    var typeItem = types.indexOf(typeof item);\n\n                    if(typeObj !== -1 && typeArr === -1) {\n                        if((typeof item === 'object' && !(item instanceof Array)) || (typeof item !== 'object' && typeItem !== -1)) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    }\n                    else if(typeObj !== -1 && typeArr !== -1) {\n                        types.push('object');\n                        if(typeItem !== -1) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    }\n                    else if(typeItem !== -1 || (item instanceof Array && typeArr !== -1)) {\n                        if(isArray) filtered.push(item); else filtered[key] = item;\n                    }\n                });\n                return filtered;\n            },\n\n            /**\n             * Filters an object using the given predicate function. For objects, a new object will be returned, with\n             * the values that passed the predicate function. For strings, a new string will be returned with the characters\n             * that passed the predicate function. For numbers, a new number will be returned with the digits that passed\n             * the predicate function. Functions will be operated on as strings.\n             * @param {Object} o The object to operate on.\n             * @param {Function} predicate The function used to filter the object.\n             * @return {*} The filtered object\n             */\n            where: function where (o, predicate) {\n                if(!(predicate instanceof Function)) {\n                    var temp = predicate;\n                    predicate = function (i) { return i == temp; };\n                }\n\n                if(o === null || o === undefined) return o;\n                if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                    filtered = !isObject ? [] : {};\n\n                libs.object.each(o, function (item, key) {\n                    if(predicate.call(item, item, key)) {\n                        if(isObject) filtered[key] = item; else filtered.push(item);\n                    }\n                });\n\n                if(typeof o !== 'object') filtered = filtered.join('');\n                return filtered;\n            },\n\n            /**\n             * Filters an object by keys using the given predicate function.\n             * @param {Object} o The object to operate on.\n             * @param {Function} predicate The function used to filter the object.\n             * @return {*} The filtered object\n             */\n            whereKeys: function whereKeys (o, predicate) {\n                if(!(predicate instanceof Function)) {\n                    var temp = predicate;\n                    predicate = function (k) { return k == temp; };\n                }\n\n                if(o === null || o === undefined) return o;\n                if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                    filtered = !isObject ? [] : {};\n\n                libs.object.each(o, function (item, key) {\n                    if(predicate.call(key, key, item)) {\n                        if(isObject) filtered[key] = item; else filtered.push(item);\n                    }\n                });\n\n                if(typeof o !== 'object') filtered = filtered.join('');\n                return filtered;\n            },\n\n            /**\n             * For objects, inverts the objects keys/values. If the value isn't a number or array, it will be omitted.\n             * For strings, it will reverse the string.\n             * For number, it will compute the number's inverse (i.e. 1 / x).\n             * For functions, invert returns a new function that wraps the given function and inverts it's result.\n             * @param {Object} o The object to operate on.\n             * @return {*} The inverse, as described above.\n             */\n            invert: function invert (o) {\n                if(o === null || o === undefined) return o;\n                if(typeof o === 'string')   return libs.string.reverse(o);\n                if(typeof o === 'number')   return 1 / o;\n                if(typeof o === 'boolean')  return !o;\n\n                if(typeof o === 'function') {\n                    return function () { return libs.object.invert(o.apply(o, arguments)); };\n                }\n\n                var obj = {};\n                libs.object.each(o, function (item, key) {\n                    if(typeof item === 'string' || typeof item === 'number') {\n                        if(!obj[item]) {\n                            obj[item] = key;\n                        }\n                        else {\n                            var tmp = obj[item];\n                            obj[item] = [];\n                            obj[item].push(tmp, key);\n                        }\n                    }\n                });\n\n                return obj;\n            },\n\n            /**\n             * Returns the maximum item in the object.\n             * @param {Object} o The object to operate on.\n             * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n             * @return {*} The maximum item in the object collection.\n             */\n            max: function max (o, func) {\n                if(!o || typeof o !== 'object') return o;\n                if(!(func instanceof Function)) func = undefined;\n                var max, maxValue;\n\n                if(!func) {\n                    max = libs.object.first(o);\n                    libs.object.each(o, 1, function (item) {\n                        if(item >= max) max = item;\n                    });\n                }\n                else {\n                    max = libs.object.first(o);\n                    maxValue = func.call(max, max);\n\n                    libs.object.each(o, 1, function (item) {\n                        if(func.call(item, item) >= maxValue) max = item;\n                    });\n                }\n                return max;\n            },\n\n            /**\n             * Returns the minimum item in the object.\n             * @param {Object} o The object to operate on.\n             * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n             * @return {*} The minimum item in the object collection.\n             */\n            min: function min (o, func) {\n                if(!o || typeof o !== 'object') return o;\n                if(!(func instanceof Function)) func = undefined;\n\n                if(typeof o !== 'object') return o;\n                var min, minValue;\n\n                if(!func) {\n                    min = libs.object.first(o);\n                    libs.object.each(o, 1, function (item) {\n                        if(item <= min) min = item;\n                    });\n                }\n                else {\n                    min = libs.object.first(o);\n                    minValue = func.call(min, min);\n\n                    libs.object.each(o, 1, function (item) {\n                        if(func.call(item, item) <= minValue) min = item;\n                    });\n                }\n                return min;\n            },\n\n            /**\n             * Tests whether or not the object has a method called 'method'.\n             * @param {Object} o The object to operate on.\n             * @param {String} method The name of the method to test existence for.\n             * @return {Boolean} True if the object has a function called 'method', false otherwise.\n             */\n            implements: function _implements () {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift();\n\n                if(!a) return false;\n                return libs.object.every(args, function (m) {\n                    if(!(a[m] instanceof Function)) return false;\n                });\n            },\n\n            /**\n             * Same as Object.j.implements, excepct with a hasOwnProperty check.\n             * @param {Object} o The object to operate on.\n             * @param {String} method The name of the method to test existence for.\n             * @return {Boolean} True if the object has its own function called 'method', false otherwise.\n             */\n            implementsOwn: function implementsOwn (o, method) {\n                var args = libs.object.toArray(arguments),\n                    a    = args.shift();\n\n                if(!a) return false;\n                return libs.object.every(args, function (m) {\n                    if(!(a[m] instanceof Function) || !o.hasOwnProperty(method)) return false;\n                });\n            }\n        }\n    };\n\n    return libs;\n}\n\n(function () {\n    'use strict';\n    module.exports = libs;\n}());\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n"],"sourceRoot":"/source/"}