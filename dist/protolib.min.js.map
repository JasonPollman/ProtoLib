{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index","protolib.js","lib/libp.js","lib/libs.js","node_modules/os-browserify/browser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","oid","IS_BROWSER","window","Protolibs","Object","defineProperty","prototype","configurable","enumerable","get","this","__protolib_id__","enumberable","writable","value","toString","_objectUid","__get_protolib_id__","_numberUid","Number","_stringUid","String","_arrayUid","Array","_functionUid","Function","_dateUid","Date","_errorUid","_booleanUid","Boolean","_mathUid","Math","_regexpUid","RegExp","ProtoLib","handle","deleteCacheForConstructor","constr","inheritanceChain","hasOwnProperty","indexOf","cached","self","attachLibraryToSelf","libs","getProto","getPrototypeOf","__proto__","constructor","applyLibraryToPrototypes","attached","set","v","ccId","proto","cId","lib","last","currentThis","libp","m","unshift","__protolib_cId__","removeLibraryFromPrototypes","getThisValueAndInvoke","callback","undefined","valueOf","object","string","number","array","date","error","math","regexp","my","setHandle","h","unload","load","extend","name","staticNamespace","getCallback","arguments","constructorId","constructorName","staticVersion","apply","args","toArray","c","remove","uid","__protolib_static_namespace__","killCache","destroy","./lib/libp","./lib/libs",2,"camelize","decamelize","differenceFromString","other","replaceTokens","replaceStringTokens","intersectString","repeat","times","rtrim","what","ltrim","htmlEncode","htmlDecode","addSlashes","ucFirst","lcFirst","titleCase","splice","index","count","add","ellipses","place","shuffle","splitter","reverse","withoutTrailingSlash","withTrailingSlash","regexpSafe","pad","delim","pre","newlineToBreak","tabsToSpan","wordWrapToLength","width","padleft","padright","omitFirst","union","difference","intersect","without","rotate","direction","amount","rotateLeft","rotateRight","makeUnique","unique","ascending","descending","to","k","isInt","randomIntInRange","randomNumberInRange","factorial","choose","daysFrom","daysFromNow","secondsFrom","secondsFromNow","yearsFrom","yearsFromNow","monthsFrom","monthsFromNow","hoursFrom","hoursFromNow","minutesFrom","minutesFromNow","monthsAgo","daysAgo","secondsAgo","minutesAgo","yearsAgo","clockTime","function","inherits","uniqueId","histogram","copy","each","start","end","occurrencesOf","keys","size","isNumeric","getNumeric","isEmpty","isArray","isPureObject","isString","isUndefined","isNull","isBoolean","isFunction","isArguments","toNumber","toInt","random","every","any","first","findChildAtPath","path","delimiter","done","clone","only","where","predicateFunction","whereKeys","invert","max","min","implements","method","implementsOwn","advanceDays","adjustForWeeked","d","advanceMonths","advanceYears","yymmdd","omitMS","boolean",3,"fixFirefoxFunctionString","replace","getKeys","push","HAS_OS","setPrototypeOf","obj","p","NULL_FUNCTION","ret","split","join","$","toLowerCase","trim","sarr","oarr","differenceFromArray","generic","intersectArray","parseInt","isNaN","isFinite","os","map","&","<",">","\"","'","&amp;","&lt;","&gt;","&quot;","&#039;","charAt","toUpperCase","slice","arr","substring","substr","replaceSplits","j","floor","tmp","str","platform","thisLength","paddingLeft","cols","item","len","olen","shift","daysInTheFuture","adjustForWeekend","setTime","getTime","getDay","monthsInTheFuture","yearsInTheFuture","yyyymmdd","dd","getDate","mm","getMonth","yyyy","getFullYear","MAX_VALUE","NaN","Infinity","setDate","setSeconds","getSeconds","setFullYear","setMonth","setHours","getHours","setMinutes","getMinutes","ms","secs","mins","hrs","superConstructor","TypeError","super_","arrays","simpleDiff","intermediate","intersection","idx","res","pop","visited","sort","b","val","exec","parseFloat","vals","radix","test","negative","abs","rangeA","rangeB","property","broken","exit","isArgs","key","original","invoked","JSON","parse","stringify","message","types","type","filtered","typeArr","typeObj","typeItem","predicate","temp","isObject","func","maxValue","minValue",4,"endianness","hostname","location","loadavg","uptime","freemem","totalmem","cpus","release","navigator","appVersion","networkInterfaces","getNetworkInterfaces","arch","tmpdir","tmpDir","EOL"],"mappings":"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","file":"protolib.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function () {\n    'use strict';\n\n    /**\n     * Function Identifier.\n     * @type {Number}\n     */\n    var oid = -1,\n\n     /**\n      * True if the Node.js environment is loaded, false otherwise.\n      * @type {Boolean}\n      */\n    IS_BROWSER = typeof window !== 'undefined',\n\n    /**\n     * Stores ProtoLib instances for Protolib.get\n     * @type {Object}\n     */\n    Protolibs = {};\n\n    // This provides a way to determine the \"id\" of a function constructor in an environment agnostic way...\n    // It also allows us to give objects a unique id...\n    Object.defineProperty(Object.prototype, '__get_protolib_id__', {\n        configurable : true,\n        enumerable   : false,\n        get          : function () {\n            if(!(typeof this === 'object' || typeof this === 'function'))\n                throw new Error('Cannot get unique id of literal type');\n\n            if(!this.__protolib_id__) {\n                Object.defineProperty(this, '__protolib_id__', {\n                    configurable : false,\n                    enumberable  : false,\n                    writable     : false,\n                    value        : '0x' + (++oid).toString(16)\n                });\n            }\n            return this.__protolib_id__;\n        }\n    });\n\n    var _objectUid   = Object.__get_protolib_id__,\n        _numberUid   = Number.__get_protolib_id__,\n        _stringUid   = String.__get_protolib_id__,\n        _arrayUid    = Array.__get_protolib_id__,\n        _functionUid = Function.__get_protolib_id__,\n        _dateUid     = Date.__get_protolib_id__,\n        _errorUid    = Error.__get_protolib_id__,\n        _booleanUid  = Boolean.__get_protolib_id__,\n        _mathUid     = Math.__get_protolib_id__,\n        _regexpUid   = RegExp.__get_protolib_id__;\n\n    var ProtoLib = function (handle) {\n        // Prevent Function.call or binding...\n        if(!(this instanceof ProtoLib)) return new ProtoLib(handle);\n\n        // Set either the user the default \"handle\" (library accessor)\n        handle = typeof handle === 'string' ? handle : '_';\n\n        /**\n         * A self reference.\n         * @type {ProtoLib}\n         */\n        var self = this,\n\n        /**\n         * Whether or not the library functions have been attached to the prototypes.\n         * @type {Boolean}\n         */\n        attached = false,\n\n        /**\n         * Points to the current this item.\n         * @type {*}\n         */\n        currentThis = null,\n\n        /**\n         * Stores cached library proto reference objects\n         * @type {Object}\n         */\n        cached = {},\n\n        /**\n         * Stores the constructor chain for each prototype as an array.\n         * For example: { string: ['object', 'string'] }.\n         * Another example: { myCustomClassThatExtendsString: ['object', 'string', 'myCustomClassThatExtendsString'] }\n         * @type {Object}\n         */\n        inheritanceChain = {},\n\n        /**\n         * The static library\n         */\n        libs = require('./lib/libs')(),\n\n        /**\n         * The protolibrary\n         */\n        libp = require('./lib/libp')(libs, getThisValueAndInvoke);\n\n        // Map the object ids to the library names...\n        libp[_objectUid]   = libp.object   || {};\n        libp[_stringUid]   = libp.string   || {};\n        libp[_numberUid]   = libp.number   || {};\n        libp[_arrayUid]    = libp.array    || {};\n        libp[_functionUid] = libp.function || {};\n        libp[_dateUid]     = libp.date     || {};\n        libp[_booleanUid]  = libp.boolean  || {};\n        libp[_errorUid]    = libp.error    || {};\n        libp[_mathUid]     = libp.math     || {};\n        libp[_regexpUid]   = libp.regexp   || {};\n\n        // Tuck unnamed static extensions here...\n        libs.my = {};\n\n        /**\n         * Deletes the cache for the given constructor, and all others that inherits from its prototype.\n         * Which means if constr === Object, all cache will be deleted.\n         * @param {Function} constr The constructor to delete the cache for.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function deleteCacheForConstructor (constr) {\n            for(var i in inheritanceChain) {\n                if(inheritanceChain.hasOwnProperty(i)) {\n                    if(inheritanceChain[i].indexOf(constr.__get_protolib_id__) > -1) {\n                        delete cached[i];\n                        delete inheritanceChain[i];\n                    }\n                }\n            }\n            return self;\n        }\n\n        /**\n         * Appends all the library functions to this instance for static use.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function attachLibraryToSelf () {\n            for(var i in libs)\n                if(libs.hasOwnProperty(i) && !self[i]) self[i] = libs[i];\n            return self;\n        }\n\n        function getProto (o) {\n            try {\n                return Object.getPrototypeOf(o);\n            }\n            catch (e) {\n                // IE throw when calling Object.getPrototypeOf on primitive values...\n                // But not with deprecated __proto__ ???\n                return o.__proto__ || o.constructor.prototype; // jshint ignore:line\n            }\n        }\n\n        /**\n         * Adds the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function applyLibraryToPrototypes () {\n            if(!attached) {\n                attached = true;\n                Object.defineProperty(Object.prototype, handle, {\n                    configurable : true,\n                    enumerable   : false,\n                    // Allow users to overwrite the handle on a per instance basis...\n                    set: function (v) {\n                        if(this[handle] !== v) {\n                            Object.defineProperty(this, handle, {\n                                configurable : true,\n                                enumerable   : true,\n                                writable     : true,\n                                value        : v\n                            });\n                        }\n                    },\n                    // Returns the libp library...\n                    get: function () {\n                        var ccId,\n                            proto = getProto(this),\n                            cId   = proto.constructor.__get_protolib_id__,\n                            lib   = {},\n                            i     = 0,\n                            last  = null;\n\n                        currentThis = this;\n\n                        do {\n                            ccId = proto.constructor.__get_protolib_id__;\n                            if(cached[ccId] && i === 0) {\n                                return cached[ccId];\n                            }\n                            else {\n                                if(!libp[ccId]) libp[ccId] = {};\n                                for(var m in libp[ccId])\n                                    if(libp[ccId].hasOwnProperty(m)) lib[m] = libp[ccId][m];\n\n                                if(!inheritanceChain[ccId]) inheritanceChain[ccId] = [];\n                                inheritanceChain[cId].unshift(ccId);\n\n                                cached[cId] = lib;\n                                last = ccId;\n                            }\n\n                            ++i;\n                        }\n                        while (proto = getProto(proto)); // jshint ignore:line\n\n                        lib.__protolib_cId__ = cId;\n                        return lib;\n                    }\n                });\n            }\n            return self;\n        }\n\n        /**\n         * Removes the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function removeLibraryFromPrototypes () {\n            if(attached) {\n                delete Object.prototype[handle];\n                attached = false;\n            }\n            return self;\n        }\n\n        /**\n         * Retrieves the last item from the 'thisPointerStack' and invokes the provided callback with it.\n         * @param {Function} callback The callback to be invoked with the current 'this' value.\n         * @return The result of the invocation of the callback.\n         */\n        function getThisValueAndInvoke (callback) {\n            return callback(currentThis !== undefined && currentThis !== null ? currentThis.valueOf() : currentThis);\n        }\n\n        /**\n         * Sets the handle\n         * @param {String} h The new handle\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.setHandle = function (h) {\n            self.unload();\n            if(typeof h === 'string') handle = h;\n            self.load();\n            return self;\n        };\n\n        /**\n         * Adds a library method to a prototype.\n         * @param {Function=} [constr=Object] The constructor of the object to extend.\n         * @param {String} name The name of the library method to add.\n         * @param {Function} callback The method to add.\n         * @return {Boolean} True if the method was added, false otherwise.\n         */\n        this.extend = function (constr, name, staticNamespace, callback) {\n            callback = libs.object.getCallback(arguments);\n\n            if(typeof constr === 'string') {\n                name = constr;\n                constr = undefined;\n            }\n\n            if(typeof name !== 'string'     || !(callback instanceof Function)) return false;\n            if(typeof constr !== 'function' || constr === callback) constr = Object;\n\n            var constructorId   = constr.__get_protolib_id__,\n                constructorName = typeof staticNamespace === 'string' ?\n                    staticNamespace : typeof constr.name === 'string' ? constr.name : null;\n\n            switch(true) {\n                case constr === Object:\n                    constructorName = 'object';\n                    break;\n\n                case constr === Array:\n                    constructorName = 'array';\n                    break;\n\n                case constr === String:\n                    constructorName = 'string';\n                    break;\n\n                case constr === Number:\n                    constructorName = 'number';\n                    break;\n\n                case constr === Function:\n                    constructorName = 'function';\n                    break;\n\n                case constr === Date:\n                    constructorName = 'date';\n                    break;\n            }\n\n            if(!libp[constructorId])   libp[constructorId]   = {};\n            if(!libs[constructorName]) libs[constructorName] = {};\n\n            // Add static version..\n            var staticVersion = function (o) { return callback.apply(o, arguments); };\n            if(constructorName) {\n\n                // Set this property so we can remove it later if ProtoLib.remove is called on it...\n                Object.defineProperty(constr, '__protolib_static_namespace__', {\n                    configurable : true,\n                    writable     : true,\n                    enumerable   : false,\n                    value        : constructorName\n                });\n\n                libs[constructorName][name] = staticVersion;\n            }\n\n            // We always add extended functions to libs.my\n            libs.my[name] = staticVersion;\n\n            // Add instance version...\n            libp[constructorId][name]   = function () {\n                var args = libs.object.toArray(arguments);\n                return getThisValueAndInvoke(function (c) {\n                    args.unshift(c);\n                    return callback.apply(c, args);\n                });\n            };\n\n            deleteCacheForConstructor(constr);\n            return true;\n        };\n\n        /**\n         * Removes a library method from a constructor's prototype.\n         * @param {Function} constr The constructor to remove the method from.\n         * @param {String} name The name of the library method to remove.\n         * @return {Boolean} True if the method was removed, false otherwise.\n         */\n        this.remove = function (constr, name) {\n            if(typeof name !== 'string' || typeof constr !== 'function') return false;\n\n            var uid = constr.__get_protolib_id__;\n            if(libp[uid] && libp[uid][name]) {\n                delete libp[uid][name];\n\n                // Remove from static namespace, if added there...\n                if(libs[constr.__protolib_static_namespace__] && libs[constr.__protolib_static_namespace__][name])\n                    delete libs[constr.__protolib_static_namespace__][name];\n\n                // Remove from libs.my\n                if(libs.my[name]) delete libs.my[name];\n\n                deleteCacheForConstructor(constr);\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Removes the prototype library reference from the object prototype.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.unload = function () {\n            removeLibraryFromPrototypes();\n            delete ProtoLib[handle];\n            return self;\n        };\n\n        /**\n         * Applies the library to the object prototype and all static functions\n         * to the current ProtoLib instance.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.load = function () {\n            applyLibraryToPrototypes();\n            attachLibraryToSelf();\n            return self;\n        };\n\n        /**\n         * Delets the library cache\n         * @return {ProtoLib} The current ProtoLib instance.\n         */\n        this.killCache = function () {\n            cached = {};\n            inheritanceChain = {};\n            return self;\n        };\n\n        // Apply the library to the object prototype, and attach all the static functions\n        // to the current ProtoLib instance...\n        self.load();\n\n        // Add this instance to the Protolib \"container\"\n        Protolibs[handle] = self;\n    };\n\n    /**\n     * Gets a ProtoLib library by handle, or, an instance with the given handle doesn't exist, creates one.\n     * @param {String=} [handle='_'] The handle for the instance to get or create.\n     * @return {ProtoLib} The new (or retrieved) ProtoLib instance.\n     */\n    ProtoLib.get = function get (handle) {\n        handle = typeof handle === 'string' ? handle : '_';\n        return Protolibs[handle] || new ProtoLib(handle);\n    };\n\n    /**\n     * Deletes the cache for the Protolib instance with the given handle. If no handle is specified,\n     * the cache for all instances will be deleted.\n     * @param {String=} handle The handle of the instance to delete\n     * @return {Function} The ProtoLib constructor\n     */\n    ProtoLib.killCache = function killCache (handle) {\n        if(Protolibs[handle] instanceof ProtoLib) {\n            Protolibs[handle].killCache();\n        }\n        else if(!handle) {\n            for(var n in Protolibs) {\n                if(Protolibs.hasOwnProperty(n)) Protolibs[n].killCache();\n            }\n        }\n        return ProtoLib;\n    };\n\n    /**\n     * Removes the library methods from Object[handle] and releases the ProtoLib instance for garbage collection (if\n     * it's not references elsewhere).\n     * @param {String=} [handle='_'] The handle of the ProtoLib instance to\n     * @return {Function} The ProtoLib constructor\n     */\n    ProtoLib.destroy = function destroy (handle) {\n        handle = typeof handle === 'string' ? handle : '_';\n        if(typeof Protolibs[handle] === 'object') {\n            Protolibs[handle].unload();\n            delete Protolibs[handle];\n        }\n        return ProtoLib;\n    };\n\n    return !IS_BROWSER ?\n        module.exports  = ProtoLib :\n        window.ProtoLib = ProtoLib ;\n}());\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function () {\n    'use strict';\n\n    /**\n     * Function Identifier.\n     * @type {Number}\n     */\n    var oid = -1,\n\n     /**\n      * True if the Node.js environment is loaded, false otherwise.\n      * @type {Boolean}\n      */\n    IS_BROWSER = typeof window !== 'undefined',\n\n    /**\n     * Stores ProtoLib instances for Protolib.get\n     * @type {Object}\n     */\n    Protolibs = {};\n\n    // This provides a way to determine the \"id\" of a function constructor in an environment agnostic way...\n    // It also allows us to give objects a unique id...\n    Object.defineProperty(Object.prototype, '__get_protolib_id__', {\n        configurable : true,\n        enumerable   : false,\n        get          : function () {\n            if(!(typeof this === 'object' || typeof this === 'function'))\n                throw new Error('Cannot get unique id of literal type');\n\n            if(!this.__protolib_id__) {\n                Object.defineProperty(this, '__protolib_id__', {\n                    configurable : false,\n                    enumberable  : false,\n                    writable     : false,\n                    value        : '0x' + (++oid).toString(16)\n                });\n            }\n            return this.__protolib_id__;\n        }\n    });\n\n    var _objectUid   = Object.__get_protolib_id__,\n        _numberUid   = Number.__get_protolib_id__,\n        _stringUid   = String.__get_protolib_id__,\n        _arrayUid    = Array.__get_protolib_id__,\n        _functionUid = Function.__get_protolib_id__,\n        _dateUid     = Date.__get_protolib_id__,\n        _errorUid    = Error.__get_protolib_id__,\n        _booleanUid  = Boolean.__get_protolib_id__,\n        _mathUid     = Math.__get_protolib_id__,\n        _regexpUid   = RegExp.__get_protolib_id__;\n\n    var ProtoLib = function (handle) {\n        // Prevent Function.call or binding...\n        if(!(this instanceof ProtoLib)) return new ProtoLib(handle);\n\n        // Set either the user the default \"handle\" (library accessor)\n        handle = typeof handle === 'string' ? handle : '_';\n\n        /**\n         * A self reference.\n         * @type {ProtoLib}\n         */\n        var self = this,\n\n        /**\n         * Whether or not the library functions have been attached to the prototypes.\n         * @type {Boolean}\n         */\n        attached = false,\n\n        /**\n         * Points to the current this item.\n         * @type {*}\n         */\n        currentThis = null,\n\n        /**\n         * Stores cached library proto reference objects\n         * @type {Object}\n         */\n        cached = {},\n\n        /**\n         * Stores the constructor chain for each prototype as an array.\n         * For example: { string: ['object', 'string'] }.\n         * Another example: { myCustomClassThatExtendsString: ['object', 'string', 'myCustomClassThatExtendsString'] }\n         * @type {Object}\n         */\n        inheritanceChain = {},\n\n        /**\n         * The static library\n         */\n        libs = require('./lib/libs')(),\n\n        /**\n         * The protolibrary\n         */\n        libp = require('./lib/libp')(libs, getThisValueAndInvoke);\n\n        // Map the object ids to the library names...\n        libp[_objectUid]   = libp.object   || {};\n        libp[_stringUid]   = libp.string   || {};\n        libp[_numberUid]   = libp.number   || {};\n        libp[_arrayUid]    = libp.array    || {};\n        libp[_functionUid] = libp.function || {};\n        libp[_dateUid]     = libp.date     || {};\n        libp[_booleanUid]  = libp.boolean  || {};\n        libp[_errorUid]    = libp.error    || {};\n        libp[_mathUid]     = libp.math     || {};\n        libp[_regexpUid]   = libp.regexp   || {};\n\n        // Tuck unnamed static extensions here...\n        libs.my = {};\n\n        /**\n         * Deletes the cache for the given constructor, and all others that inherits from its prototype.\n         * Which means if constr === Object, all cache will be deleted.\n         * @param {Function} constr The constructor to delete the cache for.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function deleteCacheForConstructor (constr) {\n            for(var i in inheritanceChain) {\n                if(inheritanceChain.hasOwnProperty(i)) {\n                    if(inheritanceChain[i].indexOf(constr.__get_protolib_id__) > -1) {\n                        delete cached[i];\n                        delete inheritanceChain[i];\n                    }\n                }\n            }\n            return self;\n        }\n\n        /**\n         * Appends all the library functions to this instance for static use.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function attachLibraryToSelf () {\n            for(var i in libs)\n                if(libs.hasOwnProperty(i) && !self[i]) self[i] = libs[i];\n            return self;\n        }\n\n        function getProto (o) {\n            try {\n                return Object.getPrototypeOf(o);\n            }\n            catch (e) {\n                // IE throw when calling Object.getPrototypeOf on primitive values...\n                // But not with deprecated __proto__ ???\n                return o.__proto__ || o.constructor.prototype; // jshint ignore:line\n            }\n        }\n\n        /**\n         * Adds the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function applyLibraryToPrototypes () {\n            if(!attached) {\n                attached = true;\n                Object.defineProperty(Object.prototype, handle, {\n                    configurable : true,\n                    enumerable   : false,\n                    // Allow users to overwrite the handle on a per instance basis...\n                    set: function (v) {\n                        if(this[handle] !== v) {\n                            Object.defineProperty(this, handle, {\n                                configurable : true,\n                                enumerable   : true,\n                                writable     : true,\n                                value        : v\n                            });\n                        }\n                    },\n                    // Returns the libp library...\n                    get: function () {\n                        var ccId,\n                            proto = getProto(this),\n                            cId   = proto.constructor.__get_protolib_id__,\n                            lib   = {},\n                            i     = 0,\n                            last  = null;\n\n                        currentThis = this;\n\n                        do {\n                            ccId = proto.constructor.__get_protolib_id__;\n                            if(cached[ccId] && i === 0) {\n                                return cached[ccId];\n                            }\n                            else {\n                                if(!libp[ccId]) libp[ccId] = {};\n                                for(var m in libp[ccId])\n                                    if(libp[ccId].hasOwnProperty(m)) lib[m] = libp[ccId][m];\n\n                                if(!inheritanceChain[ccId]) inheritanceChain[ccId] = [];\n                                inheritanceChain[cId].unshift(ccId);\n\n                                cached[cId] = lib;\n                                last = ccId;\n                            }\n\n                            ++i;\n                        }\n                        while (proto = getProto(proto)); // jshint ignore:line\n\n                        lib.__protolib_cId__ = cId;\n                        return lib;\n                    }\n                });\n            }\n            return self;\n        }\n\n        /**\n         * Removes the library methods from the primitive object prototypes.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        function removeLibraryFromPrototypes () {\n            if(attached) {\n                delete Object.prototype[handle];\n                attached = false;\n            }\n            return self;\n        }\n\n        /**\n         * Retrieves the last item from the 'thisPointerStack' and invokes the provided callback with it.\n         * @param {Function} callback The callback to be invoked with the current 'this' value.\n         * @return The result of the invocation of the callback.\n         */\n        function getThisValueAndInvoke (callback) {\n            return callback(currentThis !== undefined && currentThis !== null ? currentThis.valueOf() : currentThis);\n        }\n\n        /**\n         * Sets the handle\n         * @param {String} h The new handle\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.setHandle = function (h) {\n            self.unload();\n            if(typeof h === 'string') handle = h;\n            self.load();\n            return self;\n        };\n\n        /**\n         * Adds a library method to a prototype.\n         * @param {Function=} [constr=Object] The constructor of the object to extend.\n         * @param {String} name The name of the library method to add.\n         * @param {Function} callback The method to add.\n         * @return {Boolean} True if the method was added, false otherwise.\n         */\n        this.extend = function (constr, name, staticNamespace, callback) {\n            callback = libs.object.getCallback(arguments);\n\n            if(typeof constr === 'string') {\n                name = constr;\n                constr = undefined;\n            }\n\n            if(typeof name !== 'string'     || !(callback instanceof Function)) return false;\n            if(typeof constr !== 'function' || constr === callback) constr = Object;\n\n            var constructorId   = constr.__get_protolib_id__,\n                constructorName = typeof staticNamespace === 'string' ?\n                    staticNamespace : typeof constr.name === 'string' ? constr.name : null;\n\n            switch(true) {\n                case constr === Object:\n                    constructorName = 'object';\n                    break;\n\n                case constr === Array:\n                    constructorName = 'array';\n                    break;\n\n                case constr === String:\n                    constructorName = 'string';\n                    break;\n\n                case constr === Number:\n                    constructorName = 'number';\n                    break;\n\n                case constr === Function:\n                    constructorName = 'function';\n                    break;\n\n                case constr === Date:\n                    constructorName = 'date';\n                    break;\n            }\n\n            if(!libp[constructorId])   libp[constructorId]   = {};\n            if(!libs[constructorName]) libs[constructorName] = {};\n\n            // Add static version..\n            var staticVersion = function (o) { return callback.apply(o, arguments); };\n            if(constructorName) {\n\n                // Set this property so we can remove it later if ProtoLib.remove is called on it...\n                Object.defineProperty(constr, '__protolib_static_namespace__', {\n                    configurable : true,\n                    writable     : true,\n                    enumerable   : false,\n                    value        : constructorName\n                });\n\n                libs[constructorName][name] = staticVersion;\n            }\n\n            // We always add extended functions to libs.my\n            libs.my[name] = staticVersion;\n\n            // Add instance version...\n            libp[constructorId][name]   = function () {\n                var args = libs.object.toArray(arguments);\n                return getThisValueAndInvoke(function (c) {\n                    args.unshift(c);\n                    return callback.apply(c, args);\n                });\n            };\n\n            deleteCacheForConstructor(constr);\n            return true;\n        };\n\n        /**\n         * Removes a library method from a constructor's prototype.\n         * @param {Function} constr The constructor to remove the method from.\n         * @param {String} name The name of the library method to remove.\n         * @return {Boolean} True if the method was removed, false otherwise.\n         */\n        this.remove = function (constr, name) {\n            if(typeof name !== 'string' || typeof constr !== 'function') return false;\n\n            var uid = constr.__get_protolib_id__;\n            if(libp[uid] && libp[uid][name]) {\n                delete libp[uid][name];\n\n                // Remove from static namespace, if added there...\n                if(libs[constr.__protolib_static_namespace__] && libs[constr.__protolib_static_namespace__][name])\n                    delete libs[constr.__protolib_static_namespace__][name];\n\n                // Remove from libs.my\n                if(libs.my[name]) delete libs.my[name];\n\n                deleteCacheForConstructor(constr);\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * Removes the prototype library reference from the object prototype.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.unload = function () {\n            removeLibraryFromPrototypes();\n            delete ProtoLib[handle];\n            return self;\n        };\n\n        /**\n         * Applies the library to the object prototype and all static functions\n         * to the current ProtoLib instance.\n         * @return {ProtoLib} The current ProtoLib instance\n         */\n        this.load = function () {\n            applyLibraryToPrototypes();\n            attachLibraryToSelf();\n            return self;\n        };\n\n        /**\n         * Delets the library cache\n         * @return {ProtoLib} The current ProtoLib instance.\n         */\n        this.killCache = function () {\n            cached = {};\n            inheritanceChain = {};\n            return self;\n        };\n\n        // Apply the library to the object prototype, and attach all the static functions\n        // to the current ProtoLib instance...\n        self.load();\n\n        // Add this instance to the Protolib \"container\"\n        Protolibs[handle] = self;\n    };\n\n    /**\n     * Gets a ProtoLib library by handle, or, an instance with the given handle doesn't exist, creates one.\n     * @param {String=} [handle='_'] The handle for the instance to get or create.\n     * @return {ProtoLib} The new (or retrieved) ProtoLib instance.\n     */\n    ProtoLib.get = function get (handle) {\n        handle = typeof handle === 'string' ? handle : '_';\n        return Protolibs[handle] || new ProtoLib(handle);\n    };\n\n    /**\n     * Deletes the cache for the Protolib instance with the given handle. If no handle is specified,\n     * the cache for all instances will be deleted.\n     * @param {String=} handle The handle of the instance to delete\n     * @return {Function} The ProtoLib constructor\n     */\n    ProtoLib.killCache = function killCache (handle) {\n        if(Protolibs[handle] instanceof ProtoLib) {\n            Protolibs[handle].killCache();\n        }\n        else if(!handle) {\n            for(var n in Protolibs) {\n                if(Protolibs.hasOwnProperty(n)) Protolibs[n].killCache();\n            }\n        }\n        return ProtoLib;\n    };\n\n    /**\n     * Removes the library methods from Object[handle] and releases the ProtoLib instance for garbage collection (if\n     * it's not references elsewhere).\n     * @param {String=} [handle='_'] The handle of the ProtoLib instance to\n     * @return {Function} The ProtoLib constructor\n     */\n    ProtoLib.destroy = function destroy (handle) {\n        handle = typeof handle === 'string' ? handle : '_';\n        if(typeof Protolibs[handle] === 'object') {\n            Protolibs[handle].unload();\n            delete Protolibs[handle];\n        }\n        return ProtoLib;\n    };\n\n    return !IS_BROWSER ?\n        module.exports  = ProtoLib :\n        window.ProtoLib = ProtoLib ;\n}());\n\n},{\"./lib/libp\":2,\"./lib/libs\":3}],2:[function(require,module,exports){\n(function () {\n    'use strict';\n    function libp (libs, getThisValueAndInvoke) {\n        var libp = {\n            string: {\n\n                camelize: function camelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.camelize(s);\n                    });\n                },\n\n                decamelize: function decamelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.decamelize(s);\n                    });\n                },\n\n                differenceFromString: function differenceFromString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.differenceFromString(s, other);\n                    });\n                },\n\n                replaceTokens: function replaceTokens () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.replaceStringTokens(s);\n                    });\n                },\n\n                intersectString: function intersectString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.intersectString(s, other);\n                    });\n                },\n\n                repeat: function repeat (times) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.repeat(s, times);\n                    });\n                },\n\n                rtrim: function rtrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.rtrim(s, what);\n                    });\n                },\n\n                ltrim: function ltrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ltrim(s, what);\n                    });\n                },\n\n                htmlEncode: function htmlEncode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlEncode(s);\n                    });\n                },\n\n                htmlDecode: function htmlDecode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlDecode(s);\n                    });\n                },\n\n                addSlashes: function addSlashes () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.addSlashes(s);\n                    });\n                },\n\n                ucFirst: function ucFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ucFirst(s);\n                    });\n                },\n\n                lcFirst: function lcFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.lcFirst(s);\n                    });\n                },\n\n                titleCase: function titleCase () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.titleCase(s);\n                    });\n                },\n\n                splice: function splice (index, count, add) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.splice(s, index, count, add);\n                    });\n                },\n\n                ellipses: function ellipses_ (length, place, ellipses) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ellipses(s, length, place, ellipses);\n                    });\n                },\n\n                shuffle: function shuffle (splitter) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.shuffle(s, splitter);\n                    });\n                },\n\n                reverse: function reverse () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.reverse(s);\n                    });\n                },\n\n                withoutTrailingSlash: function withoutTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withoutTrailingSlash(s);\n                    });\n                },\n\n                withTrailingSlash: function withTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withTrailingSlash(s);\n                    });\n                },\n\n                regexpSafe: function regexpSafe () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.regexpSafe(s);\n                    });\n                },\n\n                pad: function pad (length, delim, pre) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.pad(s, length, delim, pre);\n                    });\n                },\n\n                newlineToBreak: function newlineToBreak () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.newlineToBreak(s);\n                    });\n                },\n\n                tabsToSpan: function tabsToSpan () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.tabsToSpan(s);\n                    });\n                },\n\n                wordWrapToLength: function wordWrapToLength (width, padleft, padright, omitFirst) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.wordWrapToLength(s, width, padleft, padright, omitFirst);\n                    });\n                },\n            },\n\n            array: {\n                shuffle: function shuffle () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.shuffle(a);\n                    });\n                },\n\n                union: function union () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.union.apply(a, args);\n                    });\n                },\n\n                difference: function difference () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.difference.apply(a, args);\n                    });\n                },\n\n                intersect: function intersect () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.intersect.apply(a, args);\n                    });\n                },\n\n                without: function without () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.without.apply(a, args);\n                    });\n                },\n\n                rotate: function rotate (direction, amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotate(a, direction, amount);\n                    });\n                },\n\n                rotateLeft: function rotateLeft (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateLeft(a, amount);\n                    });\n                },\n\n                rotateRight: function rotateRight (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateRight(a, amount);\n                    });\n                },\n\n                makeUnique: function makeUnique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.makeUnique(a);\n                    });\n                },\n\n                unique: function unique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.unique(a);\n                    });\n                },\n\n                ascending: function ascending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.ascending(a);\n                    });\n                },\n\n                descending: function descending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.descending(a);\n                    });\n                }\n            },\n\n            number: {\n\n                to: function to_ (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        var isInt = false;\n                        if(n % 1 === 0 && n.toString().indexOf('.') === -1) isInt = true;\n                        return isInt ? libs.number.randomIntInRange(n, k) : libs.number.randomNumberInRange(n, k);\n                    });\n                },\n\n                isInt: function isInt () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.isInt(n);\n                    });\n                },\n\n                factorial: function factorial () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.factorial(n);\n                    });\n                },\n\n                choose: function choose (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.choose(n, k);\n                    });\n                },\n\n                pad: function pad (length) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.pad(n, length);\n                    });\n                },\n\n                daysFrom: function daysFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFrom(n, date);\n                    });\n                },\n\n                daysFromNow: function daysFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFromNow(n);\n                    });\n                },\n\n                secondsFrom: function secondsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFrom(n, date);\n                    });\n                },\n\n                secondsFromNow: function secondsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFromNow(n);\n                    });\n                },\n\n                yearsFrom: function yearsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFrom(n, date);\n                    });\n                },\n\n                yearsFromNow: function yearsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFromNow(n);\n                    });\n                },\n\n                monthsFrom: function monthsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFrom(n, date);\n                    });\n                },\n\n                monthsFromNow: function monthsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFromNow(n);\n                    });\n                },\n\n                hoursFrom: function hoursFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFrom(n, date);\n                    });\n                },\n\n                hoursFromNow: function hoursFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFromNow(n);\n                    });\n                },\n\n                minutesFrom: function minutesFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFrom(n, date);\n                    });\n                },\n\n                minutesFromNow: function minutesFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFromNow(n);\n                    });\n                },\n\n                monthsAgo: function monthsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsAgo(n);\n                    });\n                },\n\n                daysAgo: function daysAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysAgo(n);\n                    });\n                },\n\n                secondsAgo: function secondsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsAgo(n);\n                    });\n                },\n\n                minutesAgo: function minutesAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesAgo(n);\n                    });\n                },\n\n                yearsAgo: function yearsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsAgo(n);\n                    });\n                },\n\n                clockTime: function clockTime () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.clockTime(n);\n                    });\n                }\n            },\n\n            function: {\n                inherits: function inherits (s) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.function.inherits(o, s);\n                    });\n                }\n            },\n\n            object: {\n                uniqueId: function uniqueId () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.uniqueId(o);\n                    });\n                },\n\n                histogram: function histogram () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.histogram(o);\n                    });\n                },\n\n                copy: function copy () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.copy(o);\n                    });\n                },\n\n                each: function each (start, end, callback) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.each(o, start, end, callback);\n                    });\n                },\n\n                occurrencesOf: function occurrencesOf (what) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.occurrencesOf(o, what);\n                    });\n                },\n\n                keys: function keys () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.keys(o);\n                    });\n                },\n\n                size: function size () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.size(o);\n                    });\n                },\n\n                isNumeric: function isNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNumeric(o);\n                    });\n                },\n\n                getNumeric: function getNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getNumeric(o);\n                    });\n                },\n\n                isEmpty: function isEmpty () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isEmpty(o);\n                    });\n                },\n\n                isArray: function isArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArray(o);\n                    });\n                },\n\n                isPureObject: function isPureObject () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isPureObject(o);\n                    });\n                },\n\n                isString: function isString () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isString(o);\n                    });\n                },\n\n                isUndefined: function isUndefined () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isUndefined(o);\n                    });\n                },\n\n                isNull: function isNull () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNull(o);\n                    });\n                },\n\n                isBoolean: function isBoolean () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isBoolean(o);\n                    });\n                },\n\n                isFunction: function isFunction () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isFunction(o);\n                    });\n                },\n\n                isArguments: function isArguments () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArguments(o);\n                    });\n                },\n\n                toNumber: function toNumber () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toNumber(o);\n                    });\n                },\n\n                toInt: function toInt () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toInt(o);\n                    });\n                },\n\n                toArray: function toArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toArray(o);\n                    });\n                },\n\n                getCallback: function getCallback () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getCallback(o);\n                    });\n                },\n\n                random: function random () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.random(o);\n                    });\n                },\n\n                every: function every (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.every(o, f);\n                    });\n                },\n\n                any: function any (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.any(o, f);\n                    });\n                },\n\n                first: function first (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.first(o, n);\n                    });\n                },\n\n                last: function last (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.last(o, n);\n                    });\n                },\n\n                findChildAtPath: function findChildAtPath (path, delimiter, done) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.findChildAtPath(o, path, delimiter, done);\n                    });\n                },\n\n                clone: function clone () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.clone(o);\n                    });\n                },\n\n                only: function only () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (o) {\n                        args.unshift(o);\n                        return libs.object.only.apply(o, args);\n                    });\n                },\n\n                where: function where (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.where(o, predicateFunction);\n                    });\n                },\n\n                whereKeys: function whereKeys (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.whereKeys(o, predicateFunction);\n                    });\n                },\n\n                invert: function invert () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.invert(o);\n                    });\n                },\n\n                max: function max (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.max(o, f);\n                    });\n                },\n\n                min: function min (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.min(o, f);\n                    });\n                },\n\n                implements: function _implements (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implements(o, method);\n                    });\n                },\n\n                implementsOwn: function implementsOwn (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implementsOwn(o, method);\n                    });\n                },\n            },\n\n            date: {\n                advanceDays: function advanceDays (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceDays(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceMonths: function advanceMonths (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceMonths(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceYears: function advanceYears (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceYears(d, n, adjustForWeeked);\n                    });\n                },\n\n                yymmdd: function yymmdd (delim) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.yymmdd(d, delim);\n                    });\n                },\n\n                clockTime: function clockTime (omitMS) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.clockTime(d, !!omitMS);\n                    });\n                },\n            },\n\n            error: {\n                /** @todo: Add some Error utility functions... */\n            },\n\n            boolean: {\n                /** @todo: Add some Boolean utility functions... */\n            },\n\n            math: {\n                /** @todo: Add some Math utility functions... */\n            },\n\n            regexp: {\n                /** @todo: Add some RegExp utility functions... */\n            }\n        };\n\n        return libp;\n    }\n    module.exports = libp;\n}());\n\n},{}],3:[function(require,module,exports){\n(function () {\n    'use strict';\n\n    function libs () {\n        var IS_BROWSER = typeof window !== 'undefined',\n            HAS_OS     = IS_BROWSER ? false : typeof require('os') === 'object';\n\n        // Polyfill Object.setPrototypeOf\n        Object.setPrototypeOf = Object.setPrototypeOf || function setPrototypeOfPolyfill (obj, proto) {\n            var p = obj.__proto__ || obj.constructor.prototype; // jshint ignore:line\n            p = proto;\n            return obj;\n        };\n\n        /**\n         * Alters Firefox's Function.toString() results to match Chrome/Safari.\n         * @param {String} s The string representation of the function.\n         * @return {String} The altered string, with newlines replaced and 'use strict' removed.\n         */\n        function fixFirefoxFunctionString (s) {\n            return s.replace(/(?:\\r)?\\n+/g, '').replace(/\"use strict\";|'use strict';/g, '');\n        }\n\n        /**\n         * IE doesn't allow Object.keys on primitive types...\n         * @return {Array<String|Number>}\n         */\n        function getKeys (o) {\n            switch(typeof o) {\n                case 'object':\n                    return o ? Object.keys(o) : [];\n\n                case 'string':\n                    var keys = [];\n                    for(var i = 0; i < o.length; i++) keys.push(i.toString());\n                    return keys;\n\n                default:\n                    return [];\n            }\n        }\n\n        var NULL_FUNCTION = function EMPTY_CALLBACK_REPLACEMENT () {};\n\n        var libs = {\n\n            /**\n             * String library functions\n             * @type {Object}\n             */\n            string: {\n\n                /**\n                 * Camelizes all of the provided string arguments.\n                 * @param {...String} string A list of strings to camelize.\n                 * @return {Array<String>} An array of the provided arguments, with all strings camelized.\n                 */\n                camelize: function camelize () {\n                    var ret = [];\n                    libs.object.every(arguments, function (s) {\n                        if(s) {\n                            if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                            s = s.toString().replace(/[^a-z0-9$]/gi, '_').replace(/\\$(\\w)/g, '$_$1').split(/[\\s_]+/g);\n                            libs.object.each(s, 1, s.length, function (i, k) {\n                                this[k] = libs.string.ucFirst(i);\n                            });\n                            s = libs.string.lcFirst(s.join(''));\n                        }\n                        ret.push(s);\n                    });\n                    return ret.length === 1 ? ret[0] : ret;\n                },\n\n                /**\n                 * Decamelizes all of the provided string arguments.\n                 * @param {...String} string A list of strings to decamelize.\n                 * @return {Array<String>} An array of the provided arguments, with all strings decamelized.\n                 */\n                decamelize: function decamelize () {\n                    var ret = [];\n                    libs.object.every(arguments, function (s) {\n                        if(s) {\n                            if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                            s = s.toString().replace(/([A-Z$])/g, function ($) {\n                                return ' ' + (typeof $ === 'string' ? $.toLowerCase() : '');\n                            });\n                        }\n                        ret.push(typeof s === 'string' ? s.trim() : s);\n                    });\n                    return ret.length === 1 ? ret[0] : ret;\n                },\n\n                /**\n                 * Returns all the characters found in one string but not the other.\n                 * @param {String} s The string to operate on.\n                 * @param {String} other The string to compute the difference against.\n                 * @return {String} A difference string.\n                 */\n                differenceFromString: function differenceFromString (s, other) {\n                    if(typeof other !== 'string' || typeof s !== 'string') return s;\n                    var sarr = s.split(''), oarr = other.split('');\n                    return libs.array.differenceFromArray(sarr, oarr).join('');\n                },\n\n                /**\n                 * Replaces tokens (snippets of text wrapped in brackets) with their values.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The token replaced values.\n                 */\n                replaceTokens: function replaceTokens (s) {\n                    return libs.generic.replaceStringTokens(s);\n                },\n\n                /**\n                 * Returns only the characters common to both strings\n                 * @param {String} s The string to operate on.\n                 * @param {String} other The string to compute the intersection against.\n                 * @return {String} The intersection between the two strings.\n                 */\n                intersectString: function intersectString (s, other) {\n                    if(typeof other !== 'string' || typeof s !== 'string') return s;\n                    var sarr = s.split(''), oarr = other.split('');\n                    return libs.intersectArray(sarr, oarr).join('');\n                },\n\n                /**\n                 * Repeat a string 'times' times.\n                 * @param {String} s The string to operate on.\n                 * @param {Number} times The number of times to repeat the string\n                 * @return {String} The repeated string.\n                 */\n                repeat: function repeat (s, times) {\n                    times = parseInt(times, 10);\n                    times = isNaN(times) || !isFinite(times) || times <= 0 ? 1 : times;\n\n                    var os = s;\n                    for(var i = 1; i < times; i++) s += os;\n                    return s;\n                },\n\n                /**\n                 * Right trims a string. Same as String.trim, but only for the end of a string.\n                 * @param {String} s The string to operate on.\n                 * @param {String} [what='\\\\s+'] What to trim.\n                 * @return {String} The right trimmed string\n                 */\n                rtrim: function rtrim (s, what) {\n                    what = typeof what === 'string' ? what : '\\\\s+';\n                    return s.replace(new RegExp(what + '$'), '');\n                },\n\n                /**\n                 * Left trims a string. Same as String.trim, but only for the beginning of a string.\n                 * @param {String} s The string to operate on.\n                 * @param {String} [what='\\\\s+'] What to trim.\n                 * @return {String} The left trimmed string\n                 */\n                ltrim: function ltrim (s, what) {\n                    what = typeof what === 'string' ? what : '\\\\s+';\n                    return s.replace(new RegExp('^' + what), '');\n                },\n\n                /**\n                 * Escapes HTML special characters\n                 * @param {String} s The string to operate on.\n                 * @return {String} The HTML escaped string\n                 */\n                htmlEncode: function htmlEncode (s) {\n                    var map = {\n                        '&'  : '&amp;',\n                        '<'  : '&lt;',\n                        '>'  : '&gt;',\n                        '\"'  : '&quot;',\n                        '\\'' : '&#039;'\n                    };\n                    return s.replace(/[&<>\"']/g, function (m) { return map[m]; });\n                },\n\n                /**\n                 * Un-escapes HTML special characters\n                 * @param {String} s The string to operate on.\n                 * @return {String} The HTML escaped string\n                 */\n                htmlDecode: function htmlDecode (s) {\n                    var map = {\n                        '&amp;'  : '&',\n                        '&lt;'   : '<',\n                        '&gt;'   : '>',\n                        '&quot;' : '\"',\n                        '&#039;' : '\\''\n                    };\n                    return s.replace(/(&amp;|&lt;|&gt;|&quot;|&#039;)/g, function (m) { return map[m]; });\n                },\n\n                /**\n                 * Creates an 'eval' safe string, by adding slashes to \", ', \\t, \\n, \\f, \\r, and the NULL byte.\n                 * @param {String} s The string to operate on.\n                 * @return {String} A string with slashes\n                 */\n                addSlashes: function addSlashes (s) {\n                    return s.replace(/[\\\\\"'\\t\\n\\f\\r]/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\n                },\n\n                /**\n                 * Returns a string with the first letter capitalized.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The string with the first letter upper cased.\n                 * @function\n                 */\n                ucFirst: function ucFirst (s) {\n                    return s.charAt(0).toUpperCase() + s.slice(1);\n                },\n\n                /**\n                 * Returns a string with the first letter lowercased.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The string with the first letter lower cased.\n                 * @function\n                 */\n                lcFirst: function lcFirst (s) {\n                    return s.charAt(0).toLowerCase() + s.slice(1);\n                },\n\n                /**\n                 * Returns a string in Title Case.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The title cased string.\n                 * @function\n                 */\n                titleCase: function titleCase (s) {\n                    var arr = [];\n                    libs.object.each(s.split(' '), function (t) { arr.push(libs.string.ucFirst(t)); });\n                    return arr.join(' ');\n                },\n\n                /**\n                 * Splices a string, much like an array.\n                 * @param {String} s The string to operate on.\n                 * @param {Number} index The index to begin splicing the string at\n                 * @param {Number} count The number of characters to delete\n                 * @param {String} add The string to append at the spliced section\n                 * @return {String} The spliced string.\n                 * @function\n                 */\n                splice: function splice (s, index, count, add) {\n                    return s.slice(0, index) + (add || '') + s.slice(index + count);\n                },\n\n                /**\n                 * Return a truncated string with ellipses.\n                 * @param {String} s The string to operate on.\n                 * @param {Number=} length The length of the desired string. If ommited, the strings original length will be used.\n                 * @param {String=} [place='back'] Possible values are 'front' and 'back'. Specifying 'front' will truncate the\n                 * string and add ellipses to the front, 'back' (or any other value) will add the ellipses to the back.\n                 * @param {String=} [ellipses='...'] The string value of the ellipses. Use this to add anything other than '...'\n                 * @returns {String} A truncated string with ellipses (if its length is greater than 'length')\n                 * @function\n                 */\n                ellipses: function ellipses_ (s, length, place, ellipses) {\n                    if(isNaN(parseInt(length, 10))) length = s.length;\n                    if(length < 0 || !isFinite(length)) length = 0;\n\n                    ellipses = typeof ellipses === 'string' ? ellipses : '...';\n                    if(s.length <= length) return s;\n\n                    if(length <= ellipses.length) {\n                        return ellipses.substring(0, length);\n                    }\n                    else if(!place || place !== 'front') {\n                        return s.substr(0, length - ellipses.length) + ellipses;\n                    }\n                    else {\n                        return ellipses + s.substr(0, length - ellipses.length);\n                    }\n                },\n\n                /**\n                 * Shuffles a string\n                 * @param {String} s The string to operate on.\n                 * @param {String} splitter A string used to split the string, to tokenize it before shuffling.\n                 * @return {String} The mixed up string.\n                 */\n                shuffle: function shuffle (s, splitter) {\n                    var a = s.split(typeof splitter === 'string' ? splitter : ''), n = a.length,\n                    replaceSplits = n - 1;\n\n                    for(var i = n - 1; i > 0; i--) {\n                        var j = Math.floor(Math.random() * (i + 1)),\n                            tmp = a[i];\n\n                        a[i] = a[j];\n                        a[j] = tmp;\n                    }\n\n                    for(var k = 0; k < replaceSplits; k++) a.splice(libs.number.randomIntInRange(0, a.length), 0, splitter);\n                    return a.join('');\n                },\n\n                /**\n                 * Reverses a string.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The reversed string.\n                 */\n                reverse: function reverse (s) {\n                    if(s.length < 64) {\n                        var str = '';\n                        for(var i = s.length; i >= 0; i--) str += s.charAt(i);\n                        return str;\n                    }\n                    else {\n                        return s.split('').reverse().join('');\n                    }\n                },\n\n                /**\n                 * Strips the trailing slashes from a string.\n                 * @param {String} s The string to operate on.\n                 * If using Node.js, it will replace the trailing slash based on the value of os.platform\n                 * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n                 * @returns {String} The string without a trailing slash.\n                 * @function\n                 */\n                withoutTrailingSlash: function withoutTrailingSlash (s) {\n                    if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return s.replace(/\\\\+$/, '');\n                    return s.replace(/\\/+$/, '');\n                },\n\n                /**\n                 * Add a trailing slash to a string, if it doesn't already have one.\n                 * If using Node.js, it will replace the trailing slash based on the value of os.platform\n                 * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n                 * @param {String} s The string to operate on.\n                 * @returns {String} The string without a trailing slash.\n                 * @function\n                 */\n                withTrailingSlash: function withTrailingSlash (s) {\n                    if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return libs.string.withoutTrailingSlash(s) + '\\\\';\n                    return libs.string.withoutTrailingSlash(s) + '/';\n                },\n\n                /**\n                 * Escapes regular expression special characters. This is useful is you wish to create a new regular expression\n                 * from a stored string value.\n                 * @param {String} s The string to operate on.\n                 * @returns {String} The regular expression safe string\n                 * @function\n                 */\n                regexpSafe: function regexpSafe (s) {\n                    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n                },\n\n                /**\n                 * Pads a string with 'delim' characters to the specified length. If the length is less than the string length,\n                 * the string will be truncated.\n                 * @param {String} s The string to operate on.\n                 * @param {Number} length The length to pad the string to. If less that the length of the string, the string will\n                 * be returned. If less than the length of the string, the string will be sliced.\n                 * @param {String=} [delim=' '] The character to pad the string with.\n                 * @param {Boolean=} [pre=false] If true, the padding will be added to the beginning of the string, otherwise the padding\n                 * will be added to the end.\n                 * @returns {String} The padded string\n                 * @function\n                 */\n                pad: function pad (s, length, delim, pre) {\n                    var i, thisLength = s.length;\n\n                    if(!delim) delim = ' ';\n                    if(length === 0) return ''; else if(isNaN(parseInt(length, 10))) return s;\n\n                    length = parseInt(length, 10);\n                    if(length < thisLength) return !pre ? s.slice(0, length) : s.slice(-length);\n\n                    if(pre) {\n                        for(i = 0; i < length - thisLength; i++) s = delim + s;\n                    }\n                    else {\n                        for(i = 0; i < length - thisLength; i++) s += delim;\n                    }\n                    return s;\n                },\n\n                /**\n                 * Replaces newlines with br tags.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The string with newlines converted to br tags.\n                 */\n                newlineToBreak: function newlineToBreak (s) {\n                    return s.replace(/(\\r\\n|\\n)/g, '<br>');\n                },\n\n                /**\n                 * Replaces tabs with a span element with the class 'tab'\n                 * @param {String} s The string to operate on.\n                 * @return {String} The string with tabs converted to spans with the class 'tab'\n                 */\n                tabsToSpan: function tabsToSpan (s) {\n                    return s.replace(/\\t/g, '<span class=\"tab\"></span>');\n                },\n\n                /**\n                 * Adjusts a string to fit within the confines of 'width', without breaking words.\n                 * @param {String} s The string to operate on.\n                 * @param {Number=} [length=120] The length to word wrap the string to.\n                 * @param {Number=} [padleft=0] The number of columns to pad the string on the left\n                 * @param {Number=} [padright=0] The number of columns to pad the string on the right\n                 * @param {Boolean=} omitFirst If true, the first line will not be padded left\n                 * @return {String} The string adjusted and padded for the stdout.\n                 * @function\n                 */\n                wordWrapToLength: function wordWrapToLength (s, width, padleft, padright, omitFirst) {\n                    if(padright === undefined && padleft) padright = padleft;\n\n                    padleft  = !isNaN(parseInt(padleft,  10)) ? parseInt(padleft, 10)  : 0;\n                    padright = !isNaN(parseInt(padright, 10)) ? parseInt(padright, 10) : 0;\n\n                    var paddingLeft = '';\n                    for(var n = 0; n < padleft;  n++) paddingLeft  += ' ';\n\n                    var cols   = !isNaN(parseInt(width, 10)) ? length : 120,\n                        arr    = s.split(' '),\n                        item   = null,\n                        len    = !omitFirst ? cols - padright - padleft : cols - padright,\n                        str    = !omitFirst ? paddingLeft : '',\n                        olen   = cols - padright - padleft;\n\n                    while((item = arr.shift()) !== undefined) {\n                        if(item.length < len) {\n                            str += item + ' ';\n                            len -= item.length + 1;\n                        }\n                        else if(item.length > olen) {\n                            str += item.substring(0, len - 1) + '-\\n' + paddingLeft;\n                            arr.unshift(item.substring(len, item.length - 1));\n                            len = cols - padright - padleft;\n                        }\n                        else {\n                            str += '\\n' + paddingLeft + item + ' ';\n                            len = cols - padright - 1 - padleft - item.length;\n                        }\n                    }\n                    return str;\n                }\n            },\n\n            /**\n             * Date library functions\n             * @type {Object}\n             */\n            date: {\n                /**\n                 * Moves a date forward 'daysInTheFuture' days.\n                 * @param {Date} The date object to operate on.\n                 * @param {Number} daysInTheFuture The number of days in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified days.\n                 * @function\n                 */\n                advanceDays: function advanceDays (d, daysInTheFuture, adjustForWeekend) {\n                    daysInTheFuture = daysInTheFuture && libs.generic.isNumeric(daysInTheFuture) ? daysInTheFuture : 1;\n                    d.setTime(d.getTime() + (daysInTheFuture * 86400000));\n\n                    if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                        while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                    }\n                    return d;\n                },\n\n                /**\n                 * Moves a date forward 'monthsInTheFuture' months.\n                 * @param {Date} The date object to operate on.\n                 * @param {Number} monthsInTheFuture The number of months in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified months.\n                 * @function\n                 */\n                advanceMonths: function advanceMonths (d, monthsInTheFuture, adjustForWeekend) {\n                    monthsInTheFuture = monthsInTheFuture && libs.generic.isNumeric(monthsInTheFuture) ? monthsInTheFuture : 1;\n                    d.setTime(d.getTime() + (monthsInTheFuture * 2629746000));\n\n                    if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                        while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                    }\n                    return d;\n                },\n\n                /**\n                 * Moves a date forward 'yearsInTheFuture' years.\n                 * @param {Date} The date object to operate on.\n                 * @param {Number} yearsInTheFuture The number of years in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified years.\n                 * @function\n                 */\n                advanceYears: function advanceYears (d, yearsInTheFuture, adjustForWeekend) {\n                    yearsInTheFuture = yearsInTheFuture && libs.generic.isNumeric(yearsInTheFuture) ? yearsInTheFuture : 1;\n                    d.setTime(d.getTime() + (yearsInTheFuture * 31536000000));\n\n                    if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                        while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                    }\n                    return d;\n                },\n\n                /**\n                 * Returns the date in the yyyy-mm-dd format.\n                 * @param {Date} The date object to operate on.\n                 * @param {String} [delim='-'] The delimiter to used the separate the date components (e.g. '-' or '.')\n                 * @returns {String} The date in the yyyy-mm-dd format.\n                 * @function\n                 */\n                yyyymmdd: function yyyymmdd (d, delim) {\n                    delim = typeof delim !== 'string' ? '-' : delim ;\n\n                    var dd   = d.getDate(),\n                        mm   = d.getMonth() + 1,\n                        yyyy = d.getFullYear();\n\n                    if(dd < 10) dd = '0' + dd;\n                    if(mm < 10) mm = '0' + mm;\n                    return yyyy + delim + mm + delim + dd;\n                },\n\n                /**\n                 * Converts a date to the HH:MM:SS.MSEC time format\n                 * @param {Date} The date object to operate on.\n                 * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n                 * @returns {String} The formatted number, now a string.\n                 * @function\n                 */\n                clockTime: function clockTime (d, omitMS) {\n                    return libs.number.clockTime(d.getTime(), !!omitMS);\n                }\n            },\n\n            /**\n             * Number library functions\n             * @type {Object}\n             */\n            number: {\n\n                /**\n                 * Returns a random integer in range [min, max] (inclusive)\n                 * @param {Number} min The minimum possible value (inclusive)\n                 * @param {Number} max The maximum possible value (inclusive)\n                 * @return {Number} A random number between min and max\n                 */\n                randomIntInRange: function (min, max) {\n                    min = parseInt(min, 10);\n                    max = parseInt(max, 10);\n\n                    if(isNaN(min) && !isFinite(min)) min = 0;\n                    if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                    return Math.floor(Math.random() * (max - min + 1)) + min;\n                },\n\n                /**\n                 * Returns a random float in range [min, max] (inclusive)\n                 * @param {Number} min The minimum possible value (inclusive)\n                 * @param {Number} max The maximum possible value (inclusive)\n                 * @return {Number} A random number between min and max\n                 */\n                randomNumberInRange: function (min, max) {\n                    min = parseInt(min, 10);\n                    max = parseInt(max, 10);\n\n                    if(isNaN(min) && !isFinite(min)) min = 0;\n                    if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                    return Math.random() * (max - min + 1) + min;\n                },\n\n                /**\n                 * Recursively computes the factorial of the number n.\n                 * @param {Number} n A number.\n                 * @return {Number|Infinity} n!\n                 */\n                factorial: function factorial (n) {\n                    if(typeof n !== 'number' || n < 0) return NaN;\n                    if(n > 170) return Infinity;\n                    if(n === 0 || n === 1) return 1;\n                    return n * factorial(n - 1);\n                },\n\n                /**\n                 * Determines is the given numbers are integers\n                 * @param {...Number} n Numbers.\n                 * @return {Boolean} True if all arguments are integers, false otherwise.\n                 */\n                isInt: function isInt () {\n                    return libs.object.every(arguments, function (n) {\n                        return typeof n === 'number' && n % 1 === 0 && n.toString().indexOf('.') === -1;\n                    });\n                },\n\n                /**\n                 * Recursively computes n choose k.\n                 * @param {Number} n A number.\n                 * @param {Number} k A number.\n                 * @return {Number|Infinity} n choose k.\n                 */\n                choose: function choose (n, k) {\n                    if(typeof n !== 'number' || typeof k !== 'number') return NaN;\n                    if(k === 0) return 1;\n                    return (n * choose(n - 1, k - 1)) / k;\n                },\n\n                /**\n                 * Pads a number with preceeding zeros.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Number} length The final length of the string\n                 * @returns {String} The padded number, now a string.\n                 * @function\n                 */\n                pad: function pad (n, length) {\n                    return libs.string.pad(n.toString(), length, '0', true);\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of days.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                daysFrom: function daysFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setDate(date.getDate() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of days.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A date object\n                 */\n                daysFromNow: function daysFromNow (n) {\n                    return libs.number.daysFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of days.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                secondsFrom: function secondsFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setSeconds(date.getSeconds() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of days.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A date object\n                 */\n                secondsFromNow: function secondsFromNow (n) {\n                    return libs.number.secondsFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of years.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                yearsFrom: function yearsFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setFullYear(date.getFullYear() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of years.\n                 * @return {Date} A date object\n                 */\n                yearsFromNow: function yearsFromNow (n) {\n                    return libs.number.yearsFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of months.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                monthsFrom: function monthsFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setMonth(date.getMonth() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of months.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A date object\n                 */\n                monthsFromNow: function monthsFromNow (n) {\n                    return libs.number.monthsFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of hours.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                hoursFrom: function hoursFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setHours(date.getHours() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of hours.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A date object\n                 */\n                hoursFromNow: function hoursFromNow (n) {\n                    return libs.number.hoursFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of minutes.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} A modified date.\n                 */\n                minutesFrom: function minutesFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setMinutes(date.getMinutes() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of minutes.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} The date object\n                 */\n                minutesFromNow: function minutesFromNow (n) {\n                    return libs.number.minutesFrom(n, new Date());\n                },\n\n                /**\n                 * The time, months in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                monthsAgo: function monthsAgo (n) {\n                    return libs.number.minutesFromNow(-n, new Date());\n                },\n\n                /**\n                 * The time, days in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                daysAgo: function daysAgo (n) {\n                    return libs.number.daysFromNow(-n, new Date());\n                },\n\n                /**\n                 * The time, seconds in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                secondsAgo: function secondsAgo (n) {\n                    return libs.number.secondsFromNow(-n, new Date());\n                },\n\n                /**\n                 * The time, minutes in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                minutesAgo: function minutesAgo (n) {\n                    return libs.number.minutesFromNow(-n, new Date());\n                },\n\n                /**\n                 * The time, years in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                yearsAgo: function yearsAgo (n) {\n                    return libs.number.yearsFromNow(-n, new Date());\n                },\n\n                /**\n                 * Converts a number to the HH:MM:SS.MSEC time format\n                 * @param {Number} t The number object to operate on.\n                 * @memberof Number.prototype\n                 * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n                 * @returns {String} The formatted number, now a string.\n                 * @function\n                 */\n                clockTime: function clockTime (t, omitMS) {\n                    var ms, secs, mins, hrs;\n\n                    ms = t % 1000;\n                    t = (t - ms) / 1000;\n\n                    secs = t % 60;\n                    t = (t - secs) / 60;\n\n                    mins = t % 60;\n                    hrs = (t - mins) / 60;\n\n                    return libs.number.pad(hrs.toString(), 2)  + ':' + libs.number.pad(mins.toString(), 2) + ':' +\n                           libs.number.pad(secs.toString(), 2) + ((omitMS === true) ? '' : '.' + libs.number.pad(ms.toString(), 3));\n                }\n            },\n\n            /**\n             * Function library functions\n             * @type {Object}\n             */\n            function: {\n\n                /**\n                 * Inherit the prototype methods from one constructor into another.\n                 * Borrowed directly from Node.js\n                 * @param {Function} constructor The inheriting constructor\n                 * @param {Function} superConstructor The parent constructor\n                 * @return {Function} The inheriting constructor\n                 */\n                inherits: function inherits (constructor, superConstructor) {\n                    if (constructor === undefined || constructor === null)\n                        throw new TypeError('The constructor to \"inherits\" must not be ' + 'null or undefined');\n\n                    if (superConstructor === undefined || superConstructor === null)\n                        throw new TypeError('The super constructor to \"inherits\" must not ' + 'be null or undefined');\n\n                    if (superConstructor.prototype === undefined)\n                        throw new TypeError('The super constructor to \"inherits\" must ' + 'have a prototype');\n\n                    constructor.super_ = superConstructor;\n                    Object.setPrototypeOf(constructor.prototype, superConstructor.prototype);\n                    return constructor;\n                },\n            },\n\n            /**\n             * Array library functions\n             * @type {Object}\n             */\n            array: {\n\n                /**\n                 * Shuffles an array\n                 * @param {Array} a The Array object to operate on.\n                 * @return {Array<*>} The mixed up array\n                 */\n                shuffle: function shuffle (a) {\n                    for(var i = a.length - 1; i > 0; i--) {\n                        var j = Math.floor(Math.random() * (i + 1)), tmp = a[i];\n                        a[i] = a[j];\n                        a[j] = tmp;\n                    }\n                    return a;\n                },\n\n                /**\n                 * Computes the union between the current array, and all the array objects passed in. That is,\n                 * the set of unique objects present in all of the arrays.\n                 * @param {Array} a The Array object to operate on.\n                 * @param {...Array} arr A list of array objects\n                 * @return {Array<*>} The union set of the provided arrays.\n                 */\n                union: function union (a) {\n                    var args = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                    var union = [];\n                    args.unshift(a);\n                    libs.object.each(args, function (array) {\n                        libs.object.each(array, function (item) {\n                            if(union.indexOf(item) === -1) union.push(item);\n                        });\n                    });\n                    return union;\n                },\n\n                /**\n                 * Returns all the items unique to all arrays.\n                 * @param {...Array} arrays The Array objects to operate on.\n                 * @param {Array} other The array to compute the difference from.\n                 * @return {Array} A new array with items unique to each array.\n                 */\n                difference: function difference () {\n                    var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                    if(arrays.length === 0) return [];\n                    if(arrays.length === 1) return libs.object.copy(arrays[0]);\n                    var i, simpleDiff = [];\n\n                    if(arrays.length === 2) {\n                        for(i = 0; i < arrays[0].length; i++)\n                            if(arrays[1].indexOf(arrays[0][i]) === -1) simpleDiff.push(arrays[0][i]);\n\n                        for(i = 0; i < arrays[1].length; i++)\n                            if(arrays[0].indexOf(arrays[1][i]) === -1) simpleDiff.push(arrays[1][i]);\n\n                        return simpleDiff;\n                    }\n\n                    var difference = arrays[0], intermediate = [];\n                    for(i = 1; i < arrays.length; i++) {\n                        for(var n = 0; n < difference.length; n++) {\n                            if(arrays[i].indexOf(difference[n]) === -1) {\n                                intermediate.push(difference[n]);\n                            }\n                        }\n                        for(var k = 0; k < arrays.length; k++) {\n                            //if(arrays[i] !== arrays)\n                        }\n                        difference = intermediate;\n                        intermediate = [];\n                    }\n\n                    return difference;\n                },\n\n                /**\n                 * Returns the items common to all arrays.\n                 * @param {...Array} items The arrays from which to compute the intersection.\n                 * @return {Array} A new array with items common to both arrays.\n                 */\n                intersect: function intersect () {\n                    var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                    if(arrays.length === 0) return [];\n                    if(arrays.length === 1) return libs.object.copy(arrays[0]);\n\n                    var intersection = arrays[0], intermediate = [];\n                    for(var i = 1; i < arrays.length; i++) {\n                        for(var n = 0; n < intersection.length; n++) {\n                            if(arrays[i].indexOf(intersection[n]) > -1) {\n                                intermediate.push(intersection[n]);\n                                var idx = arrays[i].indexOf(intersection[n]);\n                                arrays[i].splice(idx, 1);\n                            }\n                        }\n                        intersection = intermediate;\n                        intermediate = [];\n                    }\n\n                    return intersection;\n                },\n\n                /**\n                 * Creates a new array from the current one, with all occurences of the provided arguments ommited.<br>\n                 * For example: <em>[1,2,3,4,5].without(1)</em> will return <em>[2,3,4,5]</em>\n                 * and <em>[1, null, 2, null, undefined].without(null, undefined)</em> will return <em>[1, 2]</em>\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array<*>} A shallow copy of the array with the provided arguments ommited.\n                 * @function\n                 */\n                without: function without () {\n                    var args = libs.object.toArray(arguments),\n                        a    = args.shift(),\n                        res  = [];\n\n                    libs.object.each(a, function (v) { if(args.indexOf(v) === -1) res.push(v); });\n                    return res;\n                },\n\n                /**\n                 * Rotates the array left or right the specified number of times. If the direction is left, it will shift off the\n                 * first <em>n</em> elements and push them to the end of the array. If right, it will pop off the last <em>n</em>\n                 * items and unshift them onto the front of the array.\n                 * @param {Array} a The Array object to operate on.\n                 * @param {String=} [direction='left'] The direction to rotate array members.\n                 * @param {Number=} [amount=1] The number of elements to shift\n                 * @return {Array<*>} The current array, shifted.\n                 * @function\n                 */\n                rotate: function rotate (a, direction, amount) {\n                    if(direction && libs.object.isNumeric(direction) && !amount) {\n                        amount    = direction;\n                        direction = undefined;\n                    }\n\n                    if(!amount || (amount && !libs.object.isNumeric(amount))) amount = 1;\n                    for(var i = 0; i < amount; i++) {\n                        if(direction !== 'right') a.push(a.shift()); else a.unshift(a.pop());\n                    }\n                    return a;\n                },\n\n                /**\n                 * Rotates the array left the specified number of times.\n                 * This is useful if trying to create a circular queue.\n                 * @param {Array} a The Array object to operate on.\n                 * @param {Number=} [amount=1] The number of times to rotate the array left.\n                 * @return {Array<*>} The current array, rotated left.\n                 * @function\n                 */\n                rotateLeft: function rotateLeft (a, amount) {\n                    return libs.array.rotate(a, 'left', amount);\n                },\n\n                /**\n                 * Rotates the array right the specified number of times.\n                 * This is useful if trying to create a circular queue.\n                 * @param {Array} a The Array object to operate on.\n                 * @param {Number=} [amount=1] The number of times to rotate the array left.\n                 * @return {Array<*>} The current array, rotated right.\n                 * @function\n                 */\n                rotateRight: function rotateLeft (a, amount) {\n                    return libs.array.rotate(a, 'right', amount);\n                },\n\n                /**\n                 * Removes duplicates from the current array.\n                 * This is a destructive action, and will modify the array in place.\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array<*>} The current array, with duplicates removed.\n                 * @function\n                 */\n                makeUnique: function makeUnique (a) {\n                    var visited = [];\n                    for(var i = 0; i < a.length; i++) {\n                        if(visited.indexOf(a[i]) === -1) {\n                            visited.push(a[i]);\n                        }\n                        else {\n                            a.splice(i, 1);\n                            i--; // Splice will affect the internal array pointer, so fix it...\n                        }\n                    }\n                    return a;\n                },\n\n                /**\n                 * Gets an array of unique items from the current array.\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array} A new array with no duplicate values.\n                 * @function\n                 */\n                unique: function unique (a) {\n                    var visited = [],\n                        unique  = [];\n\n                    libs.object.each(a, function (item) {\n                        if(visited.indexOf(item) === -1) {\n                            unique.push(item);\n                            visited.push(item);\n                        }\n                    });\n                    return unique;\n                },\n\n                /**\n                 * Sorts the array in ascending order.\n                 * This is a destructive action, and will modify the array in place.\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array} The array sorted in ascending order.\n                 * @function\n                 */\n                ascending: function ascending (a) {\n                    return a.sort(function (a, b) {\n                        if(a !== undefined && a !== null) a = a.toString();\n                        if(b !== undefined && b !== null) b = b.toString();\n                        return a < b ? -1 : a > b ? 1 : 0;\n                    });\n                },\n\n                /**\n                 * Sorts the array in descending order.\n                 * This is a destructive action, and will modify the array in place.\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array} The array sorted in descending order.\n                 * @function\n                 */\n                descending: function descending (a) {\n                    return a.sort(function (a, b) {\n                        if(a !== undefined && a !== null) a = a.toString();\n                        if(b !== undefined && b !== null) b = b.toString();\n                        return a > b ? -1 : a < b ? 1 : 0;\n                    });\n                }\n            },\n\n            /**\n             * Array library functions\n             * @type {Object}\n             */\n            object: {\n\n                /**\n                 * Gets the unique id of an object.\n                 * Only works for non-literals, otherise Object.__get_protolib_id__ will throw.\n                 * @param {Object|Function} o The object to get the unique id for.\n                 * @return {String} A unique object id\n                 */\n                uniqueId: function uniqueId (o) {\n                    return o.__get_protolib_id__;\n                },\n\n                /**\n                 * Computes the frequencies for each item in all of arguments.\n                 * @param {...*} objs The objects to compute the histogram from.\n                 * @return {Object<Number>} An object that has the items from all of the arguments as its keys and their frequencies as it's values.\n                 */\n                histogram: function histogram () {\n                    var histogram = {};\n                    libs.object.every(arguments, function (o) {\n                        if(typeof o === 'boolean') {\n                            if(!histogram[o]) histogram[o] = 1; else histogram[o]++;\n                        }\n                        else if(typeof o === 'function') {\n                            if(!histogram['function']) histogram['function'] = 1; else histogram[o]++;\n                        }\n                        else {\n                            libs.object.every(o, function (val) {\n                                switch(true) {\n                                    case typeof val === 'function':\n                                    case typeof val === 'undefined':\n                                        val = typeof val;\n                                        break;\n                                    case typeof val === 'object' && val === null:\n                                        val = 'null';\n                                        break;\n                                    case typeof val === 'object' && val instanceof Array:\n                                        val = 'array';\n                                        break;\n                                    case typeof val === 'object':\n                                        val = 'object';\n                                        break;\n                                    default:\n                                        val = val.toString();\n                                }\n\n                                if(typeof histogram[val] !== 'number') histogram[val] = 0;\n                                histogram[val]++;\n                            });\n                        }\n                    });\n                    return histogram;\n                },\n\n                /**\n                 * Creates a shallow copy of 'item'.\n                 * @param {*} item The item to shallow \"copy\".\n                 * @return {*} A shallow copy of the item.\n                 */\n                copy: function copy (item) {\n                    var copy;\n                    if(!item) return item;\n\n                    switch (typeof item) {\n                        case 'string':\n                        case 'number':\n                        case 'function':\n                        case 'boolean':\n                            return item;\n\n                        default:\n                            if(item instanceof Array) {\n                                copy = [];\n                            }\n                            else {\n                                copy = {};\n                            }\n                    }\n\n                    libs.object.every(item, function (o, k) { copy[k] = o; });\n                    return copy;\n                },\n\n                /**\n                 * Returns the number of occurences of \"what\"\n                 * @param {*} obj The item to count the occurences of \"what\" in.\n                 * @param {*} what The item to count the occurences of the item in the array.\n                 * @return {[type]} [description]\n                 */\n                occurrencesOf: function occurrencesOf (obj, what) {\n                    if(arguments.length < 2) return 0;\n\n                    if(typeof obj === 'boolean') {\n                        return 0;\n                    }\n                    if(typeof obj === 'number') {\n                        return occurrencesOf(obj.toString(), what);\n                    }\n                    else if(typeof obj === 'function') {\n                        return occurrencesOf(fixFirefoxFunctionString(obj.toString()), what);\n                    }\n\n                    var count = 0;\n                    if(typeof obj === 'string') {\n                        if(typeof what === 'string' || typeof what === 'number') {\n                            var regexp = new RegExp(what.toString(), 'g'), m;\n                            while(m = regexp.exec(obj)) count++; // jshint ignore:line\n                        }\n                    }\n                    else if(typeof obj !== 'string') {\n                        libs.object.every(obj, function (item) {\n                            if(item === what) count++;\n                        });\n                    }\n                    return count;\n                },\n\n                /**\n                 * Returns the object's keys.\n                 * @param {Object} o The object to operate on.\n                 * @returns {Array<String|Number>} The object's key set\n                 * @function\n                 */\n                keys : function keys (o) {\n                    if(o === undefined || o === null) return [];\n\n                    var keys = getKeys(o), idx;\n                    if(libs.object.isArguments(o)) {\n                        idx = keys.indexOf('length');\n                        if(idx > -1) keys.splice(idx, 1);\n                    }\n                    return keys;\n                },\n\n                /**\n                 * Returns the 'size' or 'length' of an object.\n                 * <ul>\n                 *      <li> String   -> The string's length  </li>\n                 *      <li> Number   -> The number of digits </li>\n                 *      <li> Object   -> The number of keys   </li>\n                 *      <li> Array    -> The number of items  </li>\n                 *      <li> Function -> 1                    </li>\n                 * </ul>\n                 * @param {Object} o The object to operate on.\n                 * @returns {Number} The number of items within the object.\n                 * @function\n                 */\n                size: function size (o) {\n                    switch(true) {\n                        case typeof o === 'function':\n                            return 1;\n\n                        case typeof o === 'number':\n                            return o.toString().length;\n\n                        case o instanceof Array:\n                        case typeof o === 'string':\n                            return o.length;\n\n                        case libs.object.isArguments(o) && typeof o.length !== 'undefined':\n                            return o.length - 1;\n\n                        case o && typeof o === 'object':\n                            return Object.keys(o).length;\n\n                        default:\n                            return 0;\n                    }\n                },\n\n                /**\n                 * Determines if an object can be converted to a number.\n                 * @param {...Object} o The object to operate on.\n                 * @returns {Boolean} True if the object is numeric, false otherwise.\n                 * @function\n                 */\n                isNumeric: function isNumeric () {\n                    return libs.object.every(arguments, function (item) {\n                        return !isNaN(parseFloat(item)) && isFinite(item);\n                    });\n                },\n\n                /**\n                 * Converts an object to a number.\n                 * @param {...Object} o The object to operate on.\n                 * @returns {Number} The object as a number.\n                 * @function\n                 */\n                getNumeric: function getNumeric () {\n                    var res = [], len = arguments.length;\n                    libs.object.every(arguments, function (item) {\n                        res.push(!isNaN(parseFloat(item)) && isFinite(item));\n                    });\n                    return len === 1 ? res[0] : res;\n                },\n\n                /**\n                 * Determines if an object has no keys, if an array has no items, or if a string === ''.\n                 * @param {...Object} o The object to operate on.\n                 * @returns {Boolean} True if the object is 'empty', false otherwise.\n                 * @function\n                 */\n                isEmpty: function isEmpty () {\n                    return libs.object.every(arguments, function (item) {\n                        return libs.object.size(item) === 0 && item !== false && item !== '' && item !== true;\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all arrays, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is an array, false otherwise.\n                 */\n                isArray: function isArray () {\n                    return libs.object.every(arguments, function (item) {\n                        return item instanceof Array;\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all objects and not arrays, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is an object and not an array, false otherwise.\n                 */\n                isPureObject: function isPureObject () {\n                    return libs.object.every(arguments, function (item) {\n                        return !(item instanceof Array) && typeof item === 'object';\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all strings, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a string, false otherwise.\n                 */\n                isString: function isString () {\n                    return libs.object.every(arguments, function (item) {\n                        return typeof item === 'string';\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all booleans, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a boolean, false otherwise.\n                 */\n                isBoolean: function isBoolean () {\n                    return libs.object.every(arguments, function (item) {\n                        return typeof item === 'boolean';\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are allfunction, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a function, false otherwise.\n                 */\n                isFunction: function isFunction () {\n                    return libs.object.every(arguments, function (item) {\n                        return typeof item === 'function';\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are allll, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a function, false otherwise.\n                 */\n                isNull: function isNull () {\n                    return libs.object.every(arguments, function (item) {\n                        return item === null;\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all undefined, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a function, false otherwise.\n                 */\n                isUndefined: function isUndefined () {\n                    return libs.object.every(arguments, function (item) {\n                        return item === undefined;\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all arguments objects, false otherwise.\n                 * @param {Object} o The object to operate on.\n                 * @return {Boolean} True if the object is an arguments object, false otherwise\n                 */\n                isArguments: function isArguments () {\n                    return libs.object.every(arguments, function (item) {\n                        return Object.prototype.toString.call(item) === '[object Arguments]';\n                    });\n                },\n\n                /**\n                 * Convers an object to a number, if possible.\n                 * @param {...Object} o The object to operate on.\n                 * @returns {Number} The object as a float or NaN.\n                 * @function\n                 */\n                toNumber: function toNumber () {\n                    var vals = [];\n                    libs.object.every(arguments, function (o) {\n                        vals.push(libs.object.isNumeric(o) ? parseFloat(o) : NaN);\n                    });\n                    return vals.length === 1 ? vals[0] : vals;\n                },\n\n                /**\n                 * Convers an object to an integer, if possible.\n                 * @param {Object} o The object to operate on.\n                 * @returns {Number} The object as an integer or NaN.\n                 * @function\n                 */\n                toInt: function toInt () {\n                    var vals = [];\n                    libs.object.every(arguments, function (o) {\n                        var radix = /^0x/.test(o) ? 16 : 10; // Check for hex string\n                        vals.push(libs.object.isNumeric(o) ? parseInt(o, radix) : NaN);\n                    });\n                    return vals.length === 1 ? vals[0] : vals;\n                },\n\n                /**\n                 * Returns a random array item, random object property, random character in a string, or random digit in a number.\n                 * @param {Object} o The object to operate on.\n                 * @returns {*}\n                 * @function\n                 */\n                random: function random (o) {\n                    if(typeof o === 'object') {\n                        return o instanceof Array ?\n                            o[Math.floor(Math.random() * o.length)] :\n                            o[Object.keys(o)[Math.floor(Math.random() * Object.keys(o).length)]];\n                    }\n                    else if(typeof o === 'string' || typeof o === 'number') {\n                        var val = o, negative = false;\n\n                        if(o.length === 0) return '';\n                        if(typeof o === 'number' && o < 0) {\n                            negative = true;\n                            val = Math.abs(val);\n                        }\n\n                        val = val.toString()[Math.floor(Math.random() * val.toString().length)];\n                        if(typeof o === 'number') val = parseInt(val, 10);\n                        return negative ? -val : val;\n                    }\n                    return o;\n                },\n\n                /**\n                 * Invokes the callback 'f' for each property the object contains. If this is called\n                 * on a number or function, the object will be cast to a string.<br><br>\n                 * The callback `f` will be invoked with the following arguments:\n                 * <ul>\n                 * \t<li>value     - The value of the current object being iterated over</li>\n                 * \t<li>key       - The key of the current object (if an object, the index if an array)</li>\n                 * \t<li>iteration - The current iteration (same as key if a string or array)</li>\n                 * \t<li>exit      - A function which will break the loop and return the values passed to it,\n                 * \t\t\t\t\tor a single value if only a single value is passed.</li>\n                 * </ul>\n                 * @function\n                 * @param {Object} o The object to operate on.\n                 * @param {Number=} [rangeA=0] The iteration start index\n                 * @param {Number=} [rangeB='length of the item'] The iteration end index\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {*} The value passed to the exit parameter of the callback...\n                 */\n                each: function each (o, rangeA, rangeB, f) {\n\n                    // Can't use last here.. would cause circular ref...\n                    f = undefined;\n                    for(var k = arguments.length - 1; k >= 0; k--) {\n                        if(arguments[k] instanceof Function) {\n                            f = arguments[k];\n                            break;\n                        }\n                    }\n\n                    var ret    = null,\n                        broken = false,\n                        self   = o,\n                        keys, property, value,\n\n                        exit = function () {\n                            broken   = true;\n                            ret      = arguments.length > 1 ? libs.object.toArray(arguments) : arguments[0];\n                        };\n\n                    if(f instanceof Function) {\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                        // Firefox does some funky stuff here...\n                        if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                        // For Safari\n                        var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                        keys = getKeys(self);\n                        idx  = keys.indexOf('length');\n\n                        if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                        rangeA = parseInt(rangeA);\n                        rangeA = (isNaN(rangeA) || !isFinite(rangeA)) ? 0 : rangeA;\n\n                        rangeB = parseInt(rangeB);\n                        rangeB = (isNaN(rangeB) || !isFinite(rangeB)) ? keys.length : rangeB;\n\n                        var i = 0, n;\n                        if(Math.abs(rangeA) > Math.abs(rangeB)) {\n                            if(rangeB < 0) rangeB = 0;\n                            if(rangeA < 0) rangeA = 0;\n                            if(rangeA > keys.length - 1) rangeA = keys.length - 1;\n\n                            for(n = rangeA; n >= rangeB; n--) {\n                                property = keys[n];\n                                value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                                f.call(o, value, property, n, exit, i++, o);\n                                if(broken) break;\n                            }\n                        }\n                        else {\n                            rangeB = rangeB + 1 > keys.length ? keys.length : rangeB + 1;\n                            if(rangeB < 0) rangeB = 0;\n                            if(rangeA < 0) rangeA = 0;\n\n                            for(n = rangeA; n < rangeB; n++) {\n                                property = keys[n];\n                                value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                                f.call(o, value, property, n, exit, i++, o);\n                                if(broken) break;\n                            }\n                        }\n                    }\n                    return ret;\n                },\n\n                /**\n                 * Invokes the callback 'f' for every property the object contains. If the callback returns false, the\n                 * loop is broken and false is returned; otherwise true is returned.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {Boolean} True if none of the callback invocations returned false.\n                 * @function\n                 */\n                every: function every (o, f) {\n                    f = f instanceof Function ? f : undefined;\n\n                    if(f instanceof Function) {\n                        var self = o, keys, property, value;\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                        // Firefox does some funky stuff here...\n                        if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                        // For Safari...\n                        var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                        keys = getKeys(self);\n                        idx  = keys.indexOf('length');\n\n                        if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                        var i = 0;\n                        for(var n = 0; n < keys.length; n++) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            if(f.call(o, value, property, n, i++, o) === false) return false;\n                        }\n                    }\n                    return true;\n                },\n\n                /**\n                 * Invokes the callback 'f' for every property the object contains. If the callback returns true, the\n                 * loop is broken and false is returned; otherwise true is returned.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {Boolean} True if none of the callback invocations returned false.\n                 * @function\n                 */\n                any: function any (o, f) {\n                    f = f instanceof Function ? f : undefined;\n\n                    if(f instanceof Function) {\n                        var self = o, keys, property, value;\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                        // Firefox does some funky stuff here...\n                        if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                        // For Safari...\n                        var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                        keys = getKeys(self);\n                        idx  = keys.indexOf('length');\n\n                        if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                        var i = 0;\n                        for(var n = 0; n < keys.length; n++) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            var ret = f.call(o, value, property, n, i++, o);\n                            if(ret !== undefined) return ret;\n                        }\n                    }\n                    return undefined;\n                },\n\n                /**\n                 * Converts an object to an array. For strings, numbers, and functions this will\n                 * return a char array to their respective .toString() values\n                 * @param {Object} o The object to operate on.\n                 * @function\n                 * @return {Array<*>} The object, converted to an array.\n                 */\n                toArray: function toArray (o) {\n                    if(o instanceof Array) return libs.object.copy(o);\n                    var arr = [];\n                    libs.object.each(o, function (val) { arr.push(val); });\n                    return arr;\n                },\n\n                /**\n                 * Returns the first n elements of an object. If the object is an array, and only one items is retrieved,\n                 * that item will be returned, rather than an array.\n                 * @param {Object} o The object to operate on.\n                 * @param {Number=} [n=1] The number of elements to return\n                 * @return {Array<*>} The first n elements of the array.\n                 */\n                first: function first (o, n) {\n                    n = parseInt(n, 10);\n                    n = isNaN(n) || !isFinite(n) ? 1 : n;\n                    var v = null;\n\n                    if(typeof o === 'boolean') {\n                        return o;\n                    }\n                    else if(typeof o !== 'object') {\n                        if(n !== 0) v = o.toString().slice(0, n); else return null;\n                    }\n                    else if(o instanceof Array) {\n                        if(n === 1) return o[0];\n                        return n !== 0 ? o.slice(0, n) : [];\n                    }\n                    else {\n                        v = {};\n                        libs.object.each(o, 0, n - 1, function (item, key) { v[key] = item; });\n                        var keys = getKeys(v);\n                        return keys.length === 1 ? v[keys[0]] : v;\n                    }\n                    return v.length === 1 ? v[0] : v;\n                },\n\n                /**\n                 * Returns the last n elements of an object. If the object is an array, and only one items is retrieved,\n                 * that item will be returned rather than an array.\n                 * @param {Object} o The object to operate on.\n                 * @param {Number=} [n=1] The number of elements to return\n                 * @return {Array<*>} The last n elements of the array.\n                 * @function\n                 */\n                last: function last (o, n) {\n                    if(typeof o === 'boolean') return o;\n\n                    n = parseInt(n, 10);\n                    n = isNaN(n) || !isFinite(n) ? 1 : n;\n                    var v = null, keys, len = libs.object.size(o), idx;\n\n                    if(typeof o === 'boolean') {\n                        return o;\n                    }\n                    else if(libs.object.isArguments(o)) {\n                        keys = getKeys(o);\n                        idx  = keys.indexOf('length');\n\n                        if(idx > -1) keys.splice(idx, 1);\n                        v = []; len = keys.length;\n                        // Arguments object should ignore undefined members...\n                        libs.object.each(keys, 0, len, function (k) { if(o[k] !== undefined) v.unshift(o[k]); });\n                        v = v.slice(0, n);\n                    }\n                    else if(typeof o !== 'object') {\n                        if(n !== 0) v = o.toString().slice(-n); else return null;\n                    }\n                    else if(o instanceof Array) {\n                        if(n === 1) return o[o.length -1];\n                        return n !== 0 ? o.slice(-n) : [];\n                    }\n                    else {\n                        v = {};\n                        if(n < 0) n = 0;\n                        libs.object.each(o, len - n, len, function (item, key) { v[key] = item; });\n                        keys = getKeys(v);\n                        return keys.length === 1 ? v[keys[0]] : v;\n                    }\n                    return v.length === 1 ? v[0] : v.length > 0 ? v : null;\n                },\n\n                /**\n                 * If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n                 * Useful for ensuring that a callback can always be invoked, without checking if the argument is a function\n                 * over and over.\n                 * @param {Object} o The object to get the callback for.\n                 * @return {Function} If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n                 */\n                getCallback: function getCallback (o) {\n                    var last = libs.object.last(o);\n                    return last instanceof Function ? last : NULL_FUNCTION;\n                },\n\n                /**\n                 * Find a child of an object using the given path, split by the given delimiter (or '.' by default)\n                 * @param {Object} o The object to operate on.\n                 * @param {String} path The path to the child object\n                 * @param {String=} [delimiter='.'] The path delimiter\n                 * @param {Function=} done A callback for completion\n                 * @return {*|Null} The child object at the given string path, or null if it doesn't exist.\n                 * @function\n                 */\n                findChildAtPath: function findChildAtPath (o, path, delimiter, original, invoked, done) {\n                    done = libs.object.getCallback(arguments);\n                    var self = o;\n\n                    original = (!(original instanceof Function) && original) ? original : self;\n                    invoked  = invoked || false;\n\n                    if(typeof o === 'object' && typeof path === 'string') {\n                        delimiter = typeof delimiter === 'string' ? delimiter : '.';\n                        path      = path.split(delimiter);\n\n                        var p = path.shift();\n                        if(p) {\n                            return libs.object.each(o, function (o, k, i, exit) {\n                                if(path.length === 0 && k === p) {\n                                    done.call(original, o, self, k);\n                                    invoked = true;\n                                    exit(o);\n                                }\n                                else {\n                                    var obj = libs.object.findChildAtPath(o, path.join(delimiter), delimiter, original, invoked, done);\n                                    if(obj !== null) exit(obj);\n                                }\n                            });\n                        }\n                    }\n                    if(!invoked && original === self && done instanceof Function) done.call(original, null, self, null);\n                    return null;\n                },\n\n                /**\n                 * Produces a shallow clone of the object, that is, if JSON.stringify can handle it.<br>\n                 * The object must be non-circular.\n                 * @param {Object} o The object to operate on.\n                 * @return {*} A shallow clone of the object.\n                 * @function\n                 */\n                clone: function clone (o) {\n                    if(typeof o === 'string' || typeof o === 'number') return o;\n\n                    try {\n                        return JSON.parse(JSON.stringify(o));\n                    }\n                    catch (e) {\n                        throw new Error('Unable to clone object: ' + e.message);\n                    }\n                },\n\n                /**\n                 * Filters an array or object using only the types allowed. That is, if the item in the array is of a type listed\n                 * in the arguments, then it will be added to the filtered array. In this case 'array' is a valid type.\n                 * @param {Object} o The object to operate on.\n                 * @param {...String} types A list of typeof types that are allowed in the array.\n                 * @return {Array<*>} An array filtered by only the allowed types.\n                 */\n                only: function only (o, types) {\n                    types = libs.object.toArray(arguments);\n                    types.shift();\n\n                    // Allows the 'plural' form of the type...\n                    libs.object.each(types, function (type, key) { this[key] = type.replace(/s$/, ''); });\n\n                    if(typeof o !== 'object' || !o) return o;\n                    var isArray  = o instanceof Array ? true : false,\n                        filtered = isArray ? [] : {},\n                        typeArr  = types.indexOf('array'),\n                        typeObj  = types.indexOf('object object');\n\n                    libs.object.each(o, function (item, key) {\n                        var typeItem = types.indexOf(typeof item);\n\n                        if(typeObj !== -1 && typeArr === -1) {\n                            if((typeof item === 'object' && !(item instanceof Array)) || (typeof item !== 'object' && typeItem !== -1)) {\n                                if(isArray) filtered.push(item); else filtered[key] = item;\n                            }\n                        }\n                        else if(typeObj !== -1 && typeArr !== -1) {\n                            types.push('object');\n                            if(typeItem !== -1) {\n                                if(isArray) filtered.push(item); else filtered[key] = item;\n                            }\n                        }\n                        else if(typeItem !== -1 || (item instanceof Array && typeArr !== -1)) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    });\n                    return filtered;\n                },\n\n                /**\n                 * Filters an object using the given predicate function. For objects, a new object will be returned, with\n                 * the values that passed the predicate function. For strings, a new string will be returned with the characters\n                 * that passed the predicate function. For numbers, a new number will be returned with the digits that passed\n                 * the predicate function. Functions will be operated on as strings.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function} predicate The function used to filter the object.\n                 * @return {*} The filtered object\n                 */\n                where: function where (o, predicate) {\n                    if(!(predicate instanceof Function)) {\n                        var temp = predicate;\n                        predicate = function (i) { return i == temp; }; // jshint ignore:line\n                    }\n\n                    if(o === null || o === undefined) return o;\n                    if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                    var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                        filtered = !isObject ? [] : {};\n\n                    libs.object.each(o, function (item, key) {\n                        if(predicate.call(item, item, key)) {\n                            if(isObject) filtered[key] = item; else filtered.push(item);\n                        }\n                    });\n\n                    if(typeof o !== 'object') filtered = filtered.join('');\n                    return filtered;\n                },\n\n                /**\n                 * Filters an object by keys using the given predicate function.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function} predicate The function used to filter the object.\n                 * @return {*} The filtered object\n                 */\n                whereKeys: function whereKeys (o, predicate) {\n                    if(!(predicate instanceof Function)) {\n                        var temp = predicate;\n                        predicate = function (k) { return k == temp; }; // jshint ignore:line\n                    }\n\n                    if(o === null || o === undefined) return o;\n                    if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                    var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                        filtered = !isObject ? [] : {};\n\n                    libs.object.each(o, function (item, key) {\n                        if(predicate.call(key, key, item)) {\n                            if(isObject) filtered[key] = item; else filtered.push(item);\n                        }\n                    });\n\n                    if(typeof o !== 'object') filtered = filtered.join('');\n                    return filtered;\n                },\n\n                /**\n                 * For objects, inverts the objects keys/values. If the value isn't a number or array, it will be omitted.\n                 * For strings, it will reverse the string.\n                 * For number, it will compute the number's inverse (i.e. 1 / x).\n                 * For functions, invert returns a new function that wraps the given function and inverts it's result.\n                 * @param {Object} o The object to operate on.\n                 * @return {*} The inverse, as described above.\n                 */\n                invert: function invert (o) {\n                    if(o === null || o === undefined) return o;\n                    if(typeof o === 'string')   return libs.string.reverse(o);\n                    if(typeof o === 'number')   return 1 / o;\n                    if(typeof o === 'boolean')  return !o;\n\n                    if(typeof o === 'function') {\n                        return function () { return libs.object.invert(o.apply(o, arguments)); };\n                    }\n\n                    var obj = {};\n                    libs.object.each(o, function (item, key) {\n                        if(typeof item === 'string' || typeof item === 'number') {\n                            if(!obj[item]) {\n                                obj[item] = key;\n                            }\n                            else {\n                                var tmp = obj[item];\n                                obj[item] = [];\n                                obj[item].push(tmp, key);\n                            }\n                        }\n                    });\n\n                    return obj;\n                },\n\n                /**\n                 * Returns the maximum item in the object.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n                 * @return {*} The maximum item in the object collection.\n                 */\n                max: function max (o, func) {\n                    if(!o || typeof o !== 'object') return o;\n                    if(!(func instanceof Function)) func = undefined;\n                    var max, maxValue;\n\n                    if(!func) {\n                        max = libs.object.first(o);\n                        libs.object.each(o, 1, function (item) {\n                            if(item >= max) max = item;\n                        });\n                    }\n                    else {\n                        max = libs.object.first(o);\n                        maxValue = func.call(max, max);\n\n                        libs.object.each(o, 1, function (item) {\n                            if(func.call(item, item) >= maxValue) max = item;\n                        });\n                    }\n                    return max;\n                },\n\n                /**\n                 * Returns the minimum item in the object.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n                 * @return {*} The minimum item in the object collection.\n                 */\n                min: function min (o, func) {\n                    if(!o || typeof o !== 'object') return o;\n                    if(!(func instanceof Function)) func = undefined;\n\n                    if(typeof o !== 'object') return o;\n                    var min, minValue;\n\n                    if(!func) {\n                        min = libs.object.first(o);\n                        libs.object.each(o, 1, function (item) {\n                            if(item <= min) min = item;\n                        });\n                    }\n                    else {\n                        min = libs.object.first(o);\n                        minValue = func.call(min, min);\n\n                        libs.object.each(o, 1, function (item) {\n                            if(func.call(item, item) <= minValue) min = item;\n                        });\n                    }\n                    return min;\n                },\n\n                /**\n                 * Tests whether or not the object has a method called 'method'.\n                 * @param {Object} o The object to operate on.\n                 * @param {String} method The name of the method to test existence for.\n                 * @return {Boolean} True if the object has a function called 'method', false otherwise.\n                 */\n                implements: function _implements () {\n                    var args = libs.object.toArray(arguments),\n                        a    = args.shift();\n\n                    if(!a) return false;\n                    return libs.object.every(args, function (m) {\n                        if(!(a[m] instanceof Function)) return false;\n                    });\n                },\n\n                /**\n                 * Same as Object.j.implements, excepct with a hasOwnProperty check.\n                 * @param {Object} o The object to operate on.\n                 * @param {String} method The name of the method to test existence for.\n                 * @return {Boolean} True if the object has its own function called 'method', false otherwise.\n                 */\n                implementsOwn: function implementsOwn (o, method) {\n                    var args = libs.object.toArray(arguments),\n                        a    = args.shift();\n\n                    if(!a) return false;\n                    return libs.object.every(args, function (m) {\n                        if(!(a[m] instanceof Function) || !o.hasOwnProperty(method)) return false;\n                    });\n                }\n            },\n\n            error: {\n                /** @todo: Add some Error utility functions... */\n            },\n\n            boolean: {\n                /** @todo: Add some Boolean utility functions... */\n            },\n\n            math: {\n                /** @todo: Add some Math utility functions... */\n            },\n\n            regexp: {\n                /** @todo: Add some RegExp utility functions... */\n            }\n        };\n        return libs;\n    }\n    module.exports = libs;\n}());\n\n},{\"os\":4}],4:[function(require,module,exports){\nexports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\n},{}]},{},[1])\n\n","(function () {\n    'use strict';\n    function libp (libs, getThisValueAndInvoke) {\n        var libp = {\n            string: {\n\n                camelize: function camelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.camelize(s);\n                    });\n                },\n\n                decamelize: function decamelize () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.decamelize(s);\n                    });\n                },\n\n                differenceFromString: function differenceFromString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.differenceFromString(s, other);\n                    });\n                },\n\n                replaceTokens: function replaceTokens () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.replaceStringTokens(s);\n                    });\n                },\n\n                intersectString: function intersectString (other) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.intersectString(s, other);\n                    });\n                },\n\n                repeat: function repeat (times) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.repeat(s, times);\n                    });\n                },\n\n                rtrim: function rtrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.rtrim(s, what);\n                    });\n                },\n\n                ltrim: function ltrim (what) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ltrim(s, what);\n                    });\n                },\n\n                htmlEncode: function htmlEncode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlEncode(s);\n                    });\n                },\n\n                htmlDecode: function htmlDecode () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.htmlDecode(s);\n                    });\n                },\n\n                addSlashes: function addSlashes () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.addSlashes(s);\n                    });\n                },\n\n                ucFirst: function ucFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ucFirst(s);\n                    });\n                },\n\n                lcFirst: function lcFirst () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.lcFirst(s);\n                    });\n                },\n\n                titleCase: function titleCase () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.titleCase(s);\n                    });\n                },\n\n                splice: function splice (index, count, add) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.splice(s, index, count, add);\n                    });\n                },\n\n                ellipses: function ellipses_ (length, place, ellipses) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.ellipses(s, length, place, ellipses);\n                    });\n                },\n\n                shuffle: function shuffle (splitter) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.shuffle(s, splitter);\n                    });\n                },\n\n                reverse: function reverse () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.reverse(s);\n                    });\n                },\n\n                withoutTrailingSlash: function withoutTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withoutTrailingSlash(s);\n                    });\n                },\n\n                withTrailingSlash: function withTrailingSlash () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.withTrailingSlash(s);\n                    });\n                },\n\n                regexpSafe: function regexpSafe () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.regexpSafe(s);\n                    });\n                },\n\n                pad: function pad (length, delim, pre) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.pad(s, length, delim, pre);\n                    });\n                },\n\n                newlineToBreak: function newlineToBreak () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.newlineToBreak(s);\n                    });\n                },\n\n                tabsToSpan: function tabsToSpan () {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.tabsToSpan(s);\n                    });\n                },\n\n                wordWrapToLength: function wordWrapToLength (width, padleft, padright, omitFirst) {\n                    return getThisValueAndInvoke(function (s) {\n                        return libs.string.wordWrapToLength(s, width, padleft, padright, omitFirst);\n                    });\n                },\n            },\n\n            array: {\n                shuffle: function shuffle () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.shuffle(a);\n                    });\n                },\n\n                union: function union () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.union.apply(a, args);\n                    });\n                },\n\n                difference: function difference () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.difference.apply(a, args);\n                    });\n                },\n\n                intersect: function intersect () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.intersect.apply(a, args);\n                    });\n                },\n\n                without: function without () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (a) {\n                        args.unshift(a);\n                        return libs.array.without.apply(a, args);\n                    });\n                },\n\n                rotate: function rotate (direction, amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotate(a, direction, amount);\n                    });\n                },\n\n                rotateLeft: function rotateLeft (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateLeft(a, amount);\n                    });\n                },\n\n                rotateRight: function rotateRight (amount) {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.rotateRight(a, amount);\n                    });\n                },\n\n                makeUnique: function makeUnique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.makeUnique(a);\n                    });\n                },\n\n                unique: function unique () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.unique(a);\n                    });\n                },\n\n                ascending: function ascending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.ascending(a);\n                    });\n                },\n\n                descending: function descending () {\n                    return getThisValueAndInvoke(function (a) {\n                        return libs.array.descending(a);\n                    });\n                }\n            },\n\n            number: {\n\n                to: function to_ (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        var isInt = false;\n                        if(n % 1 === 0 && n.toString().indexOf('.') === -1) isInt = true;\n                        return isInt ? libs.number.randomIntInRange(n, k) : libs.number.randomNumberInRange(n, k);\n                    });\n                },\n\n                isInt: function isInt () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.isInt(n);\n                    });\n                },\n\n                factorial: function factorial () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.factorial(n);\n                    });\n                },\n\n                choose: function choose (k) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.choose(n, k);\n                    });\n                },\n\n                pad: function pad (length) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.pad(n, length);\n                    });\n                },\n\n                daysFrom: function daysFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFrom(n, date);\n                    });\n                },\n\n                daysFromNow: function daysFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysFromNow(n);\n                    });\n                },\n\n                secondsFrom: function secondsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFrom(n, date);\n                    });\n                },\n\n                secondsFromNow: function secondsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsFromNow(n);\n                    });\n                },\n\n                yearsFrom: function yearsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFrom(n, date);\n                    });\n                },\n\n                yearsFromNow: function yearsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsFromNow(n);\n                    });\n                },\n\n                monthsFrom: function monthsFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFrom(n, date);\n                    });\n                },\n\n                monthsFromNow: function monthsFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsFromNow(n);\n                    });\n                },\n\n                hoursFrom: function hoursFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFrom(n, date);\n                    });\n                },\n\n                hoursFromNow: function hoursFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.hoursFromNow(n);\n                    });\n                },\n\n                minutesFrom: function minutesFrom (date) {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFrom(n, date);\n                    });\n                },\n\n                minutesFromNow: function minutesFromNow () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesFromNow(n);\n                    });\n                },\n\n                monthsAgo: function monthsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.monthsAgo(n);\n                    });\n                },\n\n                daysAgo: function daysAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.daysAgo(n);\n                    });\n                },\n\n                secondsAgo: function secondsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.secondsAgo(n);\n                    });\n                },\n\n                minutesAgo: function minutesAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.minutesAgo(n);\n                    });\n                },\n\n                yearsAgo: function yearsAgo () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.yearsAgo(n);\n                    });\n                },\n\n                clockTime: function clockTime () {\n                    return getThisValueAndInvoke(function (n) {\n                        return libs.number.clockTime(n);\n                    });\n                }\n            },\n\n            function: {\n                inherits: function inherits (s) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.function.inherits(o, s);\n                    });\n                }\n            },\n\n            object: {\n                uniqueId: function uniqueId () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.uniqueId(o);\n                    });\n                },\n\n                histogram: function histogram () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.histogram(o);\n                    });\n                },\n\n                copy: function copy () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.copy(o);\n                    });\n                },\n\n                each: function each (start, end, callback) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.each(o, start, end, callback);\n                    });\n                },\n\n                occurrencesOf: function occurrencesOf (what) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.occurrencesOf(o, what);\n                    });\n                },\n\n                keys: function keys () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.keys(o);\n                    });\n                },\n\n                size: function size () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.size(o);\n                    });\n                },\n\n                isNumeric: function isNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNumeric(o);\n                    });\n                },\n\n                getNumeric: function getNumeric () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getNumeric(o);\n                    });\n                },\n\n                isEmpty: function isEmpty () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isEmpty(o);\n                    });\n                },\n\n                isArray: function isArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArray(o);\n                    });\n                },\n\n                isPureObject: function isPureObject () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isPureObject(o);\n                    });\n                },\n\n                isString: function isString () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isString(o);\n                    });\n                },\n\n                isUndefined: function isUndefined () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isUndefined(o);\n                    });\n                },\n\n                isNull: function isNull () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isNull(o);\n                    });\n                },\n\n                isBoolean: function isBoolean () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isBoolean(o);\n                    });\n                },\n\n                isFunction: function isFunction () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isFunction(o);\n                    });\n                },\n\n                isArguments: function isArguments () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.isArguments(o);\n                    });\n                },\n\n                toNumber: function toNumber () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toNumber(o);\n                    });\n                },\n\n                toInt: function toInt () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toInt(o);\n                    });\n                },\n\n                toArray: function toArray () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.toArray(o);\n                    });\n                },\n\n                getCallback: function getCallback () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.getCallback(o);\n                    });\n                },\n\n                random: function random () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.random(o);\n                    });\n                },\n\n                every: function every (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.every(o, f);\n                    });\n                },\n\n                any: function any (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.any(o, f);\n                    });\n                },\n\n                first: function first (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.first(o, n);\n                    });\n                },\n\n                last: function last (n) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.last(o, n);\n                    });\n                },\n\n                findChildAtPath: function findChildAtPath (path, delimiter, done) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.findChildAtPath(o, path, delimiter, done);\n                    });\n                },\n\n                clone: function clone () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.clone(o);\n                    });\n                },\n\n                only: function only () {\n                    var args = libs.object.toArray(arguments);\n                    return getThisValueAndInvoke(function (o) {\n                        args.unshift(o);\n                        return libs.object.only.apply(o, args);\n                    });\n                },\n\n                where: function where (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.where(o, predicateFunction);\n                    });\n                },\n\n                whereKeys: function whereKeys (predicateFunction) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.whereKeys(o, predicateFunction);\n                    });\n                },\n\n                invert: function invert () {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.invert(o);\n                    });\n                },\n\n                max: function max (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.max(o, f);\n                    });\n                },\n\n                min: function min (f) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.min(o, f);\n                    });\n                },\n\n                implements: function _implements (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implements(o, method);\n                    });\n                },\n\n                implementsOwn: function implementsOwn (method) {\n                    return getThisValueAndInvoke(function (o) {\n                        return libs.object.implementsOwn(o, method);\n                    });\n                },\n            },\n\n            date: {\n                advanceDays: function advanceDays (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceDays(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceMonths: function advanceMonths (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceMonths(d, n, adjustForWeeked);\n                    });\n                },\n\n                advanceYears: function advanceYears (n, adjustForWeeked) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.advanceYears(d, n, adjustForWeeked);\n                    });\n                },\n\n                yymmdd: function yymmdd (delim) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.yymmdd(d, delim);\n                    });\n                },\n\n                clockTime: function clockTime (omitMS) {\n                    return getThisValueAndInvoke(function (d) {\n                        return libs.object.clockTime(d, !!omitMS);\n                    });\n                },\n            },\n\n            error: {\n                /** @todo: Add some Error utility functions... */\n            },\n\n            boolean: {\n                /** @todo: Add some Boolean utility functions... */\n            },\n\n            math: {\n                /** @todo: Add some Math utility functions... */\n            },\n\n            regexp: {\n                /** @todo: Add some RegExp utility functions... */\n            }\n        };\n\n        return libp;\n    }\n    module.exports = libp;\n}());\n","(function () {\n    'use strict';\n\n    function libs () {\n        var IS_BROWSER = typeof window !== 'undefined',\n            HAS_OS     = IS_BROWSER ? false : typeof require('os') === 'object';\n\n        // Polyfill Object.setPrototypeOf\n        Object.setPrototypeOf = Object.setPrototypeOf || function setPrototypeOfPolyfill (obj, proto) {\n            var p = obj.__proto__ || obj.constructor.prototype; // jshint ignore:line\n            p = proto;\n            return obj;\n        };\n\n        /**\n         * Alters Firefox's Function.toString() results to match Chrome/Safari.\n         * @param {String} s The string representation of the function.\n         * @return {String} The altered string, with newlines replaced and 'use strict' removed.\n         */\n        function fixFirefoxFunctionString (s) {\n            return s.replace(/(?:\\r)?\\n+/g, '').replace(/\"use strict\";|'use strict';/g, '');\n        }\n\n        /**\n         * IE doesn't allow Object.keys on primitive types...\n         * @return {Array<String|Number>}\n         */\n        function getKeys (o) {\n            switch(typeof o) {\n                case 'object':\n                    return o ? Object.keys(o) : [];\n\n                case 'string':\n                    var keys = [];\n                    for(var i = 0; i < o.length; i++) keys.push(i.toString());\n                    return keys;\n\n                default:\n                    return [];\n            }\n        }\n\n        var NULL_FUNCTION = function EMPTY_CALLBACK_REPLACEMENT () {};\n\n        var libs = {\n\n            /**\n             * String library functions\n             * @type {Object}\n             */\n            string: {\n\n                /**\n                 * Camelizes all of the provided string arguments.\n                 * @param {...String} string A list of strings to camelize.\n                 * @return {Array<String>} An array of the provided arguments, with all strings camelized.\n                 */\n                camelize: function camelize () {\n                    var ret = [];\n                    libs.object.every(arguments, function (s) {\n                        if(s) {\n                            if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                            s = s.toString().replace(/[^a-z0-9$]/gi, '_').replace(/\\$(\\w)/g, '$_$1').split(/[\\s_]+/g);\n                            libs.object.each(s, 1, s.length, function (i, k) {\n                                this[k] = libs.string.ucFirst(i);\n                            });\n                            s = libs.string.lcFirst(s.join(''));\n                        }\n                        ret.push(s);\n                    });\n                    return ret.length === 1 ? ret[0] : ret;\n                },\n\n                /**\n                 * Decamelizes all of the provided string arguments.\n                 * @param {...String} string A list of strings to decamelize.\n                 * @return {Array<String>} An array of the provided arguments, with all strings decamelized.\n                 */\n                decamelize: function decamelize () {\n                    var ret = [];\n                    libs.object.every(arguments, function (s) {\n                        if(s) {\n                            if(typeof s === 'function') s = fixFirefoxFunctionString(s.toString());\n                            s = s.toString().replace(/([A-Z$])/g, function ($) {\n                                return ' ' + (typeof $ === 'string' ? $.toLowerCase() : '');\n                            });\n                        }\n                        ret.push(typeof s === 'string' ? s.trim() : s);\n                    });\n                    return ret.length === 1 ? ret[0] : ret;\n                },\n\n                /**\n                 * Returns all the characters found in one string but not the other.\n                 * @param {String} s The string to operate on.\n                 * @param {String} other The string to compute the difference against.\n                 * @return {String} A difference string.\n                 */\n                differenceFromString: function differenceFromString (s, other) {\n                    if(typeof other !== 'string' || typeof s !== 'string') return s;\n                    var sarr = s.split(''), oarr = other.split('');\n                    return libs.array.differenceFromArray(sarr, oarr).join('');\n                },\n\n                /**\n                 * Replaces tokens (snippets of text wrapped in brackets) with their values.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The token replaced values.\n                 */\n                replaceTokens: function replaceTokens (s) {\n                    return libs.generic.replaceStringTokens(s);\n                },\n\n                /**\n                 * Returns only the characters common to both strings\n                 * @param {String} s The string to operate on.\n                 * @param {String} other The string to compute the intersection against.\n                 * @return {String} The intersection between the two strings.\n                 */\n                intersectString: function intersectString (s, other) {\n                    if(typeof other !== 'string' || typeof s !== 'string') return s;\n                    var sarr = s.split(''), oarr = other.split('');\n                    return libs.intersectArray(sarr, oarr).join('');\n                },\n\n                /**\n                 * Repeat a string 'times' times.\n                 * @param {String} s The string to operate on.\n                 * @param {Number} times The number of times to repeat the string\n                 * @return {String} The repeated string.\n                 */\n                repeat: function repeat (s, times) {\n                    times = parseInt(times, 10);\n                    times = isNaN(times) || !isFinite(times) || times <= 0 ? 1 : times;\n\n                    var os = s;\n                    for(var i = 1; i < times; i++) s += os;\n                    return s;\n                },\n\n                /**\n                 * Right trims a string. Same as String.trim, but only for the end of a string.\n                 * @param {String} s The string to operate on.\n                 * @param {String} [what='\\\\s+'] What to trim.\n                 * @return {String} The right trimmed string\n                 */\n                rtrim: function rtrim (s, what) {\n                    what = typeof what === 'string' ? what : '\\\\s+';\n                    return s.replace(new RegExp(what + '$'), '');\n                },\n\n                /**\n                 * Left trims a string. Same as String.trim, but only for the beginning of a string.\n                 * @param {String} s The string to operate on.\n                 * @param {String} [what='\\\\s+'] What to trim.\n                 * @return {String} The left trimmed string\n                 */\n                ltrim: function ltrim (s, what) {\n                    what = typeof what === 'string' ? what : '\\\\s+';\n                    return s.replace(new RegExp('^' + what), '');\n                },\n\n                /**\n                 * Escapes HTML special characters\n                 * @param {String} s The string to operate on.\n                 * @return {String} The HTML escaped string\n                 */\n                htmlEncode: function htmlEncode (s) {\n                    var map = {\n                        '&'  : '&amp;',\n                        '<'  : '&lt;',\n                        '>'  : '&gt;',\n                        '\"'  : '&quot;',\n                        '\\'' : '&#039;'\n                    };\n                    return s.replace(/[&<>\"']/g, function (m) { return map[m]; });\n                },\n\n                /**\n                 * Un-escapes HTML special characters\n                 * @param {String} s The string to operate on.\n                 * @return {String} The HTML escaped string\n                 */\n                htmlDecode: function htmlDecode (s) {\n                    var map = {\n                        '&amp;'  : '&',\n                        '&lt;'   : '<',\n                        '&gt;'   : '>',\n                        '&quot;' : '\"',\n                        '&#039;' : '\\''\n                    };\n                    return s.replace(/(&amp;|&lt;|&gt;|&quot;|&#039;)/g, function (m) { return map[m]; });\n                },\n\n                /**\n                 * Creates an 'eval' safe string, by adding slashes to \", ', \\t, \\n, \\f, \\r, and the NULL byte.\n                 * @param {String} s The string to operate on.\n                 * @return {String} A string with slashes\n                 */\n                addSlashes: function addSlashes (s) {\n                    return s.replace(/[\\\\\"'\\t\\n\\f\\r]/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\n                },\n\n                /**\n                 * Returns a string with the first letter capitalized.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The string with the first letter upper cased.\n                 * @function\n                 */\n                ucFirst: function ucFirst (s) {\n                    return s.charAt(0).toUpperCase() + s.slice(1);\n                },\n\n                /**\n                 * Returns a string with the first letter lowercased.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The string with the first letter lower cased.\n                 * @function\n                 */\n                lcFirst: function lcFirst (s) {\n                    return s.charAt(0).toLowerCase() + s.slice(1);\n                },\n\n                /**\n                 * Returns a string in Title Case.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The title cased string.\n                 * @function\n                 */\n                titleCase: function titleCase (s) {\n                    var arr = [];\n                    libs.object.each(s.split(' '), function (t) { arr.push(libs.string.ucFirst(t)); });\n                    return arr.join(' ');\n                },\n\n                /**\n                 * Splices a string, much like an array.\n                 * @param {String} s The string to operate on.\n                 * @param {Number} index The index to begin splicing the string at\n                 * @param {Number} count The number of characters to delete\n                 * @param {String} add The string to append at the spliced section\n                 * @return {String} The spliced string.\n                 * @function\n                 */\n                splice: function splice (s, index, count, add) {\n                    return s.slice(0, index) + (add || '') + s.slice(index + count);\n                },\n\n                /**\n                 * Return a truncated string with ellipses.\n                 * @param {String} s The string to operate on.\n                 * @param {Number=} length The length of the desired string. If ommited, the strings original length will be used.\n                 * @param {String=} [place='back'] Possible values are 'front' and 'back'. Specifying 'front' will truncate the\n                 * string and add ellipses to the front, 'back' (or any other value) will add the ellipses to the back.\n                 * @param {String=} [ellipses='...'] The string value of the ellipses. Use this to add anything other than '...'\n                 * @returns {String} A truncated string with ellipses (if its length is greater than 'length')\n                 * @function\n                 */\n                ellipses: function ellipses_ (s, length, place, ellipses) {\n                    if(isNaN(parseInt(length, 10))) length = s.length;\n                    if(length < 0 || !isFinite(length)) length = 0;\n\n                    ellipses = typeof ellipses === 'string' ? ellipses : '...';\n                    if(s.length <= length) return s;\n\n                    if(length <= ellipses.length) {\n                        return ellipses.substring(0, length);\n                    }\n                    else if(!place || place !== 'front') {\n                        return s.substr(0, length - ellipses.length) + ellipses;\n                    }\n                    else {\n                        return ellipses + s.substr(0, length - ellipses.length);\n                    }\n                },\n\n                /**\n                 * Shuffles a string\n                 * @param {String} s The string to operate on.\n                 * @param {String} splitter A string used to split the string, to tokenize it before shuffling.\n                 * @return {String} The mixed up string.\n                 */\n                shuffle: function shuffle (s, splitter) {\n                    var a = s.split(typeof splitter === 'string' ? splitter : ''), n = a.length,\n                    replaceSplits = n - 1;\n\n                    for(var i = n - 1; i > 0; i--) {\n                        var j = Math.floor(Math.random() * (i + 1)),\n                            tmp = a[i];\n\n                        a[i] = a[j];\n                        a[j] = tmp;\n                    }\n\n                    for(var k = 0; k < replaceSplits; k++) a.splice(libs.number.randomIntInRange(0, a.length), 0, splitter);\n                    return a.join('');\n                },\n\n                /**\n                 * Reverses a string.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The reversed string.\n                 */\n                reverse: function reverse (s) {\n                    if(s.length < 64) {\n                        var str = '';\n                        for(var i = s.length; i >= 0; i--) str += s.charAt(i);\n                        return str;\n                    }\n                    else {\n                        return s.split('').reverse().join('');\n                    }\n                },\n\n                /**\n                 * Strips the trailing slashes from a string.\n                 * @param {String} s The string to operate on.\n                 * If using Node.js, it will replace the trailing slash based on the value of os.platform\n                 * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n                 * @returns {String} The string without a trailing slash.\n                 * @function\n                 */\n                withoutTrailingSlash: function withoutTrailingSlash (s) {\n                    if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return s.replace(/\\\\+$/, '');\n                    return s.replace(/\\/+$/, '');\n                },\n\n                /**\n                 * Add a trailing slash to a string, if it doesn't already have one.\n                 * If using Node.js, it will replace the trailing slash based on the value of os.platform\n                 * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n                 * @param {String} s The string to operate on.\n                 * @returns {String} The string without a trailing slash.\n                 * @function\n                 */\n                withTrailingSlash: function withTrailingSlash (s) {\n                    if(!IS_BROWSER && HAS_OS && require('os').platform === 'win32') return libs.string.withoutTrailingSlash(s) + '\\\\';\n                    return libs.string.withoutTrailingSlash(s) + '/';\n                },\n\n                /**\n                 * Escapes regular expression special characters. This is useful is you wish to create a new regular expression\n                 * from a stored string value.\n                 * @param {String} s The string to operate on.\n                 * @returns {String} The regular expression safe string\n                 * @function\n                 */\n                regexpSafe: function regexpSafe (s) {\n                    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n                },\n\n                /**\n                 * Pads a string with 'delim' characters to the specified length. If the length is less than the string length,\n                 * the string will be truncated.\n                 * @param {String} s The string to operate on.\n                 * @param {Number} length The length to pad the string to. If less that the length of the string, the string will\n                 * be returned. If less than the length of the string, the string will be sliced.\n                 * @param {String=} [delim=' '] The character to pad the string with.\n                 * @param {Boolean=} [pre=false] If true, the padding will be added to the beginning of the string, otherwise the padding\n                 * will be added to the end.\n                 * @returns {String} The padded string\n                 * @function\n                 */\n                pad: function pad (s, length, delim, pre) {\n                    var i, thisLength = s.length;\n\n                    if(!delim) delim = ' ';\n                    if(length === 0) return ''; else if(isNaN(parseInt(length, 10))) return s;\n\n                    length = parseInt(length, 10);\n                    if(length < thisLength) return !pre ? s.slice(0, length) : s.slice(-length);\n\n                    if(pre) {\n                        for(i = 0; i < length - thisLength; i++) s = delim + s;\n                    }\n                    else {\n                        for(i = 0; i < length - thisLength; i++) s += delim;\n                    }\n                    return s;\n                },\n\n                /**\n                 * Replaces newlines with br tags.\n                 * @param {String} s The string to operate on.\n                 * @return {String} The string with newlines converted to br tags.\n                 */\n                newlineToBreak: function newlineToBreak (s) {\n                    return s.replace(/(\\r\\n|\\n)/g, '<br>');\n                },\n\n                /**\n                 * Replaces tabs with a span element with the class 'tab'\n                 * @param {String} s The string to operate on.\n                 * @return {String} The string with tabs converted to spans with the class 'tab'\n                 */\n                tabsToSpan: function tabsToSpan (s) {\n                    return s.replace(/\\t/g, '<span class=\"tab\"></span>');\n                },\n\n                /**\n                 * Adjusts a string to fit within the confines of 'width', without breaking words.\n                 * @param {String} s The string to operate on.\n                 * @param {Number=} [length=120] The length to word wrap the string to.\n                 * @param {Number=} [padleft=0] The number of columns to pad the string on the left\n                 * @param {Number=} [padright=0] The number of columns to pad the string on the right\n                 * @param {Boolean=} omitFirst If true, the first line will not be padded left\n                 * @return {String} The string adjusted and padded for the stdout.\n                 * @function\n                 */\n                wordWrapToLength: function wordWrapToLength (s, width, padleft, padright, omitFirst) {\n                    if(padright === undefined && padleft) padright = padleft;\n\n                    padleft  = !isNaN(parseInt(padleft,  10)) ? parseInt(padleft, 10)  : 0;\n                    padright = !isNaN(parseInt(padright, 10)) ? parseInt(padright, 10) : 0;\n\n                    var paddingLeft = '';\n                    for(var n = 0; n < padleft;  n++) paddingLeft  += ' ';\n\n                    var cols   = !isNaN(parseInt(width, 10)) ? length : 120,\n                        arr    = s.split(' '),\n                        item   = null,\n                        len    = !omitFirst ? cols - padright - padleft : cols - padright,\n                        str    = !omitFirst ? paddingLeft : '',\n                        olen   = cols - padright - padleft;\n\n                    while((item = arr.shift()) !== undefined) {\n                        if(item.length < len) {\n                            str += item + ' ';\n                            len -= item.length + 1;\n                        }\n                        else if(item.length > olen) {\n                            str += item.substring(0, len - 1) + '-\\n' + paddingLeft;\n                            arr.unshift(item.substring(len, item.length - 1));\n                            len = cols - padright - padleft;\n                        }\n                        else {\n                            str += '\\n' + paddingLeft + item + ' ';\n                            len = cols - padright - 1 - padleft - item.length;\n                        }\n                    }\n                    return str;\n                }\n            },\n\n            /**\n             * Date library functions\n             * @type {Object}\n             */\n            date: {\n                /**\n                 * Moves a date forward 'daysInTheFuture' days.\n                 * @param {Date} The date object to operate on.\n                 * @param {Number} daysInTheFuture The number of days in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified days.\n                 * @function\n                 */\n                advanceDays: function advanceDays (d, daysInTheFuture, adjustForWeekend) {\n                    daysInTheFuture = daysInTheFuture && libs.generic.isNumeric(daysInTheFuture) ? daysInTheFuture : 1;\n                    d.setTime(d.getTime() + (daysInTheFuture * 86400000));\n\n                    if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                        while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                    }\n                    return d;\n                },\n\n                /**\n                 * Moves a date forward 'monthsInTheFuture' months.\n                 * @param {Date} The date object to operate on.\n                 * @param {Number} monthsInTheFuture The number of months in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified months.\n                 * @function\n                 */\n                advanceMonths: function advanceMonths (d, monthsInTheFuture, adjustForWeekend) {\n                    monthsInTheFuture = monthsInTheFuture && libs.generic.isNumeric(monthsInTheFuture) ? monthsInTheFuture : 1;\n                    d.setTime(d.getTime() + (monthsInTheFuture * 2629746000));\n\n                    if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                        while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                    }\n                    return d;\n                },\n\n                /**\n                 * Moves a date forward 'yearsInTheFuture' years.\n                 * @param {Date} The date object to operate on.\n                 * @param {Number} yearsInTheFuture The number of years in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified years.\n                 * @function\n                 */\n                advanceYears: function advanceYears (d, yearsInTheFuture, adjustForWeekend) {\n                    yearsInTheFuture = yearsInTheFuture && libs.generic.isNumeric(yearsInTheFuture) ? yearsInTheFuture : 1;\n                    d.setTime(d.getTime() + (yearsInTheFuture * 31536000000));\n\n                    if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                        while(d.getDay() === 0 || d.getDay() === 6) d.setTime(d.getTime() + 86400000);\n                    }\n                    return d;\n                },\n\n                /**\n                 * Returns the date in the yyyy-mm-dd format.\n                 * @param {Date} The date object to operate on.\n                 * @param {String} [delim='-'] The delimiter to used the separate the date components (e.g. '-' or '.')\n                 * @returns {String} The date in the yyyy-mm-dd format.\n                 * @function\n                 */\n                yyyymmdd: function yyyymmdd (d, delim) {\n                    delim = typeof delim !== 'string' ? '-' : delim ;\n\n                    var dd   = d.getDate(),\n                        mm   = d.getMonth() + 1,\n                        yyyy = d.getFullYear();\n\n                    if(dd < 10) dd = '0' + dd;\n                    if(mm < 10) mm = '0' + mm;\n                    return yyyy + delim + mm + delim + dd;\n                },\n\n                /**\n                 * Converts a date to the HH:MM:SS.MSEC time format\n                 * @param {Date} The date object to operate on.\n                 * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n                 * @returns {String} The formatted number, now a string.\n                 * @function\n                 */\n                clockTime: function clockTime (d, omitMS) {\n                    return libs.number.clockTime(d.getTime(), !!omitMS);\n                }\n            },\n\n            /**\n             * Number library functions\n             * @type {Object}\n             */\n            number: {\n\n                /**\n                 * Returns a random integer in range [min, max] (inclusive)\n                 * @param {Number} min The minimum possible value (inclusive)\n                 * @param {Number} max The maximum possible value (inclusive)\n                 * @return {Number} A random number between min and max\n                 */\n                randomIntInRange: function (min, max) {\n                    min = parseInt(min, 10);\n                    max = parseInt(max, 10);\n\n                    if(isNaN(min) && !isFinite(min)) min = 0;\n                    if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                    return Math.floor(Math.random() * (max - min + 1)) + min;\n                },\n\n                /**\n                 * Returns a random float in range [min, max] (inclusive)\n                 * @param {Number} min The minimum possible value (inclusive)\n                 * @param {Number} max The maximum possible value (inclusive)\n                 * @return {Number} A random number between min and max\n                 */\n                randomNumberInRange: function (min, max) {\n                    min = parseInt(min, 10);\n                    max = parseInt(max, 10);\n\n                    if(isNaN(min) && !isFinite(min)) min = 0;\n                    if(isNaN(max) && !isFinite(max)) max = Number.MAX_VALUE;\n                    return Math.random() * (max - min + 1) + min;\n                },\n\n                /**\n                 * Recursively computes the factorial of the number n.\n                 * @param {Number} n A number.\n                 * @return {Number|Infinity} n!\n                 */\n                factorial: function factorial (n) {\n                    if(typeof n !== 'number' || n < 0) return NaN;\n                    if(n > 170) return Infinity;\n                    if(n === 0 || n === 1) return 1;\n                    return n * factorial(n - 1);\n                },\n\n                /**\n                 * Determines is the given numbers are integers\n                 * @param {...Number} n Numbers.\n                 * @return {Boolean} True if all arguments are integers, false otherwise.\n                 */\n                isInt: function isInt () {\n                    return libs.object.every(arguments, function (n) {\n                        return typeof n === 'number' && n % 1 === 0 && n.toString().indexOf('.') === -1;\n                    });\n                },\n\n                /**\n                 * Recursively computes n choose k.\n                 * @param {Number} n A number.\n                 * @param {Number} k A number.\n                 * @return {Number|Infinity} n choose k.\n                 */\n                choose: function choose (n, k) {\n                    if(typeof n !== 'number' || typeof k !== 'number') return NaN;\n                    if(k === 0) return 1;\n                    return (n * choose(n - 1, k - 1)) / k;\n                },\n\n                /**\n                 * Pads a number with preceeding zeros.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Number} length The final length of the string\n                 * @returns {String} The padded number, now a string.\n                 * @function\n                 */\n                pad: function pad (n, length) {\n                    return libs.string.pad(n.toString(), length, '0', true);\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of days.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                daysFrom: function daysFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setDate(date.getDate() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of days.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A date object\n                 */\n                daysFromNow: function daysFromNow (n) {\n                    return libs.number.daysFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of days.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                secondsFrom: function secondsFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setSeconds(date.getSeconds() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of days.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A date object\n                 */\n                secondsFromNow: function secondsFromNow (n) {\n                    return libs.number.secondsFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of years.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                yearsFrom: function yearsFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setFullYear(date.getFullYear() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of years.\n                 * @return {Date} A date object\n                 */\n                yearsFromNow: function yearsFromNow (n) {\n                    return libs.number.yearsFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of months.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                monthsFrom: function monthsFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setMonth(date.getMonth() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of months.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A date object\n                 */\n                monthsFromNow: function monthsFromNow (n) {\n                    return libs.number.monthsFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of hours.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                hoursFrom: function hoursFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setHours(date.getHours() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of hours.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A date object\n                 */\n                hoursFromNow: function hoursFromNow (n) {\n                    return libs.number.hoursFrom(n, new Date());\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of minutes.\n                 * @param {Number} n The number object to operate on.\n                 * @param {Date} date The date to change.\n                 * @return {Date} A modified date.\n                 */\n                minutesFrom: function minutesFrom (n, date) {\n                    if(typeof date === 'number') date = new Date(date);\n                    if(!(date instanceof Date))  date = new Date();\n\n                    date.setMinutes(date.getMinutes() + n);\n                    return date;\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of minutes.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} The date object\n                 */\n                minutesFromNow: function minutesFromNow (n) {\n                    return libs.number.minutesFrom(n, new Date());\n                },\n\n                /**\n                 * The time, months in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                monthsAgo: function monthsAgo (n) {\n                    return libs.number.minutesFromNow(-n, new Date());\n                },\n\n                /**\n                 * The time, days in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                daysAgo: function daysAgo (n) {\n                    return libs.number.daysFromNow(-n, new Date());\n                },\n\n                /**\n                 * The time, seconds in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                secondsAgo: function secondsAgo (n) {\n                    return libs.number.secondsFromNow(-n, new Date());\n                },\n\n                /**\n                 * The time, minutes in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                minutesAgo: function minutesAgo (n) {\n                    return libs.number.minutesFromNow(-n, new Date());\n                },\n\n                /**\n                 * The time, years in the past.\n                 * @param {Number} n The number object to operate on.\n                 * @return {Date} A Date object.\n                 */\n                yearsAgo: function yearsAgo (n) {\n                    return libs.number.yearsFromNow(-n, new Date());\n                },\n\n                /**\n                 * Converts a number to the HH:MM:SS.MSEC time format\n                 * @param {Number} t The number object to operate on.\n                 * @memberof Number.prototype\n                 * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n                 * @returns {String} The formatted number, now a string.\n                 * @function\n                 */\n                clockTime: function clockTime (t, omitMS) {\n                    var ms, secs, mins, hrs;\n\n                    ms = t % 1000;\n                    t = (t - ms) / 1000;\n\n                    secs = t % 60;\n                    t = (t - secs) / 60;\n\n                    mins = t % 60;\n                    hrs = (t - mins) / 60;\n\n                    return libs.number.pad(hrs.toString(), 2)  + ':' + libs.number.pad(mins.toString(), 2) + ':' +\n                           libs.number.pad(secs.toString(), 2) + ((omitMS === true) ? '' : '.' + libs.number.pad(ms.toString(), 3));\n                }\n            },\n\n            /**\n             * Function library functions\n             * @type {Object}\n             */\n            function: {\n\n                /**\n                 * Inherit the prototype methods from one constructor into another.\n                 * Borrowed directly from Node.js\n                 * @param {Function} constructor The inheriting constructor\n                 * @param {Function} superConstructor The parent constructor\n                 * @return {Function} The inheriting constructor\n                 */\n                inherits: function inherits (constructor, superConstructor) {\n                    if (constructor === undefined || constructor === null)\n                        throw new TypeError('The constructor to \"inherits\" must not be ' + 'null or undefined');\n\n                    if (superConstructor === undefined || superConstructor === null)\n                        throw new TypeError('The super constructor to \"inherits\" must not ' + 'be null or undefined');\n\n                    if (superConstructor.prototype === undefined)\n                        throw new TypeError('The super constructor to \"inherits\" must ' + 'have a prototype');\n\n                    constructor.super_ = superConstructor;\n                    Object.setPrototypeOf(constructor.prototype, superConstructor.prototype);\n                    return constructor;\n                },\n            },\n\n            /**\n             * Array library functions\n             * @type {Object}\n             */\n            array: {\n\n                /**\n                 * Shuffles an array\n                 * @param {Array} a The Array object to operate on.\n                 * @return {Array<*>} The mixed up array\n                 */\n                shuffle: function shuffle (a) {\n                    for(var i = a.length - 1; i > 0; i--) {\n                        var j = Math.floor(Math.random() * (i + 1)), tmp = a[i];\n                        a[i] = a[j];\n                        a[j] = tmp;\n                    }\n                    return a;\n                },\n\n                /**\n                 * Computes the union between the current array, and all the array objects passed in. That is,\n                 * the set of unique objects present in all of the arrays.\n                 * @param {Array} a The Array object to operate on.\n                 * @param {...Array} arr A list of array objects\n                 * @return {Array<*>} The union set of the provided arrays.\n                 */\n                union: function union (a) {\n                    var args = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                    var union = [];\n                    args.unshift(a);\n                    libs.object.each(args, function (array) {\n                        libs.object.each(array, function (item) {\n                            if(union.indexOf(item) === -1) union.push(item);\n                        });\n                    });\n                    return union;\n                },\n\n                /**\n                 * Returns all the items unique to all arrays.\n                 * @param {...Array} arrays The Array objects to operate on.\n                 * @param {Array} other The array to compute the difference from.\n                 * @return {Array} A new array with items unique to each array.\n                 */\n                difference: function difference () {\n                    var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                    if(arrays.length === 0) return [];\n                    if(arrays.length === 1) return libs.object.copy(arrays[0]);\n                    var i, simpleDiff = [];\n\n                    if(arrays.length === 2) {\n                        for(i = 0; i < arrays[0].length; i++)\n                            if(arrays[1].indexOf(arrays[0][i]) === -1) simpleDiff.push(arrays[0][i]);\n\n                        for(i = 0; i < arrays[1].length; i++)\n                            if(arrays[0].indexOf(arrays[1][i]) === -1) simpleDiff.push(arrays[1][i]);\n\n                        return simpleDiff;\n                    }\n\n                    var difference = arrays[0], intermediate = [];\n                    for(i = 1; i < arrays.length; i++) {\n                        for(var n = 0; n < difference.length; n++) {\n                            if(arrays[i].indexOf(difference[n]) === -1) {\n                                intermediate.push(difference[n]);\n                            }\n                        }\n                        for(var k = 0; k < arrays.length; k++) {\n                            //if(arrays[i] !== arrays)\n                        }\n                        difference = intermediate;\n                        intermediate = [];\n                    }\n\n                    return difference;\n                },\n\n                /**\n                 * Returns the items common to all arrays.\n                 * @param {...Array} items The arrays from which to compute the intersection.\n                 * @return {Array} A new array with items common to both arrays.\n                 */\n                intersect: function intersect () {\n                    var arrays = libs.object.only(libs.object.toArray(arguments), 'array');\n\n                    if(arrays.length === 0) return [];\n                    if(arrays.length === 1) return libs.object.copy(arrays[0]);\n\n                    var intersection = arrays[0], intermediate = [];\n                    for(var i = 1; i < arrays.length; i++) {\n                        for(var n = 0; n < intersection.length; n++) {\n                            if(arrays[i].indexOf(intersection[n]) > -1) {\n                                intermediate.push(intersection[n]);\n                                var idx = arrays[i].indexOf(intersection[n]);\n                                arrays[i].splice(idx, 1);\n                            }\n                        }\n                        intersection = intermediate;\n                        intermediate = [];\n                    }\n\n                    return intersection;\n                },\n\n                /**\n                 * Creates a new array from the current one, with all occurences of the provided arguments ommited.<br>\n                 * For example: <em>[1,2,3,4,5].without(1)</em> will return <em>[2,3,4,5]</em>\n                 * and <em>[1, null, 2, null, undefined].without(null, undefined)</em> will return <em>[1, 2]</em>\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array<*>} A shallow copy of the array with the provided arguments ommited.\n                 * @function\n                 */\n                without: function without () {\n                    var args = libs.object.toArray(arguments),\n                        a    = args.shift(),\n                        res  = [];\n\n                    libs.object.each(a, function (v) { if(args.indexOf(v) === -1) res.push(v); });\n                    return res;\n                },\n\n                /**\n                 * Rotates the array left or right the specified number of times. If the direction is left, it will shift off the\n                 * first <em>n</em> elements and push them to the end of the array. If right, it will pop off the last <em>n</em>\n                 * items and unshift them onto the front of the array.\n                 * @param {Array} a The Array object to operate on.\n                 * @param {String=} [direction='left'] The direction to rotate array members.\n                 * @param {Number=} [amount=1] The number of elements to shift\n                 * @return {Array<*>} The current array, shifted.\n                 * @function\n                 */\n                rotate: function rotate (a, direction, amount) {\n                    if(direction && libs.object.isNumeric(direction) && !amount) {\n                        amount    = direction;\n                        direction = undefined;\n                    }\n\n                    if(!amount || (amount && !libs.object.isNumeric(amount))) amount = 1;\n                    for(var i = 0; i < amount; i++) {\n                        if(direction !== 'right') a.push(a.shift()); else a.unshift(a.pop());\n                    }\n                    return a;\n                },\n\n                /**\n                 * Rotates the array left the specified number of times.\n                 * This is useful if trying to create a circular queue.\n                 * @param {Array} a The Array object to operate on.\n                 * @param {Number=} [amount=1] The number of times to rotate the array left.\n                 * @return {Array<*>} The current array, rotated left.\n                 * @function\n                 */\n                rotateLeft: function rotateLeft (a, amount) {\n                    return libs.array.rotate(a, 'left', amount);\n                },\n\n                /**\n                 * Rotates the array right the specified number of times.\n                 * This is useful if trying to create a circular queue.\n                 * @param {Array} a The Array object to operate on.\n                 * @param {Number=} [amount=1] The number of times to rotate the array left.\n                 * @return {Array<*>} The current array, rotated right.\n                 * @function\n                 */\n                rotateRight: function rotateLeft (a, amount) {\n                    return libs.array.rotate(a, 'right', amount);\n                },\n\n                /**\n                 * Removes duplicates from the current array.\n                 * This is a destructive action, and will modify the array in place.\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array<*>} The current array, with duplicates removed.\n                 * @function\n                 */\n                makeUnique: function makeUnique (a) {\n                    var visited = [];\n                    for(var i = 0; i < a.length; i++) {\n                        if(visited.indexOf(a[i]) === -1) {\n                            visited.push(a[i]);\n                        }\n                        else {\n                            a.splice(i, 1);\n                            i--; // Splice will affect the internal array pointer, so fix it...\n                        }\n                    }\n                    return a;\n                },\n\n                /**\n                 * Gets an array of unique items from the current array.\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array} A new array with no duplicate values.\n                 * @function\n                 */\n                unique: function unique (a) {\n                    var visited = [],\n                        unique  = [];\n\n                    libs.object.each(a, function (item) {\n                        if(visited.indexOf(item) === -1) {\n                            unique.push(item);\n                            visited.push(item);\n                        }\n                    });\n                    return unique;\n                },\n\n                /**\n                 * Sorts the array in ascending order.\n                 * This is a destructive action, and will modify the array in place.\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array} The array sorted in ascending order.\n                 * @function\n                 */\n                ascending: function ascending (a) {\n                    return a.sort(function (a, b) {\n                        if(a !== undefined && a !== null) a = a.toString();\n                        if(b !== undefined && b !== null) b = b.toString();\n                        return a < b ? -1 : a > b ? 1 : 0;\n                    });\n                },\n\n                /**\n                 * Sorts the array in descending order.\n                 * This is a destructive action, and will modify the array in place.\n                 * @param {Array} a The Array object to operate on.\n                 * @returns {Array} The array sorted in descending order.\n                 * @function\n                 */\n                descending: function descending (a) {\n                    return a.sort(function (a, b) {\n                        if(a !== undefined && a !== null) a = a.toString();\n                        if(b !== undefined && b !== null) b = b.toString();\n                        return a > b ? -1 : a < b ? 1 : 0;\n                    });\n                }\n            },\n\n            /**\n             * Array library functions\n             * @type {Object}\n             */\n            object: {\n\n                /**\n                 * Gets the unique id of an object.\n                 * Only works for non-literals, otherise Object.__get_protolib_id__ will throw.\n                 * @param {Object|Function} o The object to get the unique id for.\n                 * @return {String} A unique object id\n                 */\n                uniqueId: function uniqueId (o) {\n                    return o.__get_protolib_id__;\n                },\n\n                /**\n                 * Computes the frequencies for each item in all of arguments.\n                 * @param {...*} objs The objects to compute the histogram from.\n                 * @return {Object<Number>} An object that has the items from all of the arguments as its keys and their frequencies as it's values.\n                 */\n                histogram: function histogram () {\n                    var histogram = {};\n                    libs.object.every(arguments, function (o) {\n                        if(typeof o === 'boolean') {\n                            if(!histogram[o]) histogram[o] = 1; else histogram[o]++;\n                        }\n                        else if(typeof o === 'function') {\n                            if(!histogram['function']) histogram['function'] = 1; else histogram[o]++;\n                        }\n                        else {\n                            libs.object.every(o, function (val) {\n                                switch(true) {\n                                    case typeof val === 'function':\n                                    case typeof val === 'undefined':\n                                        val = typeof val;\n                                        break;\n                                    case typeof val === 'object' && val === null:\n                                        val = 'null';\n                                        break;\n                                    case typeof val === 'object' && val instanceof Array:\n                                        val = 'array';\n                                        break;\n                                    case typeof val === 'object':\n                                        val = 'object';\n                                        break;\n                                    default:\n                                        val = val.toString();\n                                }\n\n                                if(typeof histogram[val] !== 'number') histogram[val] = 0;\n                                histogram[val]++;\n                            });\n                        }\n                    });\n                    return histogram;\n                },\n\n                /**\n                 * Creates a shallow copy of 'item'.\n                 * @param {*} item The item to shallow \"copy\".\n                 * @return {*} A shallow copy of the item.\n                 */\n                copy: function copy (item) {\n                    var copy;\n                    if(!item) return item;\n\n                    switch (typeof item) {\n                        case 'string':\n                        case 'number':\n                        case 'function':\n                        case 'boolean':\n                            return item;\n\n                        default:\n                            if(item instanceof Array) {\n                                copy = [];\n                            }\n                            else {\n                                copy = {};\n                            }\n                    }\n\n                    libs.object.every(item, function (o, k) { copy[k] = o; });\n                    return copy;\n                },\n\n                /**\n                 * Returns the number of occurences of \"what\"\n                 * @param {*} obj The item to count the occurences of \"what\" in.\n                 * @param {*} what The item to count the occurences of the item in the array.\n                 * @return {[type]} [description]\n                 */\n                occurrencesOf: function occurrencesOf (obj, what) {\n                    if(arguments.length < 2) return 0;\n\n                    if(typeof obj === 'boolean') {\n                        return 0;\n                    }\n                    if(typeof obj === 'number') {\n                        return occurrencesOf(obj.toString(), what);\n                    }\n                    else if(typeof obj === 'function') {\n                        return occurrencesOf(fixFirefoxFunctionString(obj.toString()), what);\n                    }\n\n                    var count = 0;\n                    if(typeof obj === 'string') {\n                        if(typeof what === 'string' || typeof what === 'number') {\n                            var regexp = new RegExp(what.toString(), 'g'), m;\n                            while(m = regexp.exec(obj)) count++; // jshint ignore:line\n                        }\n                    }\n                    else if(typeof obj !== 'string') {\n                        libs.object.every(obj, function (item) {\n                            if(item === what) count++;\n                        });\n                    }\n                    return count;\n                },\n\n                /**\n                 * Returns the object's keys.\n                 * @param {Object} o The object to operate on.\n                 * @returns {Array<String|Number>} The object's key set\n                 * @function\n                 */\n                keys : function keys (o) {\n                    if(o === undefined || o === null) return [];\n\n                    var keys = getKeys(o), idx;\n                    if(libs.object.isArguments(o)) {\n                        idx = keys.indexOf('length');\n                        if(idx > -1) keys.splice(idx, 1);\n                    }\n                    return keys;\n                },\n\n                /**\n                 * Returns the 'size' or 'length' of an object.\n                 * <ul>\n                 *      <li> String   -> The string's length  </li>\n                 *      <li> Number   -> The number of digits </li>\n                 *      <li> Object   -> The number of keys   </li>\n                 *      <li> Array    -> The number of items  </li>\n                 *      <li> Function -> 1                    </li>\n                 * </ul>\n                 * @param {Object} o The object to operate on.\n                 * @returns {Number} The number of items within the object.\n                 * @function\n                 */\n                size: function size (o) {\n                    switch(true) {\n                        case typeof o === 'function':\n                            return 1;\n\n                        case typeof o === 'number':\n                            return o.toString().length;\n\n                        case o instanceof Array:\n                        case typeof o === 'string':\n                            return o.length;\n\n                        case libs.object.isArguments(o) && typeof o.length !== 'undefined':\n                            return o.length - 1;\n\n                        case o && typeof o === 'object':\n                            return Object.keys(o).length;\n\n                        default:\n                            return 0;\n                    }\n                },\n\n                /**\n                 * Determines if an object can be converted to a number.\n                 * @param {...Object} o The object to operate on.\n                 * @returns {Boolean} True if the object is numeric, false otherwise.\n                 * @function\n                 */\n                isNumeric: function isNumeric () {\n                    return libs.object.every(arguments, function (item) {\n                        return !isNaN(parseFloat(item)) && isFinite(item);\n                    });\n                },\n\n                /**\n                 * Converts an object to a number.\n                 * @param {...Object} o The object to operate on.\n                 * @returns {Number} The object as a number.\n                 * @function\n                 */\n                getNumeric: function getNumeric () {\n                    var res = [], len = arguments.length;\n                    libs.object.every(arguments, function (item) {\n                        res.push(!isNaN(parseFloat(item)) && isFinite(item));\n                    });\n                    return len === 1 ? res[0] : res;\n                },\n\n                /**\n                 * Determines if an object has no keys, if an array has no items, or if a string === ''.\n                 * @param {...Object} o The object to operate on.\n                 * @returns {Boolean} True if the object is 'empty', false otherwise.\n                 * @function\n                 */\n                isEmpty: function isEmpty () {\n                    return libs.object.every(arguments, function (item) {\n                        return libs.object.size(item) === 0 && item !== false && item !== '' && item !== true;\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all arrays, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is an array, false otherwise.\n                 */\n                isArray: function isArray () {\n                    return libs.object.every(arguments, function (item) {\n                        return item instanceof Array;\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all objects and not arrays, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is an object and not an array, false otherwise.\n                 */\n                isPureObject: function isPureObject () {\n                    return libs.object.every(arguments, function (item) {\n                        return !(item instanceof Array) && typeof item === 'object';\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all strings, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a string, false otherwise.\n                 */\n                isString: function isString () {\n                    return libs.object.every(arguments, function (item) {\n                        return typeof item === 'string';\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all booleans, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a boolean, false otherwise.\n                 */\n                isBoolean: function isBoolean () {\n                    return libs.object.every(arguments, function (item) {\n                        return typeof item === 'boolean';\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are allfunction, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a function, false otherwise.\n                 */\n                isFunction: function isFunction () {\n                    return libs.object.every(arguments, function (item) {\n                        return typeof item === 'function';\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are allll, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a function, false otherwise.\n                 */\n                isNull: function isNull () {\n                    return libs.object.every(arguments, function (item) {\n                        return item === null;\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all undefined, false otherwise.\n                 * @param {...Object} o The object to operate on.\n                 * @return {Boolean} True if the object is a function, false otherwise.\n                 */\n                isUndefined: function isUndefined () {\n                    return libs.object.every(arguments, function (item) {\n                        return item === undefined;\n                    });\n                },\n\n                /**\n                 * True if the objects passed in are all arguments objects, false otherwise.\n                 * @param {Object} o The object to operate on.\n                 * @return {Boolean} True if the object is an arguments object, false otherwise\n                 */\n                isArguments: function isArguments () {\n                    return libs.object.every(arguments, function (item) {\n                        return Object.prototype.toString.call(item) === '[object Arguments]';\n                    });\n                },\n\n                /**\n                 * Convers an object to a number, if possible.\n                 * @param {...Object} o The object to operate on.\n                 * @returns {Number} The object as a float or NaN.\n                 * @function\n                 */\n                toNumber: function toNumber () {\n                    var vals = [];\n                    libs.object.every(arguments, function (o) {\n                        vals.push(libs.object.isNumeric(o) ? parseFloat(o) : NaN);\n                    });\n                    return vals.length === 1 ? vals[0] : vals;\n                },\n\n                /**\n                 * Convers an object to an integer, if possible.\n                 * @param {Object} o The object to operate on.\n                 * @returns {Number} The object as an integer or NaN.\n                 * @function\n                 */\n                toInt: function toInt () {\n                    var vals = [];\n                    libs.object.every(arguments, function (o) {\n                        var radix = /^0x/.test(o) ? 16 : 10; // Check for hex string\n                        vals.push(libs.object.isNumeric(o) ? parseInt(o, radix) : NaN);\n                    });\n                    return vals.length === 1 ? vals[0] : vals;\n                },\n\n                /**\n                 * Returns a random array item, random object property, random character in a string, or random digit in a number.\n                 * @param {Object} o The object to operate on.\n                 * @returns {*}\n                 * @function\n                 */\n                random: function random (o) {\n                    if(typeof o === 'object') {\n                        return o instanceof Array ?\n                            o[Math.floor(Math.random() * o.length)] :\n                            o[Object.keys(o)[Math.floor(Math.random() * Object.keys(o).length)]];\n                    }\n                    else if(typeof o === 'string' || typeof o === 'number') {\n                        var val = o, negative = false;\n\n                        if(o.length === 0) return '';\n                        if(typeof o === 'number' && o < 0) {\n                            negative = true;\n                            val = Math.abs(val);\n                        }\n\n                        val = val.toString()[Math.floor(Math.random() * val.toString().length)];\n                        if(typeof o === 'number') val = parseInt(val, 10);\n                        return negative ? -val : val;\n                    }\n                    return o;\n                },\n\n                /**\n                 * Invokes the callback 'f' for each property the object contains. If this is called\n                 * on a number or function, the object will be cast to a string.<br><br>\n                 * The callback `f` will be invoked with the following arguments:\n                 * <ul>\n                 * \t<li>value     - The value of the current object being iterated over</li>\n                 * \t<li>key       - The key of the current object (if an object, the index if an array)</li>\n                 * \t<li>iteration - The current iteration (same as key if a string or array)</li>\n                 * \t<li>exit      - A function which will break the loop and return the values passed to it,\n                 * \t\t\t\t\tor a single value if only a single value is passed.</li>\n                 * </ul>\n                 * @function\n                 * @param {Object} o The object to operate on.\n                 * @param {Number=} [rangeA=0] The iteration start index\n                 * @param {Number=} [rangeB='length of the item'] The iteration end index\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {*} The value passed to the exit parameter of the callback...\n                 */\n                each: function each (o, rangeA, rangeB, f) {\n\n                    // Can't use last here.. would cause circular ref...\n                    f = undefined;\n                    for(var k = arguments.length - 1; k >= 0; k--) {\n                        if(arguments[k] instanceof Function) {\n                            f = arguments[k];\n                            break;\n                        }\n                    }\n\n                    var ret    = null,\n                        broken = false,\n                        self   = o,\n                        keys, property, value,\n\n                        exit = function () {\n                            broken   = true;\n                            ret      = arguments.length > 1 ? libs.object.toArray(arguments) : arguments[0];\n                        };\n\n                    if(f instanceof Function) {\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                        // Firefox does some funky stuff here...\n                        if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                        // For Safari\n                        var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                        keys = getKeys(self);\n                        idx  = keys.indexOf('length');\n\n                        if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                        rangeA = parseInt(rangeA);\n                        rangeA = (isNaN(rangeA) || !isFinite(rangeA)) ? 0 : rangeA;\n\n                        rangeB = parseInt(rangeB);\n                        rangeB = (isNaN(rangeB) || !isFinite(rangeB)) ? keys.length : rangeB;\n\n                        var i = 0, n;\n                        if(Math.abs(rangeA) > Math.abs(rangeB)) {\n                            if(rangeB < 0) rangeB = 0;\n                            if(rangeA < 0) rangeA = 0;\n                            if(rangeA > keys.length - 1) rangeA = keys.length - 1;\n\n                            for(n = rangeA; n >= rangeB; n--) {\n                                property = keys[n];\n                                value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                                f.call(o, value, property, n, exit, i++, o);\n                                if(broken) break;\n                            }\n                        }\n                        else {\n                            rangeB = rangeB + 1 > keys.length ? keys.length : rangeB + 1;\n                            if(rangeB < 0) rangeB = 0;\n                            if(rangeA < 0) rangeA = 0;\n\n                            for(n = rangeA; n < rangeB; n++) {\n                                property = keys[n];\n                                value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                                f.call(o, value, property, n, exit, i++, o);\n                                if(broken) break;\n                            }\n                        }\n                    }\n                    return ret;\n                },\n\n                /**\n                 * Invokes the callback 'f' for every property the object contains. If the callback returns false, the\n                 * loop is broken and false is returned; otherwise true is returned.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {Boolean} True if none of the callback invocations returned false.\n                 * @function\n                 */\n                every: function every (o, f) {\n                    f = f instanceof Function ? f : undefined;\n\n                    if(f instanceof Function) {\n                        var self = o, keys, property, value;\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                        // Firefox does some funky stuff here...\n                        if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                        // For Safari...\n                        var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                        keys = getKeys(self);\n                        idx  = keys.indexOf('length');\n\n                        if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                        var i = 0;\n                        for(var n = 0; n < keys.length; n++) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            if(f.call(o, value, property, n, i++, o) === false) return false;\n                        }\n                    }\n                    return true;\n                },\n\n                /**\n                 * Invokes the callback 'f' for every property the object contains. If the callback returns true, the\n                 * loop is broken and false is returned; otherwise true is returned.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {Boolean} True if none of the callback invocations returned false.\n                 * @function\n                 */\n                any: function any (o, f) {\n                    f = f instanceof Function ? f : undefined;\n\n                    if(f instanceof Function) {\n                        var self = o, keys, property, value;\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                        // Firefox does some funky stuff here...\n                        if(typeof o === 'function') self = fixFirefoxFunctionString(self);\n\n                        // For Safari...\n                        var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                        keys = getKeys(self);\n                        idx  = keys.indexOf('length');\n\n                        if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                        var i = 0;\n                        for(var n = 0; n < keys.length; n++) {\n                            property = keys[n];\n                            value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                            var ret = f.call(o, value, property, n, i++, o);\n                            if(ret !== undefined) return ret;\n                        }\n                    }\n                    return undefined;\n                },\n\n                /**\n                 * Converts an object to an array. For strings, numbers, and functions this will\n                 * return a char array to their respective .toString() values\n                 * @param {Object} o The object to operate on.\n                 * @function\n                 * @return {Array<*>} The object, converted to an array.\n                 */\n                toArray: function toArray (o) {\n                    if(o instanceof Array) return libs.object.copy(o);\n                    var arr = [];\n                    libs.object.each(o, function (val) { arr.push(val); });\n                    return arr;\n                },\n\n                /**\n                 * Returns the first n elements of an object. If the object is an array, and only one items is retrieved,\n                 * that item will be returned, rather than an array.\n                 * @param {Object} o The object to operate on.\n                 * @param {Number=} [n=1] The number of elements to return\n                 * @return {Array<*>} The first n elements of the array.\n                 */\n                first: function first (o, n) {\n                    n = parseInt(n, 10);\n                    n = isNaN(n) || !isFinite(n) ? 1 : n;\n                    var v = null;\n\n                    if(typeof o === 'boolean') {\n                        return o;\n                    }\n                    else if(typeof o !== 'object') {\n                        if(n !== 0) v = o.toString().slice(0, n); else return null;\n                    }\n                    else if(o instanceof Array) {\n                        if(n === 1) return o[0];\n                        return n !== 0 ? o.slice(0, n) : [];\n                    }\n                    else {\n                        v = {};\n                        libs.object.each(o, 0, n - 1, function (item, key) { v[key] = item; });\n                        var keys = getKeys(v);\n                        return keys.length === 1 ? v[keys[0]] : v;\n                    }\n                    return v.length === 1 ? v[0] : v;\n                },\n\n                /**\n                 * Returns the last n elements of an object. If the object is an array, and only one items is retrieved,\n                 * that item will be returned rather than an array.\n                 * @param {Object} o The object to operate on.\n                 * @param {Number=} [n=1] The number of elements to return\n                 * @return {Array<*>} The last n elements of the array.\n                 * @function\n                 */\n                last: function last (o, n) {\n                    if(typeof o === 'boolean') return o;\n\n                    n = parseInt(n, 10);\n                    n = isNaN(n) || !isFinite(n) ? 1 : n;\n                    var v = null, keys, len = libs.object.size(o), idx;\n\n                    if(typeof o === 'boolean') {\n                        return o;\n                    }\n                    else if(libs.object.isArguments(o)) {\n                        keys = getKeys(o);\n                        idx  = keys.indexOf('length');\n\n                        if(idx > -1) keys.splice(idx, 1);\n                        v = []; len = keys.length;\n                        // Arguments object should ignore undefined members...\n                        libs.object.each(keys, 0, len, function (k) { if(o[k] !== undefined) v.unshift(o[k]); });\n                        v = v.slice(0, n);\n                    }\n                    else if(typeof o !== 'object') {\n                        if(n !== 0) v = o.toString().slice(-n); else return null;\n                    }\n                    else if(o instanceof Array) {\n                        if(n === 1) return o[o.length -1];\n                        return n !== 0 ? o.slice(-n) : [];\n                    }\n                    else {\n                        v = {};\n                        if(n < 0) n = 0;\n                        libs.object.each(o, len - n, len, function (item, key) { v[key] = item; });\n                        keys = getKeys(v);\n                        return keys.length === 1 ? v[keys[0]] : v;\n                    }\n                    return v.length === 1 ? v[0] : v.length > 0 ? v : null;\n                },\n\n                /**\n                 * If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n                 * Useful for ensuring that a callback can always be invoked, without checking if the argument is a function\n                 * over and over.\n                 * @param {Object} o The object to get the callback for.\n                 * @return {Function} If the last item in the object is a function, it will be returned. Otherwise, an \"empty\" function will be returned.\n                 */\n                getCallback: function getCallback (o) {\n                    var last = libs.object.last(o);\n                    return last instanceof Function ? last : NULL_FUNCTION;\n                },\n\n                /**\n                 * Find a child of an object using the given path, split by the given delimiter (or '.' by default)\n                 * @param {Object} o The object to operate on.\n                 * @param {String} path The path to the child object\n                 * @param {String=} [delimiter='.'] The path delimiter\n                 * @param {Function=} done A callback for completion\n                 * @return {*|Null} The child object at the given string path, or null if it doesn't exist.\n                 * @function\n                 */\n                findChildAtPath: function findChildAtPath (o, path, delimiter, original, invoked, done) {\n                    done = libs.object.getCallback(arguments);\n                    var self = o;\n\n                    original = (!(original instanceof Function) && original) ? original : self;\n                    invoked  = invoked || false;\n\n                    if(typeof o === 'object' && typeof path === 'string') {\n                        delimiter = typeof delimiter === 'string' ? delimiter : '.';\n                        path      = path.split(delimiter);\n\n                        var p = path.shift();\n                        if(p) {\n                            return libs.object.each(o, function (o, k, i, exit) {\n                                if(path.length === 0 && k === p) {\n                                    done.call(original, o, self, k);\n                                    invoked = true;\n                                    exit(o);\n                                }\n                                else {\n                                    var obj = libs.object.findChildAtPath(o, path.join(delimiter), delimiter, original, invoked, done);\n                                    if(obj !== null) exit(obj);\n                                }\n                            });\n                        }\n                    }\n                    if(!invoked && original === self && done instanceof Function) done.call(original, null, self, null);\n                    return null;\n                },\n\n                /**\n                 * Produces a shallow clone of the object, that is, if JSON.stringify can handle it.<br>\n                 * The object must be non-circular.\n                 * @param {Object} o The object to operate on.\n                 * @return {*} A shallow clone of the object.\n                 * @function\n                 */\n                clone: function clone (o) {\n                    if(typeof o === 'string' || typeof o === 'number') return o;\n\n                    try {\n                        return JSON.parse(JSON.stringify(o));\n                    }\n                    catch (e) {\n                        throw new Error('Unable to clone object: ' + e.message);\n                    }\n                },\n\n                /**\n                 * Filters an array or object using only the types allowed. That is, if the item in the array is of a type listed\n                 * in the arguments, then it will be added to the filtered array. In this case 'array' is a valid type.\n                 * @param {Object} o The object to operate on.\n                 * @param {...String} types A list of typeof types that are allowed in the array.\n                 * @return {Array<*>} An array filtered by only the allowed types.\n                 */\n                only: function only (o, types) {\n                    types = libs.object.toArray(arguments);\n                    types.shift();\n\n                    // Allows the 'plural' form of the type...\n                    libs.object.each(types, function (type, key) { this[key] = type.replace(/s$/, ''); });\n\n                    if(typeof o !== 'object' || !o) return o;\n                    var isArray  = o instanceof Array ? true : false,\n                        filtered = isArray ? [] : {},\n                        typeArr  = types.indexOf('array'),\n                        typeObj  = types.indexOf('object object');\n\n                    libs.object.each(o, function (item, key) {\n                        var typeItem = types.indexOf(typeof item);\n\n                        if(typeObj !== -1 && typeArr === -1) {\n                            if((typeof item === 'object' && !(item instanceof Array)) || (typeof item !== 'object' && typeItem !== -1)) {\n                                if(isArray) filtered.push(item); else filtered[key] = item;\n                            }\n                        }\n                        else if(typeObj !== -1 && typeArr !== -1) {\n                            types.push('object');\n                            if(typeItem !== -1) {\n                                if(isArray) filtered.push(item); else filtered[key] = item;\n                            }\n                        }\n                        else if(typeItem !== -1 || (item instanceof Array && typeArr !== -1)) {\n                            if(isArray) filtered.push(item); else filtered[key] = item;\n                        }\n                    });\n                    return filtered;\n                },\n\n                /**\n                 * Filters an object using the given predicate function. For objects, a new object will be returned, with\n                 * the values that passed the predicate function. For strings, a new string will be returned with the characters\n                 * that passed the predicate function. For numbers, a new number will be returned with the digits that passed\n                 * the predicate function. Functions will be operated on as strings.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function} predicate The function used to filter the object.\n                 * @return {*} The filtered object\n                 */\n                where: function where (o, predicate) {\n                    if(!(predicate instanceof Function)) {\n                        var temp = predicate;\n                        predicate = function (i) { return i == temp; }; // jshint ignore:line\n                    }\n\n                    if(o === null || o === undefined) return o;\n                    if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                    var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                        filtered = !isObject ? [] : {};\n\n                    libs.object.each(o, function (item, key) {\n                        if(predicate.call(item, item, key)) {\n                            if(isObject) filtered[key] = item; else filtered.push(item);\n                        }\n                    });\n\n                    if(typeof o !== 'object') filtered = filtered.join('');\n                    return filtered;\n                },\n\n                /**\n                 * Filters an object by keys using the given predicate function.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function} predicate The function used to filter the object.\n                 * @return {*} The filtered object\n                 */\n                whereKeys: function whereKeys (o, predicate) {\n                    if(!(predicate instanceof Function)) {\n                        var temp = predicate;\n                        predicate = function (k) { return k == temp; }; // jshint ignore:line\n                    }\n\n                    if(o === null || o === undefined) return o;\n                    if(typeof 0 === 'boolean') return predicate.call(o, o, 0);\n\n                    var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                        filtered = !isObject ? [] : {};\n\n                    libs.object.each(o, function (item, key) {\n                        if(predicate.call(key, key, item)) {\n                            if(isObject) filtered[key] = item; else filtered.push(item);\n                        }\n                    });\n\n                    if(typeof o !== 'object') filtered = filtered.join('');\n                    return filtered;\n                },\n\n                /**\n                 * For objects, inverts the objects keys/values. If the value isn't a number or array, it will be omitted.\n                 * For strings, it will reverse the string.\n                 * For number, it will compute the number's inverse (i.e. 1 / x).\n                 * For functions, invert returns a new function that wraps the given function and inverts it's result.\n                 * @param {Object} o The object to operate on.\n                 * @return {*} The inverse, as described above.\n                 */\n                invert: function invert (o) {\n                    if(o === null || o === undefined) return o;\n                    if(typeof o === 'string')   return libs.string.reverse(o);\n                    if(typeof o === 'number')   return 1 / o;\n                    if(typeof o === 'boolean')  return !o;\n\n                    if(typeof o === 'function') {\n                        return function () { return libs.object.invert(o.apply(o, arguments)); };\n                    }\n\n                    var obj = {};\n                    libs.object.each(o, function (item, key) {\n                        if(typeof item === 'string' || typeof item === 'number') {\n                            if(!obj[item]) {\n                                obj[item] = key;\n                            }\n                            else {\n                                var tmp = obj[item];\n                                obj[item] = [];\n                                obj[item].push(tmp, key);\n                            }\n                        }\n                    });\n\n                    return obj;\n                },\n\n                /**\n                 * Returns the maximum item in the object.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n                 * @return {*} The maximum item in the object collection.\n                 */\n                max: function max (o, func) {\n                    if(!o || typeof o !== 'object') return o;\n                    if(!(func instanceof Function)) func = undefined;\n                    var max, maxValue;\n\n                    if(!func) {\n                        max = libs.object.first(o);\n                        libs.object.each(o, 1, function (item) {\n                            if(item >= max) max = item;\n                        });\n                    }\n                    else {\n                        max = libs.object.first(o);\n                        maxValue = func.call(max, max);\n\n                        libs.object.each(o, 1, function (item) {\n                            if(func.call(item, item) >= maxValue) max = item;\n                        });\n                    }\n                    return max;\n                },\n\n                /**\n                 * Returns the minimum item in the object.\n                 * @param {Object} o The object to operate on.\n                 * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n                 * @return {*} The minimum item in the object collection.\n                 */\n                min: function min (o, func) {\n                    if(!o || typeof o !== 'object') return o;\n                    if(!(func instanceof Function)) func = undefined;\n\n                    if(typeof o !== 'object') return o;\n                    var min, minValue;\n\n                    if(!func) {\n                        min = libs.object.first(o);\n                        libs.object.each(o, 1, function (item) {\n                            if(item <= min) min = item;\n                        });\n                    }\n                    else {\n                        min = libs.object.first(o);\n                        minValue = func.call(min, min);\n\n                        libs.object.each(o, 1, function (item) {\n                            if(func.call(item, item) <= minValue) min = item;\n                        });\n                    }\n                    return min;\n                },\n\n                /**\n                 * Tests whether or not the object has a method called 'method'.\n                 * @param {Object} o The object to operate on.\n                 * @param {String} method The name of the method to test existence for.\n                 * @return {Boolean} True if the object has a function called 'method', false otherwise.\n                 */\n                implements: function _implements () {\n                    var args = libs.object.toArray(arguments),\n                        a    = args.shift();\n\n                    if(!a) return false;\n                    return libs.object.every(args, function (m) {\n                        if(!(a[m] instanceof Function)) return false;\n                    });\n                },\n\n                /**\n                 * Same as Object.j.implements, excepct with a hasOwnProperty check.\n                 * @param {Object} o The object to operate on.\n                 * @param {String} method The name of the method to test existence for.\n                 * @return {Boolean} True if the object has its own function called 'method', false otherwise.\n                 */\n                implementsOwn: function implementsOwn (o, method) {\n                    var args = libs.object.toArray(arguments),\n                        a    = args.shift();\n\n                    if(!a) return false;\n                    return libs.object.every(args, function (m) {\n                        if(!(a[m] instanceof Function) || !o.hasOwnProperty(method)) return false;\n                    });\n                }\n            },\n\n            error: {\n                /** @todo: Add some Error utility functions... */\n            },\n\n            boolean: {\n                /** @todo: Add some Boolean utility functions... */\n            },\n\n            math: {\n                /** @todo: Add some Math utility functions... */\n            },\n\n            regexp: {\n                /** @todo: Add some RegExp utility functions... */\n            }\n        };\n        return libs;\n    }\n    module.exports = libs;\n}());\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n"],"sourceRoot":"/source/"}