{"version":3,"sources":["jlib.js"],"names":["isNode","module","exports","process","argv","Array","IS_NODE","JLibrary","protoIdentifier","performWithCurrent","callback","value","ostack","length","valueOf","pop","addToOtherPrototypes","n","o","shift","keys","Object","JLib","_object","i","hasOwnProperty","PROTO_IDENTIFIER","extend","toPrototype","name","func","toLowerCase","replace","args","arguments","toArray","c","apply","init","defineProperty","prototype","configurable","enumerable","get","push","this","String","_string","Number","_number","Date","_date","_array","unload","differenceFromString","other","s","sarr","split","oarr","differenceFromArray","join","replaceTokens","replaceStringTokens","intersectString","intersectArray","repeat","times","parseInt","isNaN","isFinite","os","rtrim","what","RegExp","ltrim","htmlEncode","map","&","<",">","\"","'","m","htmlDecode","&amp;","&lt;","&gt;","&quot;","&#039;","addSlashes","ucFirst","charAt","toUpperCase","slice","lcFirst","titleCase","arr","each","t","splice","index","count","add","ellipses","place","substring","substr","shuffle","a","j","Math","floor","random","tmp","reverse","str","withoutTrailingSlash","require","platform","withTrailingSlash","regexpSafe","pad","delim","pre","thisLength","newlineToBreak","tabsToSpan","wordWrapToLength","width","padleft","padright","omitFirst","undefined","paddingLeft","cols","item","len","olen","unshift","advanceDays","daysInTheFuture","adjustForWeekend","d","isNumeric","setTime","getTime","getDay","advanceMonths","monthsInTheFuture","advanceYears","yearsInTheFuture","yyyymmdd","dd","getDate","mm","getMonth","yyyy","getFullYear","clockTime","omitMS","toString","daysFrom","date","setDate","daysFromNow","secondsFrom","setSeconds","getSeconds","secondsFromNow","yearsFrom","setFullYear","yearsFromNow","monthsFrom","setMonth","monthsFromNow","hoursFrom","setHours","getHours","hoursFromNow","minutesFrom","setMinutes","getMinutes","minutesFromNow","monthsAgo","daysAgo","secondsAgo","minutesAgo","yearsAgo","ms","secs","mins","hrs","union","makeArray","only","array","indexOf","diff","intersection","without","res","v","rotate","direction","amount","rotateLeft","rotateRight","makeUnique","visited","unique","ascending","sort","b","descending","size","isArguments","parseFloat","numeric","isEmpty","isArray","isPureObject","isString","isBoolean","isFunction","call","toNumber","NaN","toInteger","obj","val","negative","abs","rangeA","rangeB","f","k","Function","property","ret","broken","self","exit","isArgs","idx","every","first","key","last","findChildAtPath","path","delimiter","original","invoked","done","NULLF","p","clone","JSON","parse","stringify","e","Error","message","types","type","filtered","where","predicate","isObject","whereKeys","invert","max","maxValue","min","minValue","implements","method","implementsOwn","enabledOrDisabled","JSONFunctionReplacer","getCallback","argumentsObject","customTokens","toLocaleString","hour12","now","toLocaleTimeString","toLocaleDateString","USER_HOME","TMPDIR","createToken","named","withValue","generateArgumentsStringFromObject","produceArray","concat","randomString","possible","text","isNull","isUndefined","staticIdentityFunction","bind","__dirname","jlibs","jInit","window"],"mappings":"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","file":"jlib.min.js","sourcesContent":["'use strict';\n/**\n * A massive prototype standard library, which prevents prototype namespace collisions by \"tucking\" the library\n * under the namespace 'jlib'.\n *\n * Browser and Node.js compatible. Compatible with both *nix and Windows.\n * Adds a bunch of helper functions to String, Object, Number, Function, and Array prototypes under the object 'jlib'.\n *\n * Prototyping is achieved without using any performance degredating calls to 'bind', and uses a simple object to store the\n * current objects being operated on.\n *\n * This file *avoids* ES6 features wherever possible, for browser compatibility.\n *\n * @author Jason Pollman <jasonjpollman@gmail.com>\n * @module jLib\n */\n\n(function addJLibrary () { // To Prevent window contamination in the browser, we'll wrap this in an AIIF.\n\n    /**\n     * Determines if the current JS framework is Node.js or not.\n     * @return {Boolean} True if Node.js, false otherwise\n     */\n    function isNode () {\n        return typeof module === 'object'         &&\n               typeof module.exports === 'object' &&\n               typeof process === 'object'        &&\n               process.argv instanceof Array;\n    }\n\n    /**\n     * Whether or not we're using Node.js\n     * @type {Boolean}\n     */\n    var IS_NODE = isNode();\n\n    /**\n     * The JLibrary\n     * @param {String} [protoIdentifier='jl'] A \"name\" of the namespace to attach to object prototypes. This allows us to re-name\n     * the JLibrary, should '.jl' be taken by another libaray.\n     */\n    var JLibrary = function JLibrary (protoIdentifier) {\n        protoIdentifier = typeof protoIdentifier === 'string' ? protoIdentifier : 'j';\n\n        /**\n         * The JLib library. An object that contains all of the functions/getters which will be namespaced under each\n         * instance prototype using the name 'jlib'.\n         * @type {Object}\n         */\n        var JLib = null,\n\n        /**\n         * The object stack. When a JLib function is executed the current (or \"this\") object is pushed onto the stack,\n         * then when performWithCurrent is called, it is popped from the stack. This allows us to use jlib functions\n         * within other jlib functions.\n         * @type {Array}\n         */\n        ostack = [];\n\n        /**\n         * Executes the given callback with the current object from the object stack. Then pops the object off the\n         * object stack.\n         * @param {Function} cb The callback to be performed.\n         * @return {*} The value returned from the callback execution\n         */\n        function performWithCurrent (callback) {\n            var value = callback(ostack[ostack.length - 1] ? ostack[ostack.length - 1].valueOf() : ostack[ostack.length - 1]);\n            ostack.pop();\n            return value;\n        }\n\n        /**\n         * Adds all the 'object' prototype classes to the other prototypes j objects.\n         * @return {undefined}\n         */\n        function addToOtherPrototypes () {\n            for(var n = ['_string', '_number', '_array', '_date'], o = n.shift(); o; o = n.shift()) {\n                var keys = Object.keys(JLib._object);\n                for(var i = 0; i < keys.length; i++) {\n                    if(JLib._object.hasOwnProperty(keys[i]) && !JLib[o][keys[i]])\n                        JLib[o][keys[i]] = JLib._object[keys[i]];\n                }\n            }\n        }\n\n        /**\n         * Properties and methods that will be added to the String.prototype.j object.\n         * @type {Object}\n         */\n        JLib = {\n\n            /**\n             * The prototype namespace identifier\n             * @type {String}\n             */\n            PROTO_IDENTIFIER: protoIdentifier,\n\n            /**\n             * Exposes the private function JLibrary~performWithCurrent.\n             * @type {[type]}\n             */\n            performWithCurrent: performWithCurrent,\n\n            /**\n             * Add to the JLib library\n             * @param {String} toPrototype The prototype to add the function to\n             * @param {String} name The name of the method\n             * @param {Function} func The function to invoke\n             * @return {Boolean} True if the extension was successful, false otherwise.\n             */\n            extend: function extend (toPrototype, name, func) {\n                if(typeof toPrototype !== 'string') return false;\n                if(typeof name !== 'string') return false;\n\n                toPrototype = toPrototype.toLowerCase().replace(/^_/, '') + '_';\n\n                if(JLib[toPrototype]) {\n                    JLib[toPrototype][name] = function () {\n                        var args = arguments[protoIdentifier].toArray();\n                        return performWithCurrent(function (c) { func.apply(c, args); });\n                    };\n\n                    if(toPrototype === '_object') addToOtherPrototypes();\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n             * Initializes the jLib library by attaching the j object to the prototypes.\n             * @return {[type]} [description]\n             */\n            init: function init () {\n                // Add all the object functions to each of the other types\n                addToOtherPrototypes();\n\n                // Append the JLib library to the object prototype\n                Object.defineProperty(Object.prototype, protoIdentifier, {\n                    configurable : false,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._object;\n                    }\n                });\n\n                // Append the JLib library to the string prototype\n                Object.defineProperty(String.prototype, protoIdentifier, {\n                    configurable : true,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._string;\n                    }\n                });\n\n                // Append the JLib library to the number prototype\n                Object.defineProperty(Number.prototype, protoIdentifier, {\n                    configurable : true,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._number;\n                    }\n                });\n\n                // Append the JLib library to the date prototype\n                Object.defineProperty(Date.prototype, protoIdentifier, {\n                    configurable : true,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._date;\n                    }\n                });\n\n                // Append the JLib library to the array prototype\n                Object.defineProperty(Array.prototype, protoIdentifier, {\n                    configurable : true,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._array;\n                    }\n                });\n                return JLib;\n            },\n\n            /**\n             * Removes jlib from the prototype chain\n             * @return {Jlib} The current JLib instance\n             */\n            unload: function unload () {\n                delete String.prototype[protoIdentifier];\n                delete Array.prototype[protoIdentifier];\n                delete Date.prototype[protoIdentifier];\n                delete Object.prototype[protoIdentifier];\n                delete Number.prototype[protoIdentifier];\n                return JLib;\n            },\n\n            /**\n             * Functions available to String.prototype.j\n             * @type {Object}\n             */\n            _string: {\n\n                /**\n                 * Returns all the characters found in one string but not the other.\n                 * @param {String} other The string to compute the difference against.\n                 * @return {String} A difference string.\n                 */\n                differenceFromString: function differenceFromString (other) {\n                    return performWithCurrent(function (s) {\n                        if(typeof other !== 'string') return s;\n                        var sarr = s.split(''), oarr = other.split('');\n                        return sarr[protoIdentifier].differenceFromArray(oarr).join('');\n                    });\n                },\n\n                /**\n                 * Replaces tokens (snippets of text wrapped in brackets) with their values/\n                 * @return {String} The token replaced values.\n                 */\n                replaceTokens: function replaceTokens () {\n                    return performWithCurrent(function (s) {\n                        return JLib.replaceStringTokens(s);\n                    });\n                },\n\n                /**\n                 * Returns only the characters common to both strings\n                 * @param {String} other The string to compute the intersection against.\n                 * @return {String} The intersection between the two strings.\n                 */\n                intersectString: function intersectString (other) {\n                    return performWithCurrent(function (s) {\n                        if(typeof other !== 'string') return s;\n                        var sarr = s.split(''), oarr = other.split('');\n                        return sarr[protoIdentifier].intersectArray(oarr).join('');\n                    });\n                },\n\n                /**\n                 * Repeat a string 'times' times.\n                 * @param {Number} times The number of times to repeat the string\n                 * @return {String} The repeated string.\n                 */\n                repeat: function repeat (times) {\n                    times = parseInt(times, 10);\n                    times = isNaN(times) || !isFinite(times) || times <= 0 ? 1 : times;\n\n                    return performWithCurrent(function (s) {\n                        var os = s;\n                        for(var i = 1; i < times; i++) s += os;\n                        return s;\n                    });\n                },\n\n                /**\n                 * Right trims a string. Same as String.trim, but only for the end of a string.\n                 * @param {String} [what='\\\\s+'] What to trim.\n                 * @return {String} The right trimmed string\n                 */\n                rtrim: function rtrim (what) {\n                    return performWithCurrent(function (s) {\n                        what = typeof what === 'string' ? what : '\\\\s+';\n                        return s.replace(new RegExp(what + '$'), '');\n                    });\n                },\n\n                /**\n                 * Left trims a string. Same as String.trim, but only for the beginning of a string.\n                 * @param {String} [what='\\\\s+'] What to trim.\n                 * @return {String} The left trimmed string\n                 */\n                ltrim: function ltrim (what) {\n                    return performWithCurrent(function (s) {\n                        what = typeof what === 'string' ? what : '\\\\s+';\n                        return s.replace(new RegExp('^' + what), '');\n                    });\n                },\n\n                /**\n                 * Escapes HTML special characters\n                 * @return {String} The HTML escaped string\n                 */\n                htmlEncode: function htmlEncode () {\n                    return performWithCurrent(function (s) {\n                        var map = {\n                            '&'  : '&amp;',\n                            '<'  : '&lt;',\n                            '>'  : '&gt;',\n                            '\"'  : '&quot;',\n                            '\\'' : '&#039;'\n                        };\n                        return s.replace(/[&<>\"']/g, function (m) { return map[m]; });\n                    });\n                },\n\n                /**\n                 * Un-escapes HTML special characters\n                 * @return {String} The HTML escaped string\n                 */\n                htmlDecode: function htmlDecode () {\n                    return performWithCurrent(function (s) {\n                        var map = {\n                            '&amp;'  : '&',\n                            '&lt;'   : '<',\n                            '&gt;'   : '>',\n                            '&quot;' : '\"',\n                            '&#039;' : '\\''\n                        };\n                        return s.replace(/(&amp;|&lt;|&gt;|&quot;|&#039;)/g, function (m) { return map[m]; });\n                    });\n                },\n\n                /**\n                 * Created an 'eval' safe string, by adding slashes to \", ', \\t, \\n, \\f, \\r, and the NULL byte.\n                 * @return {String} A string with slashes\n                 */\n                addSlashes: function addSlashes () {\n                    return performWithCurrent(function (s) {\n                        return s.replace(/[\\\\\"'\\t\\n\\f\\r]/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\n                    });\n                },\n\n                /**\n                 * Returns a string with the first letter capitalized.\n                 * @return {String} The string with the first letter upper cased.\n                 * @function\n                 */\n                ucFirst: function ucFirst () {\n                    return performWithCurrent(function (s) {\n                        return s.charAt(0).toUpperCase() + s.slice(1);\n                    });\n                },\n\n                /**\n                 * Returns a string with the first letter lowercased.\n                 * @return {String} The string with the first letter lower cased.\n                 * @function\n                 */\n                lcFirst: function lcFirst () {\n                    return performWithCurrent(function (s) {\n                        return s.charAt(0).toLowerCase() + s.slice(1);\n                    });\n                },\n\n                /**\n                 * Returns a string in Title Case.\n                 * @function\n                 * @return {String} The title cased string.\n                 */\n                titleCase: function titleCase () {\n                    return performWithCurrent(function (s) {\n                        var arr = [];\n                        s.split(' ')[protoIdentifier].each(function (t) {\n                            arr.push(t[protoIdentifier].ucFirst());\n                        });\n                        return arr.join(' ');\n                    });\n                },\n\n                /**\n                 * Splices a string, much like an array.\n                 * @param {Number} index The index to begin splicing the string at\n                 * @param {Number} count The number of characters to delete\n                 * @param {String} add The string to append at the spliced section\n                 * @return {String} The spliced string.\n                 * @function\n                 */\n                splice: function splice (index, count, add) {\n                    return performWithCurrent(function (s) {\n                        return s.slice(0, index) + (add || '') + s.slice(index + count);\n                    });\n                },\n\n                /**\n                 * Return a truncated string with ellipses.\n                 * @param {Number=} length The length of the desired string. If ommited, the strings original length will be used.\n                 * @param {String=} [place='back'] Possible values are 'front' and 'back'. Specifying 'front' will truncate the\n                 * string and add ellipses to the front, 'back' (or any other value) will add the ellipses to the back.\n                 * @param {String=} [ellipses='...'] The string value of the ellipses. Use this to add anything other than '...'\n                 * @returns {String} A truncated string with ellipses (if its length is greater than 'length')\n                 * @function\n                 */\n                ellipses: function ellipses_ (length, place, ellipses) {\n                    return performWithCurrent(function (s) {\n                        if(isNaN(parseInt(length, 10))) length = s.length;\n                        if(length < 0 || !isFinite(length)) length = 0;\n\n                        ellipses = typeof ellipses === 'string' ? ellipses : '...';\n                        if(s.length <= length) return s;\n\n                        if(length <= ellipses.length) {\n                            return ellipses.substring(0, length);\n                        }\n                        else if(!place || place !== 'front') {\n                            return s.substr(0, length - ellipses.length) + ellipses;\n                        }\n                        else {\n                            return ellipses + s.substr(0, length - ellipses.length);\n                        }\n                    });\n                },\n\n                /**\n                 * Shuffles a string\n                 * @return {String} The mixed up string.\n                 */\n                shuffle: function shuffle () {\n                    return performWithCurrent(function (s) {\n                        var a = s.split(''),\n                            n = s.length;\n\n                        for(var i = n - 1; i > 0; i--) {\n                            var j   = Math.floor(Math.random() * (i + 1)),\n                                tmp = a[i];\n\n                            a[i] = a[j];\n                            a[j] = tmp;\n                        }\n\n                        return a.join('');\n                    });\n                },\n\n                /**\n                 * Reverses a string.\n                 * @return {String} The reversed string.\n                 */\n                reverse: function reverse () {\n                    return performWithCurrent(function (s) {\n                        if(s.length < 64) {\n                            var str = '';\n                            for(var i = s.length; i >= 0; i--) str += s.charAt(i);\n                            return str;\n                        }\n                        else {\n                            return s.split('').reverse().join('');\n                        }\n                    });\n                },\n\n                /**\n                 * Strips the trailing slashes from a string\n                 * If using Node.js, it will replace the trailing slash based on the value of os.platform\n                 * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n                 * @returns {String} The string without a trailing slash.\n                 * @function\n                 */\n                withoutTrailingSlash: function withoutTrailingSlash () {\n                    return performWithCurrent(function (s) {\n                        if(IS_NODE && require('os').platform === 'win32') return s.replace(/\\\\+$/, '');\n                        return s.replace(/\\/+$/, '');\n                    });\n                },\n\n                /**\n                 * Add a trailing slash to a string, if it doesn't already have one\n                 * If using Node.js, it will replace the trailing slash based on the value of os.platform\n                 * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n                 * @returns {String} The string without a trailing slash.\n                 * @function\n                 */\n                withTrailingSlash: function withTrailingSlash () {\n                    return performWithCurrent(function (s) {\n                        if(IS_NODE && require('os').platform === 'win32') return s[protoIdentifier].withoutTrailingSlash() + '\\\\';\n                        return s[protoIdentifier].withoutTrailingSlash() + '/';\n                    });\n                },\n\n                /**\n                 * Escapes regular expression special characters. This is useful is you wish to create a new regular expression\n                 * from a stored string value.\n                 * @returns {String} The regular expression safe string\n                 * @function\n                 */\n                regexpSafe: function regexpSafe () {\n                    return performWithCurrent(function (s) {\n                        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n                    });\n                },\n\n                /**\n                 * Pads a string with 'delim' characters to the specified length. If the length is less than the string length,\n                 * the string will be truncated.\n                 * @param {Number} length The length to pad the string to. If less that the length of the string, the string will\n                 * be returned. If less than the length of the string, the string will be sliced.\n                 * @param {String=} [delim=' '] The character to pad the string with.\n                 * @param {Boolean=} [pre=false] If true, the padding will be added to the beginning of the string, otherwise the padding\n                 * will be added to the end.\n                 * @returns {String} The padded string\n                 * @function\n                 */\n                pad: function pad (length, delim, pre) {\n                    return performWithCurrent(function (s) {\n                        var i, thisLength = s.length;\n\n                        if(!delim) delim = ' ';\n                        if(length === 0) return ''; else if(isNaN(parseInt(length, 10))) return s;\n\n                        length = parseInt(length, 10);\n                        if(length < thisLength) return !pre ? s.slice(0, length) : s.slice(-length);\n\n                        if(pre) {\n                            for(i = 0; i < length - thisLength; i++) s = delim + s;\n                        }\n                        else {\n                            for(i = 0; i < length - thisLength; i++) s += delim;\n                        }\n                        return s;\n                    });\n                },\n\n                /**\n                 * Replaces newlines with br tags.\n                 * @return {String} The string with newlines converted to br tags.\n                 */\n                newlineToBreak: function newlineToBreak () {\n                    return performWithCurrent(function (s) {\n                        return s.replace(/(\\r\\n|\\n)/g, '<br/>');\n                    });\n                },\n\n                /**\n                 * Replaces tabs with a span element with the class 'tab'\n                 * @return {String} The string with tabs converted to spans with the class 'tab'\n                 */\n                tabsToSpan: function tabsToSpan () {\n                    return performWithCurrent(function (s) {\n                        return s.replace(/\\t/g, '<span class=\"tab\"></span>');\n                    });\n                },\n\n                /**\n                 * Adjusts a string to fit within the confines of 'width', without breaking words.\n                 * @param {Number=} [length=120] The length to word wrap the string to.\n                 * @param {Number=} [padleft=0] The number of columns to pad the string on the left\n                 * @param {Number=} [padright=0] The number of columns to pad the string on the right\n                 * @param {Boolean=} omitFirst If true, the first line will not be padded left\n                 * @return {String} The string adjusted and padded for the stdout.\n                 * @function\n                 */\n                wordWrapToLength: function wordWrapToLength (width, padleft, padright, omitFirst) {\n                    return performWithCurrent(function (s) {\n                        if(padright === undefined && padleft) padright = padleft;\n\n                        padleft  = !isNaN(parseInt(padleft,  10)) ? parseInt(padleft, 10)  : 0;\n                        padright = !isNaN(parseInt(padright, 10)) ? parseInt(padright, 10) : 0;\n\n                        var paddingLeft = '';\n                        for(var n = 0; n < padleft;  n++) paddingLeft  += ' ';\n\n                        var cols   = !isNaN(parseInt(width, 10)) ? length : 120,\n                            arr    = s.split(' '),\n                            item   = null,\n                            len    = !omitFirst ? cols - padright - padleft : cols - padright,\n                            str    = !omitFirst ? paddingLeft : '',\n                            olen   = cols - padright - padleft;\n\n                        while((item = arr.shift()) !== undefined) {\n                            if(item.length < len) {\n                                str += item + ' ';\n                                len -= item.length + 1;\n                            }\n                            else if(item.length > olen) {\n                                str += item.substring(0, len - 1) + '-\\n' + paddingLeft;\n                                arr.unshift(item.substring(len, item.length - 1));\n                                len = cols - padright - padleft;\n                            }\n                            else {\n                                str += '\\n' + paddingLeft + item + ' ';\n                                len = cols - padright - 1 - padleft - item.length;\n                            }\n                        }\n                        return str;\n                    });\n                }\n            },\n\n            /**\n             * Functions available to Date.prototype.j.\n             * @type {Object}\n             */\n            _date: {\n                /**\n                 * Moves a date forward 'daysInTheFuture' days.\n                 * @param {Number} daysInTheFuture The number of days in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified days.\n                 * @function\n                 */\n                advanceDays: function advanceDays (daysInTheFuture, adjustForWeekend) {\n                    return performWithCurrent(function (d) {\n                        daysInTheFuture = daysInTheFuture && daysInTheFuture[protoIdentifier].isNumeric() ? daysInTheFuture : 1;\n                        d.setTime(d.getTime() + (daysInTheFuture * 86400000));\n\n                        if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                            while(d.getDay() === 0 || d.getDay() === 6)\n                                d.setTime(d.getTime() + 86400000);\n                        }\n                        return d;\n                    });\n                },\n\n                /**\n                 * Moves a date forward 'monthsInTheFuture' months.\n                 * @param {Number} monthsInTheFuture The number of months in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified months.\n                 * @function\n                 */\n                advanceMonths: function advanceMonths (monthsInTheFuture, adjustForWeekend) {\n                    return performWithCurrent(function (d) {\n                        monthsInTheFuture = monthsInTheFuture && monthsInTheFuture[protoIdentifier].isNumeric() ? monthsInTheFuture : 1;\n                        d.setTime(d.getTime() + (monthsInTheFuture * 2629746000));\n\n                        if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                            while(d.getDay() === 0 || d.getDay() === 6)\n                                d.setTime(d.getTime() + 86400000);\n                        }\n                        return d;\n                    });\n                },\n\n                /**\n                 * Moves a date forward 'yearsInTheFuture' years.\n                 * @param {Number} yearsInTheFuture The number of years in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified years.\n                 * @function\n                 */\n                advanceYears: function advanceYears (yearsInTheFuture, adjustForWeekend) {\n                    return performWithCurrent(function (d) {\n                        yearsInTheFuture = yearsInTheFuture && yearsInTheFuture[protoIdentifier].isNumeric() ? yearsInTheFuture : 1;\n                        d.setTime(d.getTime() + (yearsInTheFuture * 31536000000));\n\n                        if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                            while(d.getDay() === 0 || d.getDay() === 6)\n                                d.setTime(d.getTime() + 86400000);\n                        }\n                        return d;\n                    });\n                },\n\n                /**\n                 * Returns the date in the yyyy-mm-dd format.\n                 * @param {String} [delim='-'] The delimiter to used the separate the date components (e.g. '-' or '.')\n                 * @returns {String} The date in the yyyy-mm-dd format.\n                 * @function\n                 */\n                yyyymmdd: function yyyymmdd (delim) {\n                    return performWithCurrent(function (d) {\n                        delim = typeof delim !== 'string' ? '-' : delim ;\n\n                        var dd   = d.getDate(),\n                            mm   = d.getMonth() + 1,\n                            yyyy = d.getFullYear();\n\n                        if(dd < 10) dd = '0' + dd;\n                        if(mm < 10) mm = '0' + mm;\n                        return yyyy + delim + mm + delim + dd;\n                    });\n                },\n\n                /**\n                 * Converts a date to the HH:MM:SS.MSEC time format\n                 * @memberof Number.prototype\n                 * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n                 * @returns {String} The formatted number, now a string.\n                 * @function\n                 */\n                clockTime: function clockTime (omitMS) {\n                    return performWithCurrent(function (d) {\n                        return d.getTime()[protoIdentifier].clockTime(!!omitMS);\n                    });\n                }\n            },\n\n            /**\n             * Functions available to Number.prototype.j.\n             * @type {Object}\n             */\n            _number: {\n                /**\n                 * Pads a number with preceeding zeros.\n                 * @param {Number} length The final length of the string\n                 * @returns {String} The padded number, now a string.\n                 * @function\n                 */\n                pad: function pad (length) {\n                    return performWithCurrent(function (n) {\n                        return n.toString()[protoIdentifier].pad(length, '0', true);\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of days.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                daysFrom: function daysFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setDate(date.getDate() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of days.\n                 * @return {Date} A date object\n                 */\n                daysFromNow: function daysFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].daysFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of days.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                secondsFrom: function secondsFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setSeconds(date.getSeconds() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of days.\n                 * @return {Date} A date object\n                 */\n                secondsFromNow: function secondsFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].secondsFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of years.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                yearsFrom: function yearsFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setFullYear(date.getFullYear() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of years.\n                 * @return {Date} A date object\n                 */\n                yearsFromNow: function yearsFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].yearsFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of months.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                monthsFrom: function monthsFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setMonth(date.getMonth() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of months.\n                 * @return {Date} A date object\n                 */\n                monthsFromNow: function monthsFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].monthsFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of hours.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                hoursFrom: function hoursFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setHours(date.getHours() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of hours.\n                 * @return {Date} A date object\n                 */\n                hoursFromNow: function hoursFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].hoursFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of minutes.\n                 * @param {Date} date The date to change.\n                 * @return {Date} A modified date.\n                 */\n                minutesFrom: function minutesFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setMinutes(date.getMinutes() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of minutes.\n                 * @return {Date} The date object\n                 */\n                minutesFromNow: function minutesFromNow () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].minutesFrom(new Date());\n                    });\n                },\n\n                /**\n                 * The time, months in the past.\n                 * @return {Date} A Date object.\n                 */\n                monthsAgo: function monthsAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].monthsFromNow();\n                    });\n                },\n\n                /**\n                 * The time, days in the past.\n                 * @return {Date} A Date object.\n                 */\n                daysAgo: function daysAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].daysFromNow();\n                    });\n                },\n\n                /**\n                 * The time, seconds in the past.\n                 * @return {Date} A Date object.\n                 */\n                secondsAgo: function secondsAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].secondsFromNow();\n                    });\n                },\n\n                /**\n                 * The time, minutes in the past.\n                 * @return {Date} A Date object.\n                 */\n                minutesAgo: function minutesAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].minutesFromNow();\n                    });\n                },\n\n                /**\n                 * The time, years in the past.\n                 * @return {Date} A Date object.\n                 */\n                yearsAgo: function yearsAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].yearsFromNow();\n                    });\n                },\n\n                /**\n                 * Converts a number to the HH:MM:SS.MSEC time format\n                 * @memberof Number.prototype\n                 * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n                 * @returns {String} The formatted number, now a string.\n                 * @function\n                 */\n                clockTime: function clockTime (omitMS) {\n                    return performWithCurrent(function (t) {\n                        var ms, secs, mins, hrs;\n\n                        ms = t % 1000;\n                        t = (t - ms) / 1000;\n\n                        secs = t % 60;\n                        t = (t - secs) / 60;\n\n                        mins = t % 60;\n                        hrs = (t - mins) / 60;\n\n                        return hrs.toString().pad(2) + ':' + mins.pad(2) + ':' + secs.pad(2) + ((omitMS === true) ? '' : '.' + ms.pad(3));\n                    });\n                }\n            },\n\n            /**\n             * Functions available to Array.prototype.j.\n             * @type {Object}\n             */\n            _array: {\n\n                /**\n                 * Shuffles an array\n                 * @return {Array<*>} The mixed up array\n                 */\n                shuffle: function shuffle () {\n                    return performWithCurrent(function (a) {\n                        for(var i = a.length - 1; i > 0; i--) {\n                            var j = Math.floor(Math.random() * (i + 1)), tmp = a[i];\n                            a[i] = a[j];\n                            a[j] = tmp;\n                        }\n                        return a;\n                    });\n                },\n\n                /**\n                 * Computes the union between the current array, and all the array objects passed in. That is,\n                 * the set of unique objects present in all of the arrays.\n                 * @param {...Array} arr A list of array objects\n                 * @return {Array<*>} The union set of the provided arrays.\n                 */\n                union: function union () {\n                    var args = arguments[protoIdentifier].makeArray()[protoIdentifier].only('array');\n\n                    return performWithCurrent(function (a) {\n                        var union = [];\n                        args.unshift(a);\n                        args[protoIdentifier].each(function (array) {\n                            array[protoIdentifier].each(function (item) {\n                                if(union.indexOf(item) === -1) union.push(item);\n                            });\n                        });\n                        return union;\n                    });\n                },\n\n                /**\n                 * Returns all the items not common to both arrays.\n                 * @param {Array} other The array to compute the difference from.\n                 * @return {Array} A new array with items unique to each array.\n                 */\n                differenceFromArray: function differenceFromArray (other) {\n                    return performWithCurrent(function (a) {\n                        if(!(other instanceof Array)) return a;\n\n                        var diff = [];\n                        a[protoIdentifier].each(function (item) {\n                            if(other.indexOf(item) === -1) diff.push(item);\n                        });\n\n                        other[protoIdentifier].each(function (item) {\n                            if(a.indexOf(item) === -1) diff.push(item);\n                        });\n\n                        return diff;\n                    });\n                },\n\n                /**\n                 * Returns all the items common to both arrays.\n                 * @param {Array} other The array to compute the intersection from.\n                 * @return {Array} A new array with items common to both arrays.\n                 */\n                intersectArray: function intersectArray (other) {\n                    return performWithCurrent(function (a) {\n                        if(!(other instanceof Array)) return a;\n\n                        var intersection = [];\n                        a[protoIdentifier].each(function (item) {\n                            if(other.indexOf(item) !== -1) intersection.push(item);\n                        });\n\n                        return intersection;\n                    });\n                },\n\n                /**\n                 * Creates a new array from the current one, with all occurences of the provided arguments ommited.<br>\n                 * For example: <em>[1,2,3,4,5].without(1)</em> will return <em>[2,3,4,5]</em>\n                 * and <em>[1, null, 2, null, undefined].without(null, undefined)</em> will return <em>[1, 2]</em>\n                 * @returns {Array<*>} A shallow copy of the array with the provided arguments ommited.\n                 * @function\n                 */\n                without: function without () {\n                    var args = arguments[protoIdentifier].makeArray();\n                    return performWithCurrent(function (a) {\n                        var res = [];\n                        a[protoIdentifier].each(function (v) { if(args.indexOf(v) === -1) res.push(v); });\n                        return res;\n                    });\n                },\n\n                /**\n                 * Rotates the array left or right the specified number of times. If the direction is left, it will shift off the\n                 * first <em>n</em> elements and push them to the end of the array. If right, it will pop off the last <em>n</em>\n                 * items and unshift them onto the front of the array.\n                 * @param {String=} [direction='left'] The direction to rotate array members.\n                 * @param {Number=} [amount=1] The number of elements to shift\n                 * @return {Array<*>} The current array, shifted.\n                 * @function\n                 */\n                rotate: function rotate (direction, amount) {\n                    return performWithCurrent(function (a) {\n                        if(direction && direction.isNumeric() && !amount) {\n                            amount    = direction;\n                            direction = undefined;\n                        }\n\n                        if(!amount || (amount && !amount.isNumeric())) amount = 1;\n                        for(var i = 0; i < amount; i++) {\n                            if(direction !== 'right') a.push(a.shift()); else a.unshift(a.pop());\n                        }\n                        return a;\n                    });\n                },\n\n                /**\n                 * Rotates the array left the specified number of times.\n                 * This is useful if trying to create a circular queue.\n                 * @param {Number=} [amount=1] The number of times to rotate the array left.\n                 * @return {Array<*>} The current array, rotated left.\n                 * @function\n                 */\n                rotateLeft: function rotateLeft (amount) {\n                    return performWithCurrent(function (a) {\n                        return a[protoIdentifier].rotate('left', amount);\n                    });\n                },\n\n                /**\n                 * Rotates the array right the specified number of times.\n                 * This is useful if trying to create a circular queue.\n                 * @param {Number=} [amount=1] The number of times to rotate the array left.\n                 * @return {Array<*>} The current array, rotated right.\n                 * @function\n                 */\n                rotateRight: function rotateLeft (amount) {\n                    return performWithCurrent(function (a) {\n                        return a[protoIdentifier].rotate('right', amount);\n                    });\n                },\n\n                /**\n                 * Removes duplicates from the current array.\n                 * This is a destructive action, and will modify the array in place.\n                 * @returns {Array<*>} The current array, with duplicates removed.\n                 * @function\n                 */\n                makeUnique: function makeUnique () {\n                    return performWithCurrent(function (a) {\n                        var visited = [];\n                        for(var i = 0; i < a.length; i++) {\n                            if(visited.indexOf(a[i]) === -1) {\n                                visited.push(a[i]);\n                            }\n                            else {\n                                a.splice(i, 1);\n                                i--; // Splice will affect the internal array pointer, so fix it...\n                            }\n                        }\n                        return a;\n                    });\n                },\n\n                /**\n                 * Gets an array of unique items from the current array.\n                 * @returns {Array} A new array with no duplicate values.\n                 * @function\n                 */\n                unique: function unique () {\n                    return performWithCurrent(function (a) {\n                        var visited = [],\n                            unique  = [];\n\n                        a[protoIdentifier].each(function (item) {\n                            if(visited.indexOf(item) === -1) {\n                                unique.push(item);\n                                visited.push(item);\n                            }\n                        });\n                        return unique;\n                    });\n                },\n\n                /**\n                 * Sorts the array in ascending order.\n                 * This is a destructive action, and will modify the array in place.\n                 * @returns {Array} The array sorted in ascending order.\n                 * @function\n                 */\n                ascending: function ascending () {\n                    return performWithCurrent(function (a) {\n                        return a.sort(function (a, b) {\n                            return a < b ? -1 : a > b ? 1 : 0;\n                        });\n                    });\n                },\n\n                /**\n                 * Sorts the array in descending order.\n                 * This is a destructive action, and will modify the array in place.\n                 * @returns {Array} The array sorted in descending order.\n                 * @function\n                 */\n                descending: function descending () {\n                    return performWithCurrent(function (a) {\n                        return a.sort(function (a, b) {\n                            return a > b ? -1 : a < b ? 1 : 0;\n                        });\n                    });\n                }\n            },\n\n            /**\n             * Functions available to Object.prototype.j.\n             * @type {Object}\n             */\n            _object: {\n\n                /**\n                 * Returns the object's keys.\n                 * @returns {Array<String|Number>} The object's key set\n                 * @function\n                 */\n                keys : function keys () {\n                    return performWithCurrent(function (o) {\n                        return Object.keys(o);\n                    });\n                },\n\n                /**\n                 * Returns the 'size' or 'length' of an object.\n                 * <ul>\n                 *      <li> String   -> The string's length  </li>\n                 *      <li> Number   -> The number of digits </li>\n                 *      <li> Object   -> The number of keys   </li>\n                 *      <li> Array    -> The number of items  </li>\n                 *      <li> Function -> 1                    </li>\n                 * </ul>\n                 *\n                 * @returns {Number} The number of items within the object.\n                 * @function\n                 */\n                size: function size () {\n                    return performWithCurrent(function (o) {\n                        switch(true) {\n                            case typeof o === 'function':\n                                return 1;\n\n                            case typeof o === 'number':\n                                return o.toString().length;\n\n                            case o instanceof Array:\n                            case typeof o === 'string':\n                                return o.length;\n\n                            case JLib.isArguments(o) && o.indexOf('length') > -1:\n                                return o.length - 1;\n\n                            case typeof o === 'object':\n                                return Object.keys(o).length;\n\n                            default:\n                                return o;\n                        }\n                    });\n                },\n\n                /**\n                 * Determines if an object can be converted to a number.\n                 * @returns {Boolean} True if the object is numeric, false otherwise.\n                 * @function\n                 */\n                isNumeric: function isNumeric () {\n                    return performWithCurrent(function (o) {\n                        return !isNaN(parseFloat(o)) && isFinite(o);\n                    });\n                },\n\n                /**\n                 * Converts an object to a number.\n                 * @returns {Number} The object as a number.\n                 * @function\n                 */\n                numeric: function numeric () {\n                    return performWithCurrent(function (o) {\n                        return parseFloat(o);\n                    });\n                },\n\n                /**\n                 * Determines if an object has no keys, if an array has no items, or if a string === ''.\n                 * @returns {Boolean} True if the object is 'empty', false otherwise.\n                 * @function\n                 */\n                isEmpty: function isEmpty () {\n                    return performWithCurrent(function (o) {\n                        return o[protoIdentifier].size() === 0;\n                    });\n                },\n\n                /**\n                 * True if the object is an array, false otherwise.\n                 * @return {Boolean} True if the object is an array, false otherwise.\n                 */\n                isArray: function isArray () {\n                    return performWithCurrent(function (o) {\n                        return o[protoIdentifier] instanceof Array;\n                    });\n                },\n\n                /**\n                 * True if the object is an object and not an array, false otherwise.\n                 * @return {Boolean} True if the object is an object and not an array, false otherwise.\n                 */\n                isPureObject: function isPureObject () {\n                    return performWithCurrent(function (o) {\n                        return !(o[protoIdentifier] instanceof Array) && typeof o === 'object';\n                    });\n                },\n\n                /**\n                 * True if the object is a string, false otherwise.\n                 * @return {Boolean} True if the object is a string, false otherwise.\n                 */\n                isString: function isString () {\n                    return performWithCurrent(function (o) {\n                        return typeof o === 'string';\n                    });\n                },\n\n                /**\n                 * True if the object is a boolean, false otherwise.\n                 * @return {Boolean} True if the object is a boolean, false otherwise.\n                 */\n                isBoolean: function isBoolean () {\n                    return performWithCurrent(function (o) {\n                        return typeof o === 'boolean';\n                    });\n                },\n\n                /**\n                 * True if the object is a function, false otherwise.\n                 * @return {Boolean} True if the object is a function, false otherwise.\n                 */\n                isFunction: function isFunction () {\n                    return performWithCurrent(function (o) {\n                        return typeof o === 'function';\n                    });\n                },\n\n                /**\n                 * True if the object is an arguments object, false otherwise\n                 * @return {Boolean} True if the object is an arguments object, false otherwise\n                 */\n                isArguments: function isArguments () {\n                    return performWithCurrent(function (o) {\n                        return Object.prototype.toString.call(o) === '[object Arguments]';\n                    });\n                },\n\n                /**\n                 * Convers an object to a number, if possible.\n                 * @returns {Number} The object as a float or NaN.\n                 * @function\n                 */\n                toNumber: function toNumber () {\n                    return performWithCurrent(function (o) {\n                        return o.isNumeric() ? parseFloat(o) : NaN;\n                    });\n                },\n\n                /**\n                 * Convers an object to an integer, if possible.\n                 * @returns {Number} The object as an integer or NaN.\n                 * @function\n                 */\n                toInteger: function toInteger () {\n                    return performWithCurrent(function (o) {\n                        return o.isNumeric() ? parseInt(o, 10) : NaN;\n                    });\n                },\n\n                /**\n                 * Creates a new array from the object. If it's a string, it will split the string by ''; if a number, it will\n                 * split the number into digits and return an array of digits.\n                 * @returns {Array} A new array, created from the object.\n                 * @function\n                 */\n                makeArray: function makeArray () {\n                    return performWithCurrent(function (o) {\n                        var arr = [];\n                        if(o instanceof Array) return o;\n                        o[protoIdentifier].each(function (obj) { arr.push(obj); });\n                        return arr;\n                    });\n                },\n\n                /**\n                 * Returns a random array item, random object property, random character in a string, or random digit in a number.\n                 * @returns {*}\n                 * @function\n                 */\n                random: function random () {\n                    return performWithCurrent(function (o) {\n                        if(typeof o === 'object') {\n                            return o instanceof Array ?\n                                o[Math.floor(Math.random() * o.length)] :\n                                o[Object.keys(o)[Math.floor(Math.random() * Object.keys(o).length)]];\n                        }\n                        else if(typeof o === 'string' || typeof o === 'number') {\n                            var val = o, negative = false;\n\n                            if(o.length === 0) return '';\n                            if(typeof o === 'number' && o < 0) {\n                                negative = true;\n                                val = Math.abs(val);\n                            }\n\n                            val = val.toString()[Math.floor(Math.random() * val.toString().length)];\n                            if(typeof o === 'number') val = parseInt(val, 10);\n                            return negative ? -val : val;\n                        }\n                        return o;\n                    });\n                },\n\n                /**\n                 * Invokes the callback 'f' for each property the object contains. If this is called\n                 * on a number or function, the object will be cast to a string.<br><br>\n                 * The callback `f` will be invoked with the following arguments:\n                 * <ul>\n                 * \t<li>value     - The value of the current object being iterated over</li>\n                 * \t<li>key       - The key of the current object (if an object, the index if an array)</li>\n                 * \t<li>iteration - The current iteration (same as key if a string or array)</li>\n                 * \t<li>exit      - A function which will break the loop and return the values passed to it,\n                 * \t\t\t\t\tor a single value if only a single value is passed.</li>\n                 * </ul>\n                 * @function\n                 * @memberof Object.prototype\n                 * @param {Number=} [rangeA=0] The iteration start index\n                 * @param {Number=} [rangeB='length of the item'] The iteration end index\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {*} The value passed to the exit parameter of the callback...\n                 */\n                each: function each (rangeA, rangeB, f) {\n                    // Can't use last here.. would cause circular ref...\n                    f = undefined;\n                    for(var k = arguments.length - 1; k >= 0; k--) if(arguments[k] instanceof Function) f = arguments[k];\n\n                    return performWithCurrent(function (o) {\n                        var ret       = null,\n                            broken    = false,\n                            self      = o,\n                            keys, property, value,\n\n                            exit = function () {\n                                var args = arguments[protoIdentifier].toArray();\n                                broken   = true;\n                                ret      = args.length > 1 ? args : args[0];\n                            };\n\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n\n                        // Firefox does some funky stuff here...\n                        if(typeof o === 'function') self = self.replace(/(?:\\r)?\\n+/g, '').replace(/\"use strict\";|'use strict';/g, '');\n\n                        var isArgs = Object.prototype.toString.call(o) === '[object Arguments]', idx = -1;\n                        keys = Object.keys(self);\n                        idx  = keys.indexOf('length');\n\n                        if(isArgs && idx > -1) keys.splice(idx, 1);\n\n                        rangeA = parseInt(rangeA);\n                        rangeA = (isNaN(rangeA) || rangeA < 0 || !isFinite(rangeA)) ? 0 : rangeA;\n\n                        rangeB = parseInt(rangeB);\n                        rangeB = (isNaN(rangeB) || rangeB + 1 > keys.length || !isFinite(rangeB)) ? keys.length : rangeB + 1; // End range is inclusive...\n                        rangeB = rangeB < 0 ? 0 : rangeB;\n\n                        var i = 0;\n                        if(f instanceof Function) {\n                            for(var n = rangeA; n < rangeB; n++) {\n                                property = keys[n];\n                                value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                                f.call(o, value, property, n, exit, i++);\n                                if(broken) break;\n                            }\n                        }\n                        return ret;\n                    });\n                },\n\n                /**\n                 * Invokes the callback 'f' for every property the object contains. If the callback returns false, the\n                 * loop is broken and false is returned; otherwise true is returned.\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {Boolean} True if none of the callback invocations returned false.\n                 * @function\n                 */\n                every: function every (f) {\n                    f = f instanceof Function ? f : undefined;\n\n                    return performWithCurrent(function (o) {\n                        var self = o, keys, property, value;\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n                        keys = Object.keys(self);\n\n                        var i = 0;\n                        if(f instanceof Function) {\n                            for(var n = 0; n < keys.length; n++) {\n                                property = keys[n];\n                                value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                                if(f.call(o, value, property, n, i++) === false) return false;\n                            }\n                        }\n                        return true;\n                    });\n                },\n\n                /**\n                 * Converts an object to an array. For strings, numbers, and functions this will\n                 * return a char array to their respective .toString() values\n                 * @function\n                 * @return {Array<*>} The object, converted to an array.\n                 */\n                toArray: function toArray () {\n                    return performWithCurrent(function (o) {\n                        if(o instanceof Array) return o;\n\n                        var arr = [];\n                        o[protoIdentifier].each(function (val) { arr.push(val); });\n                        return arr;\n                    });\n                },\n\n                /**\n                 * Returns the first n elements of an object. If the object is an array, and only one items is retrieved,\n                 * that item will be returned, rather than an array.\n                 * @param {Number=} [n=1] The number of elements to return\n                 * @return {Array<*>} The first n elements of the array.\n                 */\n                first: function first (n) {\n                    return performWithCurrent(function (o) {\n                        n = parseInt(n, 10);\n                        n = isNaN(n) || !isFinite(n) ? 1 : n;\n                        var v = null;\n\n                        if(typeof o !== 'object') {\n                            v = o.toString().slice(0, n);\n                        }\n                        else if(o instanceof Array) {\n                            v = o.slice(0, n);\n                        }\n                        else {\n                            v = {};\n                            o[protoIdentifier].each(0, n - 1, function (item, key) { v[key] = item; });\n                            var keys = Object.keys(v);\n                            return keys.length === 1 ? v[keys[0]] : v;\n                        }\n\n                        return v.length === 1 ? v[0] : v;\n                    });\n                },\n\n                /**\n                 * Returns the last n elements of an object. If the object is an array, and only one items is retrieved,\n                 * that item will be returned, rather than an array.\n                 * @param {Number=} [n=1] The number of elements to return\n                 * @return {Array<*>} The last n elements of the array.\n                 * @function\n                 */\n                last: function last (n) {\n                    return performWithCurrent(function (o) {\n                        n = parseInt(n, 10);\n                        n = isNaN(n) || !isFinite(n) ? 1 : n;\n                        var v = null, keys, len, idx;\n\n                        if(JLib.isArguments(o)) {\n                            keys = Object.keys(o);\n                            idx  = keys.indexOf('length');\n\n                            if(idx > -1) keys.splice(idx, 1);\n                            v = []; len = keys.length;\n                            keys[protoIdentifier].each(len - n, len, function (k) { v.push(o[k]); });\n                        }\n                        else if(typeof o !== 'object') {\n                            v = o.toString().slice(-n);\n                        }\n                        else if(o instanceof Array) {\n                            v = o.slice(-n);\n                        }\n                        else {\n                            v   = {};\n                            len = o[protoIdentifier].size();\n\n                            o[protoIdentifier].each(len - n, len, function (item, key) { v[key] = item; });\n                            keys = Object.keys(v);\n                            return keys.length === 1 ? v[keys[0]] : v;\n                        }\n                        return v.length === 1 ? v[0] : v.length > 0 ? v : null;\n                    });\n                },\n\n                /**\n                 * Find a child of an object using the given path, split by the given delimiter (or '.' by default)\n                 * @param {String} path The path to the child object\n                 * @param {String=} [delimiter='.'] The path delimiter\n                 * @param {Function=} done A callback for completion\n                 * @return {*|Null} The child object at the given string path, or null if it doesn't exist.\n                 * @function\n                 */\n                findChildAtPath: function findChildAtPath (path, delimiter, original, invoked, done) {\n                    done = arguments[protoIdentifier].last() instanceof Function ? arguments[protoIdentifier].last() : JLib.NULLF;\n\n                    return performWithCurrent(function (o) {\n                        var self = o;\n\n                        original = (!(original instanceof Function) && original) ? original : self;\n                        invoked  = invoked || false;\n\n                        if(typeof o === 'object' && typeof path === 'string') {\n                            delimiter = typeof delimiter === 'string' ? delimiter : '.';\n                            path      = path.split(delimiter);\n\n                            var p = path.shift();\n                            if(p) {\n                                return self[protoIdentifier].each(function (o, k, i, exit) {\n                                    if(path.length === 0 && k === p) {\n                                        done.call(original, o, self, k);\n                                        invoked = true;\n                                        exit(o);\n                                    }\n                                    else {\n                                        var obj = o[protoIdentifier].findChildAtPath(path.join(delimiter), delimiter, original, invoked, done);\n                                        if(obj !== null) exit(obj);\n                                    }\n                                });\n                            }\n                        }\n                        if(!invoked && original === self && done instanceof Function) done.call(original, null, self, null);\n                        return null;\n                    });\n                },\n\n                /**\n                 * Produces a shallow clone of the object, that is, if JSON.stringify can handle it.<br>\n                 * The object must be non-circular.\n                 * @return {*} A shallow clone of the object.\n                 * @function\n                 */\n                clone: function clone () {\n                    return performWithCurrent(function (o) {\n                        if(typeof o === 'string' || typeof o === 'number') return o;\n\n                        try {\n                            return JSON.parse(JSON.stringify(o));\n                        }\n                        catch (e) {\n                            throw new Error('Unable to clone object: ' + e.message);\n                        }\n                    });\n                },\n\n                /**\n                 * Filters an array or object using only the types allowed. That is, if the item in the array is of a type listed\n                 * in the arguments, then it will be added to the filtered array. In this case 'array' is a valid type.\n                 * @param {...String} types A list of typeof types that are allowed in the array.\n                 * @return {Array<*>} An array filtered by only the allowed types.\n                 */\n                only: function only (types) {\n                    types = arguments[protoIdentifier].makeArray();\n\n                    return performWithCurrent(function (o) {\n                        // Allows the 'plural' form of the type...\n                        types[protoIdentifier].each(function (type, key) { this[key] = type.replace(/s$/, ''); });\n\n                        if(typeof o !== 'object') return o;\n                        var isArray  = o instanceof Array ? true : false,\n                            filtered = isArray ? [] : {};\n\n                        o[protoIdentifier].each(function (item, key) {\n                            if(types.indexOf(typeof item) !== -1 || (item instanceof Array && types.indexOf('array') !== -1)) {\n                                if(isArray) filtered.push(item); else filtered[key] = item;\n                            }\n                        });\n                        return filtered;\n                    });\n                },\n\n                /**\n                 * Filters an object using the given predicate function. For objects, a new object will be returned, with\n                 * the values that passed the predicate function. For strings, a new string will be returned with the characters\n                 * that passed the predicate function. For numbers, a new number will be returned with the digits that passed\n                 * the predicate function. Functions will be operated on as strings.\n                 * @param {Function} predicate The function used to filter the object.\n                 * @return {*} The filtered object\n                 */\n                where: function where (predicate) {\n                    return performWithCurrent(function (o) {\n                        if(!(predicate instanceof Function)) return o;\n\n                        var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                            filtered = !isObject ? [] : {};\n\n                        o[protoIdentifier].each(function (item, key) {\n                            if(predicate.call(item, item)) {\n                                if(isObject) filtered[key] = item; else filtered.push(item);\n                            }\n                        });\n\n                        if(typeof o !== 'object') filtered = filtered.join('');\n                        return filtered;\n                    });\n                },\n\n                /**\n                 * Filters an object by keys using the given predicate function.\n                 * @param {Function} predicate The function used to filter the object.\n                 * @return {*} The filtered object\n                 */\n                whereKeys: function whereKeys (predicate) {\n                    return performWithCurrent(function (o) {\n                        if(!(predicate instanceof Function)) return o;\n\n                        var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                            filtered = !isObject ? [] : {};\n\n                        o[protoIdentifier].each(function (item, key) {\n                            if(predicate.call(key, key)) {\n                                if(isObject) filtered[key] = item; else filtered.push(item);\n                            }\n                        });\n\n                        if(typeof o !== 'object') filtered = filtered.join('');\n                        return filtered;\n                    });\n                },\n\n                /**\n                 * For objects, inverts the objects keys/values. If the value isn't a number or array, it will be omitted.\n                 * For strings, it will reverse the string.\n                 * For number, it will compute the number's inverse (i.e. 1 / x).\n                 * @return {*} The inverse, as described above.\n                 */\n                invert: function invert () {\n                    return performWithCurrent(function (o) {\n                        if(typeof o === 'string') return o[protoIdentifier].reverse();\n                        if(typeof o === 'number') return 1 / o;\n\n                        var obj = {};\n                        o[protoIdentifier].each(function (item, key) {\n                            if(typeof item === 'string' || typeof item === 'number') obj[item] = key;\n                        });\n\n                        return obj;\n                    });\n                },\n\n                /**\n                 * Returns the maximum item in the object.\n                 * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n                 * @return {*} The maximum item in the object collection.\n                 */\n                max: function max (func) {\n                    if(!(func instanceof Function)) func = undefined;\n\n                    return performWithCurrent(function (o) {\n                        if(typeof o !== 'object') return o;\n                        var max, maxValue;\n\n                        if(!func) {\n                            max = o[protoIdentifier].first();\n                            o[protoIdentifier].each(1, function (item) {\n                                if(item >= max) max = item;\n                            });\n                        }\n                        else {\n                            max = o[protoIdentifier].first();\n                            maxValue = func.call(max, max);\n\n                            o[protoIdentifier].each(1, function (item) {\n                                if(func.call(item, item) >= maxValue) max = item;\n                            });\n                        }\n                        return max;\n                    });\n                },\n\n                /**\n                 * Returns the minimum item in the object.\n                 * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n                 * @return {*} The minimum item in the object collection.\n                 */\n                min: function min (func) {\n                    if(!(func instanceof Function)) func = undefined;\n\n                    return performWithCurrent(function (o) {\n                        if(typeof o !== 'object') return o;\n                        var min, minValue;\n\n                        if(!func) {\n                            min = o[protoIdentifier].first();\n                            o[protoIdentifier].each(1, function (item) {\n                                if(item <= min) min = item;\n                            });\n                        }\n                        else {\n                            min = o[protoIdentifier].first();\n                            minValue = func.call(min, min);\n\n                            o[protoIdentifier].each(1, function (item) {\n                                if(func.call(item, item) <= minValue) min = item;\n                            });\n                        }\n                        return min;\n                    });\n                },\n\n                /**\n                 * Tests whether or not the object has a method called 'method'.\n                 * @param {String} method The name of the method to test existence for.\n                 * @return {Boolean} True if the object has a function called 'method', false otherwise.\n                 */\n                implements: function _implements (method) {\n                    return performWithCurrent(function (o) {\n                        return o && o[method] instanceof Function;\n                    });\n                },\n\n                /**\n                 * Same as Object.j.implements, excepct with a hasOwnProperty check.\n                 * @param {String} method The name of the method to test existence for.\n                 * @return {Boolean} True if the object has its own function called 'method', false otherwise.\n                 */\n                implementsOwn: function implementsOwn (method) {\n                    return performWithCurrent(function (o) {\n                        return o && o[method] instanceof Function && o.hasOwnProperty(method);\n                    });\n                }\n            }\n        };\n\n        // ------------------------------------------- OTHER HELPER FUNCTIONS ------------------------------------------- //\n        // These will be attached to the exports object in Node.js, or the window object in the browser.\n\n        /**\n         * A generic, do nothing function that can be used over and over again to assign empty callback arguments to. It's better\n         * to re-use this function than continuously create empty functions all over the place.\n         * @type {Function}\n         */\n        JLib.NULLF = function NullFunction () {};\n\n        /**\n         * Returns 'enabled' if the value of 'i' evaluates to true, 'disabled otherwise'\n         * @param {*} i The thingy to evaluate\n         * @return {String} Either 'enabled' or 'disabled'\n         */\n        JLib.enabledOrDisabled = function enabledOrDisabled (i) {\n            return i ? 'enabled' : 'disabled';\n        };\n\n        /**\n         * A replacer function for JSON, to replace functions with '[Function (function name|anonymous)]'. A callback for\n         * JSON.stringify. @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n         */\n        JLib.JSONFunctionReplacer = function JSONFunctionReplacer (key, value) {\n            if(value instanceof Function) return '[Function: ' + (value.name || 'anonymous') + ']';\n            return value;\n        };\n\n        /**\n         * Get's a callback from an array like object.\n         * @return {Function} The supplied callback, or a fake one.\n         */\n        JLib.getCallback = function getCallback (argumentsObject) {\n            var last = argumentsObject[protoIdentifier].last();\n            return last instanceof Function ? last : JLib.NULLF;\n        };\n\n        /**\n         * Stores user created tokens\n         * @type {Object}\n         */\n        var customTokens = {};\n\n        /**\n         * Replaces string tokens ([.*]) with token values\n         * @param {String} s The string containing tokens to replace\n         * @return {String} The token-replaced string\n         */\n        JLib.replaceStringTokens = function replaceStringTokens (s) {\n            if(typeof s === 'string') {\n                s = s.replace(/\\[\\$DATE-TIME-24]/g , new Date().toLocaleString('en-US', { hour12: false }))\n                 .replace(/\\[\\$DATE-TIME]/g    , new Date().toLocaleString())\n                 .replace(/\\[\\$NOW]/g          , Date.now().toString())\n                 .replace(/\\[\\$TIME]/g         , new Date().toLocaleTimeString())\n                 .replace(/\\[\\$DATE]/g         , new Date().toLocaleDateString())\n                 .replace(/\\[\\$(HOME|~)]/g     , exports.USER_HOME.withoutTrailingSlash())\n                 .replace(/\\[\\$TMPDIR]/g       , exports.TMPDIR);\n\n                for(var i in customTokens) {\n                    if(customTokens.hasOwnProperty(i))\n                        s = s.replace(new RegExp('\\\\[\\\\$' + customTokens[i].name + ']', 'g'), customTokens[i].value);\n                }\n            }\n\n            return s;\n        };\n\n        /**\n         * Create a user defined string token that will be replace with the specified value when JPCUtils.replaceStringTokens is called.\n         * <strong>Note: All token names will be uppercased and prefixed with a dollar sign ($)</strong><br>\n         * For example, creating a token named 'example' or 'EXAMPLE' or 'Example' will replace the string [$EXAMPLE] with the given value.<br><br>\n         * Tokens can overwrite other tokens, by using the same name, converted to uppercase. So creating a token named 'example'\n         * after creating a token named 'ExAmPlE' will overwrite the first.\n         * @param {String} named The name of the string token\n         * @param {String} withValue The value to replace the string token with\n         * @return {JPCUtils} The current JPCUtils instance\n         */\n        JLib.createToken = function createToken (named, withValue) {\n            if(typeof named !== 'string')\n                throw new Error('JPLib.exportable.createToken expected argument #0 (named) to be a string, got: ' + typeof named);\n\n            if(typeof value !== 'string')\n                throw new Error('JPLib.exportable.createToken expected argument #1 (withValue) to be a string, got: ' + typeof withValue);\n\n            named = named.toUpperCase();\n            customTokens[named] = { name: named, value: withValue };\n            return exports;\n        };\n\n        /**\n         * Creates a single arguments string from an object\n         * @param {Object<String>} o The object to convert to an arguments string\n         * @param {Boolean=} [produceArray=false] If true, an array of arguments will be returned, otherwise a string\n         * (an array joined by ' ') will be returned.\n         * @return {String} The arguments string\n         */\n        JLib.generateArgumentsStringFromObject = function generateArgumentsStringFromObject (o, produceArray) {\n            if(o === undefined || o === null || o instanceof Function) return [];\n            if(typeof o === 'string' || typeof o === 'number') return [o.toString()];\n\n            var args = [];\n            if(o instanceof Array) {\n                o[protoIdentifier].each(function (val) { args.push(val.toString()); });\n                return args;\n            }\n\n            o[protoIdentifier].each(function (val, key) {\n                if(key === '_' && val instanceof Array) {\n                    args = args.concat(val);\n                }\n                else {\n                    if(key.length === 1) args.push('-' + key, val); else args.push('--' + key + '=' + val.toString());\n                }\n            });\n            return produceArray ? args : args.join(' ');\n        };\n\n        /**\n         * Generate a random string of alphanumeric characters\n         * @memberof String\n         * @param {Number=} length The maximum length of the string. If omitted, a random number between 1 - 100 will be used.\n         * @param {String=} [possible='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'] A string of possible\n         * characters that will be used by the function to generate the random string.\n         * @returns {String} A random string\n         * @function\n         */\n        JLib.randomString = function randomString (length, possible) {\n            var text = '';\n            possible = typeof possible === 'string' ? possible : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n            length = length || Math.floor(Math.random() * 101);\n            for(var i = 0; i < length; i++)\n                text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n            return text;\n        };\n\n        /**\n         * True if and only if all objects provided are null.\n         * @param {...*} o The objects to evaluate\n         * @return {Boolean}\n         */\n        JLib.isNull = function () {\n            return arguments[protoIdentifier].every(function (item) {\n                if(item !== null) return false;\n            });\n        };\n\n        /**\n         * True if and only if all objects provided are undefined.\n         * @param {...*} o The objects to evaluate\n         * @return {Boolean}\n         */\n        JLib.isUndefined = function () {\n            return arguments[protoIdentifier].every(function (item) {\n                if(item !== undefined) return false;\n            });\n        };\n\n        /**\n         * True if the object is an arguments object, false otherwise.\n         * @param {*} o The object to evaluate\n         * @return {Boolean} True if the object is an arguments object, false otherwise.\n         */\n        JLib.isArguments = function (o) {\n            return Object.prototype.toString.call(o) === '[object Arguments]';\n        };\n\n        // Apply the following to the JLib object.\n        var staticIdentityFunction = function () {\n            var args   = arguments[protoIdentifier].makeArray(),\n                method = this;\n\n            args.shift();\n            return arguments[protoIdentifier].every(function (item) {\n                if(item) return item[protoIdentifier][method]();\n                return false;\n            });\n        };\n\n        for(var n = ['isArray', 'isEmpty', 'isNumeric', 'isPureObject', 'isString', 'isBoolean', 'isFunction'], o = n.shift(); o; o = n.shift()) {\n            JLib[o] = staticIdentityFunction.bind(o);\n        }\n\n        if(IS_NODE) require(require('path').join(__dirname, 'lib', 'NodeAddons'))(JLib);\n        return JLib.init();\n    };\n\n    // ------------------------------------------------ EXPORT JLIB ------------------------------------------------- //\n    // JLib will be exported as a function, so the user can define custom a custom prototype namespace identifier.\n    // It's possible to call the function multiple times, adding the library to each prototype under different names,\n    // but this is highly discouraged.\n\n    var jlibs = {},\n        jInit = function (protoIdentifier) {\n            if(typeof protoIdentifier !== 'string') protoIdentifier = 'jl';\n            if(jlibs[protoIdentifier]) return jlibs[protoIdentifier];\n            return JLibrary(protoIdentifier);\n        };\n\n    return IS_NODE ?\n        module.exports = jInit :\n        window.JLib    = jInit ;\n}());\n"],"sourceRoot":"/source/"}