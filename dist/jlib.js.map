{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../jlib.js","../node_modules/os-browserify/browser.js","../node_modules/path-browserify/index.js","../node_modules/process/browser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","process","__dirname","isNode","argv","Array","IS_NODE","JLibrary","protoIdentifier","performWithCurrent","callback","value","ostack","pop","addToOtherPrototypes","shift","keys","Object","JLib","_object","hasOwnProperty","PROTO_IDENTIFIER","extend","toPrototype","name","func","toLowerCase","replace","args","arguments","toArray","c","apply","init","defineProperty","prototype","configurable","enumerable","get","push","this","String","_string","Number","_number","Date","_date","_array","unload","differenceFromString","other","sarr","split","oarr","differenceFromArray","join","replaceTokens","replaceStringTokens","intersectString","intersectArray","repeat","times","parseInt","isNaN","isFinite","os","rtrim","what","RegExp","ltrim","htmlEncode","map","&","<",">","\"","'","m","htmlDecode","&amp;","&lt;","&gt;","&quot;","&#039;","addSlashes","ucFirst","charAt","toUpperCase","slice","lcFirst","titleCase","arr","each","splice","index","count","add","ellipses","place","substring","substr","shuffle","j","Math","floor","random","tmp","reverse","str","withoutTrailingSlash","platform","withTrailingSlash","regexpSafe","pad","delim","pre","thisLength","newlineToBreak","tabsToSpan","wordWrapToLength","width","padleft","padright","omitFirst","undefined","paddingLeft","cols","item","len","olen","unshift","advanceDays","daysInTheFuture","adjustForWeekend","d","isNumeric","setTime","getTime","getDay","advanceMonths","monthsInTheFuture","advanceYears","yearsInTheFuture","yyyymmdd","dd","getDate","mm","getMonth","yyyy","getFullYear","clockTime","omitMS","toString","daysFrom","date","setDate","daysFromNow","secondsFrom","setSeconds","getSeconds","secondsFromNow","yearsFrom","setFullYear","yearsFromNow","monthsFrom","setMonth","monthsFromNow","hoursFrom","setHours","getHours","hoursFromNow","minutesFrom","setMinutes","getMinutes","minutesFromNow","monthsAgo","daysAgo","secondsAgo","minutesAgo","yearsAgo","ms","secs","mins","hrs","union","makeArray","only","array","indexOf","diff","intersection","without","res","v","rotate","direction","amount","rotateLeft","rotateRight","makeUnique","visited","unique","ascending","sort","b","descending","size","parseFloat","numeric","isEmpty","isArray","isPureObject","isString","isBoolean","isFunction","isArguments","toNumber","NaN","toInteger","obj","val","negative","abs","rangeA","rangeB","kf","Function","property","ret","broken","self","exit","every","first","key","last","findChildAtPath","path","delimiter","original","invoked","done","NULLF","p","k","clone","JSON","parse","stringify","message","types","type","filtered","where","predicate","isObject","whereKeys","invert","max","maxValue","min","minValue","implements","method","implementsOwn","enabledOrDisabled","JSONFunctionReplacer","getCallback","argumentsObject","customTokens","toLocaleString","hour12","now","toLocaleTimeString","toLocaleDateString","USER_HOME","TMPDIR","createToken","named","withValue","generateArgumentsStringFromObject","produceArray","concat","randomString","possible","text","isNull","isUndefined","staticIdentityFunction","bind","jlibs","jInit","window","_process",2,"endianness","hostname","location","loadavg","uptime","freemem","MAX_VALUE","totalmem","cpus","release","navigator","appVersion","networkInterfaces","getNetworkInterfaces","arch","tmpdir","tmpDir","EOL",3,"normalizeArray","parts","allowAboveRoot","up","filter","xs","splitPathRe","splitPath","filename","exec","resolve","resolvedPath","resolvedAbsolute","cwd","TypeError","normalize","isAbsolute","trailingSlash","paths","relative","from","to","trim","start","end","fromParts","toParts","samePartsLength","outputParts","sep","dirname","result","root","dir","basename","ext","extname",4,"cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","noop","nextTick","title","browser","env","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","chdir","umask"],"mappings":"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","file":"../jlib.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n/**\n * A massive prototype standard library, which prevents prototype namespace collisions by \"tucking\" the library\n * under the namespace 'jlib'.\n *\n * Browser and Node.js compatible. Compatible with both *nix and Windows.\n * Adds a bunch of helper functions to String, Object, Number, Function, and Array prototypes under the object 'jlib'.\n *\n * Prototyping is achieved without using any performance degredating calls to 'bind', and uses a simple object to store the\n * current objects being operated on.\n *\n * This file *avoids* ES6 features wherever possible, for browser compatibility.\n *\n * @author Jason Pollman <jasonjpollman@gmail.com>\n * @module jLib\n */\n\n(function addJLibrary () { // To Prevent window contamination in the browser, we'll wrap this in an AIIF.\n\n    /**\n     * Determines if the current JS framework is Node.js or not.\n     * @return {Boolean} True if Node.js, false otherwise\n     */\n    function isNode () {\n        return typeof module === 'object'         &&\n               typeof module.exports === 'object' &&\n               typeof process === 'object'        &&\n               process.argv instanceof Array;\n    }\n\n    /**\n     * Whether or not we're using Node.js\n     * @type {Boolean}\n     */\n    var IS_NODE = isNode();\n\n    /**\n     * The JLibrary\n     * @param {String} [protoIdentifier='jl'] A \"name\" of the namespace to attach to object prototypes. This allows us to re-name\n     * the JLibrary, should '.jl' be taken by another libaray.\n     */\n    var JLibrary = function JLibrary (protoIdentifier) {\n        protoIdentifier = typeof protoIdentifier === 'string' ? protoIdentifier : 'j';\n\n        /**\n         * The JLib library. An object that contains all of the functions/getters which will be namespaced under each\n         * instance prototype using the name 'jlib'.\n         * @type {Object}\n         */\n        var JLib = null,\n\n        /**\n         * The object stack. When a JLib function is executed the current (or \"this\") object is pushed onto the stack,\n         * then when performWithCurrent is called, it is popped from the stack. This allows us to use jlib functions\n         * within other jlib functions.\n         * @type {Array}\n         */\n        ostack = [];\n\n        /**\n         * Executes the given callback with the current object from the object stack. Then pops the object off the\n         * object stack.\n         * @param {Function} cb The callback to be performed.\n         * @return {*} The value returned from the callback execution\n         */\n        function performWithCurrent (callback) {\n            var value = callback(ostack[ostack.length - 1]);\n            ostack.pop();\n            return value;\n        }\n\n        /**\n         * Adds all the 'object' prototype classes to the other prototypes j objects.\n         * @return {undefined}\n         */\n        function addToOtherPrototypes () {\n            for(var n = ['_string', '_number', '_array', '_date'], o = n.shift(); o; o = n.shift()) {\n                var keys = Object.keys(JLib._object);\n                for(var i = 0; i < keys.length; i++) {\n                    if(JLib._object.hasOwnProperty(keys[i]) && !JLib[o][keys[i]])\n                        JLib[o][keys[i]] = JLib._object[keys[i]];\n                }\n            }\n        }\n\n        /**\n         * Properties and methods that will be added to the String.prototype.j object.\n         * @type {Object}\n         */\n        JLib = {\n\n            /**\n             * The prototype namespace identifier\n             * @type {String}\n             */\n            PROTO_IDENTIFIER: protoIdentifier,\n\n            /**\n             * Exposes the private function JLibrary~performWithCurrent.\n             * @type {[type]}\n             */\n            performWithCurrent: performWithCurrent,\n\n            /**\n             * Add to the JLib library\n             * @param {String} toPrototype The prototype to add the function to\n             * @param {String} name The name of the method\n             * @param {Function} func The function to invoke\n             * @return {Boolean} True if the extension was successful, false otherwise.\n             */\n            extend: function extend (toPrototype, name, func) {\n                if(typeof toPrototype !== 'string') return false;\n                if(typeof name !== 'string') return false;\n\n                toPrototype = toPrototype.toLowerCase().replace(/^_/, '') + '_';\n\n                if(JLib[toPrototype]) {\n                    JLib[toPrototype][name] = function () {\n                        var args = arguments[protoIdentifier].toArray();\n                        return performWithCurrent(function (c) { func.apply(c, args); });\n                    };\n\n                    if(toPrototype === '_object') addToOtherPrototypes();\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n             * Initializes the jLib library by attaching the j object to the prototypes.\n             * @return {[type]} [description]\n             */\n            init: function init () {\n                // Add all the object functions to each of the other types\n                addToOtherPrototypes();\n\n                // Append the JLib library to the object prototype\n                Object.defineProperty(Object.prototype, protoIdentifier, {\n                    configurable : false,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._object;\n                    }\n                });\n\n                // Append the JLib library to the string prototype\n                Object.defineProperty(String.prototype, protoIdentifier, {\n                    configurable : true,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._string;\n                    }\n                });\n\n                // Append the JLib library to the number prototype\n                Object.defineProperty(Number.prototype, protoIdentifier, {\n                    configurable : true,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._number;\n                    }\n                });\n\n                // Append the JLib library to the date prototype\n                Object.defineProperty(Date.prototype, protoIdentifier, {\n                    configurable : true,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._date;\n                    }\n                });\n\n                // Append the JLib library to the array prototype\n                Object.defineProperty(Array.prototype, protoIdentifier, {\n                    configurable : true,\n                    enumerable   : false,\n                    get          : function () {\n                        ostack.push(this);\n                        return JLib._array;\n                    }\n                });\n                return JLib;\n            },\n\n            /**\n             * Removes jlib from the prototype chain\n             * @return {Jlib} The current JLib instance\n             */\n            unload: function unload () {\n                delete String.prototype[protoIdentifier];\n                delete Array.prototype[protoIdentifier];\n                delete Date.prototype[protoIdentifier];\n                delete Object.prototype[protoIdentifier];\n                delete Number.prototype[protoIdentifier];\n                return JLib;\n            },\n\n            /**\n             * Functions available to String.prototype.j\n             * @type {Object}\n             */\n            _string: {\n\n                /**\n                 * Returns all the characters found in one string but not the other.\n                 * @param {String} other The string to compute the difference against.\n                 * @return {String} A difference string.\n                 */\n                differenceFromString: function differenceFromString (other) {\n                    return performWithCurrent(function (s) {\n                        if(typeof other !== 'string') return s;\n                        var sarr = s.split(''), oarr = other.split('');\n                        return sarr[protoIdentifier].differenceFromArray(oarr).join('');\n                    });\n                },\n\n                /**\n                 * Replaces tokens (snippets of text wrapped in brackets) with their values/\n                 * @return {String} The token replaced values.\n                 */\n                replaceTokens: function replaceTokens () {\n                    return performWithCurrent(function (s) {\n                        return JLib.replaceStringTokens(s);\n                    });\n                },\n\n                /**\n                 * Returns only the characters common to both strings\n                 * @param {String} other The string to compute the intersection against.\n                 * @return {String} The intersection between the two strings.\n                 */\n                intersectString: function intersectString (other) {\n                    return performWithCurrent(function (s) {\n                        if(typeof other !== 'string') return s;\n                        var sarr = s.split(''), oarr = other.split('');\n                        return sarr[protoIdentifier].intersectArray(oarr).join('');\n                    });\n                },\n\n                /**\n                 * Repeat a string 'times' times.\n                 * @param {Number} times The number of times to repeat the string\n                 * @return {String} The repeated string.\n                 */\n                repeat: function repeat (times) {\n                    times = parseInt(times, 10);\n                    times = isNaN(times) || !isFinite(times) || times <= 0 ? 1 : times;\n\n                    return performWithCurrent(function (s) {\n                        var os = s;\n\n                        for(var i = 1; i < times; i++) s += os;\n                        return s;\n                    });\n                },\n\n                /**\n                 * Right trims a string. Same as String.trim, but only for the end of a string.\n                 * @param {String} [what='\\\\s+'] What to trim.\n                 * @return {String} The right trimmed string\n                 */\n                rtrim: function rtrim (what) {\n                    return performWithCurrent(function (s) {\n                        what = typeof what === 'string' ? what : '\\\\s+';\n                        return s.replace(new RegExp(what + '$'), '');\n                    });\n                },\n\n                /**\n                 * Left trims a string. Same as String.trim, but only for the beginning of a string.\n                 * @param {String} [what='\\\\s+'] What to trim.\n                 * @return {String} The left trimmed string\n                 */\n                ltrim: function ltrim (what) {\n                    return performWithCurrent(function (s) {\n                        what = typeof what === 'string' ? what : '\\\\s+';\n                        return s.replace(new RegExp('^' + what), '');\n                    });\n                },\n\n                /**\n                 * Escapes HTML special characters\n                 * @return {String} The HTML escaped string\n                 */\n                htmlEncode: function htmlEncode () {\n                    return performWithCurrent(function (s) {\n                        var map = {\n                            '&'  : '&amp;',\n                            '<'  : '&lt;',\n                            '>'  : '&gt;',\n                            '\"'  : '&quot;',\n                            '\\'' : '&#039;'\n                        };\n                        return s.replace(/[&<>\"']/g, function (m) { return map[m]; });\n                    });\n                },\n\n                /**\n                 * Un-escapes HTML special characters\n                 * @return {String} The HTML escaped string\n                 */\n                htmlDecode: function htmlDecode () {\n                    return performWithCurrent(function (s) {\n                        var map = {\n                            '&amp;'  : '&',\n                            '&lt;'   : '<',\n                            '&gt;'   : '>',\n                            '&quot;' : '\"',\n                            '&#039;' : '\\''\n                        };\n                        return s.replace(/(&amp;|&lt;|&gt;|&quot;|&#039;)/g, function (m) { return map[m]; });\n                    });\n                },\n\n                /**\n                 * Created an 'eval' safe string, by adding slashes to \", ', \\t, \\n, \\f, \\r, and the NULL byte.\n                 * @return {String} A string with slashes\n                 */\n                addSlashes: function addSlashes () {\n                    return performWithCurrent(function (s) {\n                        return s.replace(/[\\\\\"'\\t\\n\\f\\r]/g, '\\\\$&').replace(/\\u0000/g, '\\\\0');\n                    });\n                },\n\n                /**\n                 * Returns a string with the first letter capitalized.\n                 * @return {String} The string with the first letter upper cased.\n                 * @function\n                 */\n                ucFirst: function ucFirst () {\n                    return performWithCurrent(function (s) {\n                        return s.charAt(0).toUpperCase() + s.slice(1);\n                    });\n                },\n\n                /**\n                 * Returns a string with the first letter lowercased.\n                 * @return {String} The string with the first letter lower cased.\n                 * @function\n                 */\n                lcFirst: function lcFirst () {\n                    return performWithCurrent(function (s) {\n                        return s.charAt(0).toLowerCase() + s.slice(1);\n                    });\n                },\n\n                /**\n                 * Returns a string in Title Case.\n                 * @function\n                 * @return {String} The title cased string.\n                 */\n                titleCase: function titleCase () {\n                    return performWithCurrent(function (s) {\n                        var arr = [];\n                        s.split(' ')[protoIdentifier].each(function (t) {\n                            arr.push(t[protoIdentifier].ucFirst());\n                        });\n                        return arr.join(' ');\n                    });\n                },\n\n                /**\n                 * Splices a string, much like an array.\n                 * @param {Number} index The index to begin splicing the string at\n                 * @param {Number} count The number of characters to delete\n                 * @param {String} add The string to append at the spliced section\n                 * @return {String} The spliced string.\n                 * @function\n                 */\n                splice: function splice (index, count, add) {\n                    return performWithCurrent(function (s) {\n                        return s.slice(0, index) + (add || '') + s.slice(index + count);\n                    });\n                },\n\n                /**\n                 * Return a truncated string with ellipses.\n                 * @param {Number=} length The length of the desired string. If ommited, the strings original length will be used.\n                 * @param {String=} [place='back'] Possible values are 'front' and 'back'. Specifying 'front' will truncate the\n                 * string and add ellipses to the front, 'back' (or any other value) will add the ellipses to the back.\n                 * @param {String=} [ellipses='...'] The string value of the ellipses. Use this to add anything other than '...'\n                 * @returns {String} A truncated string with ellipses (if its length is greater than 'length')\n                 * @function\n                 */\n                ellipses: function ellipses (length, place, ellipses) {\n                    return performWithCurrent(function (s) {\n                        if(isNaN(parseInt(length, 10))) length = s.length;\n                        if(length < 0 || !isFinite(length)) length = 0;\n\n                        ellipses = typeof ellipses === 'string' ? ellipses : '...';\n                        if(s.length <= length) return s;\n\n                        if(length <= ellipses.length) {\n                            return ellipses.substring(0, length);\n                        }\n                        else if(!place || place !== 'front') {\n                            return s.substr(0, length - ellipses.length) + ellipses;\n                        }\n                        else {\n                            return ellipses + s.substr(0, length - ellipses.length);\n                        }\n                    });\n                },\n\n                /**\n                 * Shuffles a string\n                 * @return {String} The mixed up string.\n                 */\n                shuffle: function shuffle () {\n                    return performWithCurrent(function (s) {\n                        var a = s.split(''),\n                            n = s.length;\n\n                        for(var i = n - 1; i > 0; i--) {\n                            var j   = Math.floor(Math.random() * (i + 1)),\n                                tmp = a[i];\n\n                            a[i] = a[j];\n                            a[j] = tmp;\n                        }\n\n                        return a.join('');\n                    });\n                },\n\n                /**\n                 * Reverses a string.\n                 * @return {String} The reversed string.\n                 */\n                reverse: function reverse () {\n                    return performWithCurrent(function (s) {\n                        if(s.length < 64) {\n                            var str = '';\n                            for(var i = s.length; i >= 0; i--) str += s.charAt(i);\n                            return str;\n                        }\n                        else {\n                            return s.split('').reverse().join('');\n                        }\n                    });\n                },\n\n                /**\n                 * Strips the trailing slashes from a string\n                 * If using Node.js, it will replace the trailing slash based on the value of os.platform\n                 * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n                 * @returns {String} The string without a trailing slash.\n                 * @function\n                 */\n                withoutTrailingSlash: function withoutTrailingSlash () {\n                    return performWithCurrent(function (s) {\n                        if(IS_NODE && require('os').platform === 'win32') return s.replace(/\\\\+$/, '');\n                        return s.replace(/\\/+$/, '');\n                    });\n                },\n\n                /**\n                 * Add a trailing slash to a string, if it doesn't already have one\n                 * If using Node.js, it will replace the trailing slash based on the value of os.platform\n                 * (i.e. if windows, '\\\\' will be replaced, '/' otherwise).\n                 * @returns {String} The string without a trailing slash.\n                 * @function\n                 */\n                withTrailingSlash: function withTrailingSlash () {\n                    return performWithCurrent(function (s) {\n                        if(IS_NODE && require('os').platform === 'win32') return s[protoIdentifier].withoutTrailingSlash() + '\\\\';\n                        return s[protoIdentifier].withoutTrailingSlash() + '/';\n                    });\n                },\n\n                /**\n                 * Escapes regular expression special characters. This is useful is you wish to create a new regular expression\n                 * from a stored string value.\n                 * @returns {String} The regular expression safe string\n                 * @function\n                 */\n                regexpSafe: function regexpSafe () {\n                    return performWithCurrent(function (s) {\n                        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n                    });\n                },\n\n                /**\n                 * Pads a string with 'delim' characters to the specified length. If the length is less than the string length,\n                 * the string will be truncated.\n                 * @param {Number} length The length to pad the string to. If less that the length of the string, the string will\n                 * be returned. If less than the length of the string, the string will be sliced.\n                 * @param {String=} [delim=' '] The character to pad the string with.\n                 * @param {Boolean=} [pre=false] If true, the padding will be added to the beginning of the string, otherwise the padding\n                 * will be added to the end.\n                 * @returns {String} The padded string\n                 * @function\n                 */\n                pad: function pad (length, delim, pre) {\n                    return performWithCurrent(function (s) {\n                        var i, thisLength = s.length;\n\n                        if(!delim) delim = ' ';\n                        if(length === 0) return ''; else if(isNaN(parseInt(length, 10))) return s;\n\n                        length = parseInt(length, 10);\n                        if(length < thisLength) return !pre ? s.slice(0, length) : s.slice(-length);\n\n                        if(pre) {\n                            for(i = 0; i < length - thisLength; i++) s = delim + s;\n                        }\n                        else {\n                            for(i = 0; i < length - thisLength; i++) s += delim;\n                        }\n                        return s;\n                    });\n                },\n\n                /**\n                 * Replaces newlines with br tags.\n                 * @return {String} The string with newlines converted to br tags.\n                 */\n                newlineToBreak: function newlineToBreak () {\n                    return performWithCurrent(function (s) {\n                        return s.replace(/(\\r\\n|\\n)/g, '<br/>');\n                    });\n                },\n\n                /**\n                 * Replaces tabs with a span element with the class 'tab'\n                 * @return {String} The string with tabs converted to spans with the class 'tab'\n                 */\n                tabsToSpan: function tabsToSpan () {\n                    return performWithCurrent(function (s) {\n                        return s.replace(/\\t/g, '<span class=\"tab\"></span>');\n                    });\n                },\n\n                /**\n                 * Adjusts a string to fit within the confines of 'width', without breaking words.\n                 * @param {Number=} [length=120] The length to word wrap the string to.\n                 * @param {Number=} [padleft=0] The number of columns to pad the string on the left\n                 * @param {Number=} [padright=0] The number of columns to pad the string on the right\n                 * @param {Boolean=} omitFirst If true, the first line will not be padded left\n                 * @return {String} The string adjusted and padded for the stdout.\n                 * @function\n                 */\n                wordWrapToLength: function wordWrapToLength (width, padleft, padright, omitFirst) {\n                    return performWithCurrent(function (s) {\n                        if(padright === undefined && padleft) padright = padleft;\n\n                        padleft  = !isNaN(parseInt(padleft,  10)) ? parseInt(padleft, 10)  : 0;\n                        padright = !isNaN(parseInt(padright, 10)) ? parseInt(padright, 10) : 0;\n\n                        var paddingLeft = '';\n                        for(var n = 0; n < padleft;  n++) paddingLeft  += ' ';\n\n                        var cols   = !isNaN(parseInt(width, 10)) ? length : 120,\n                            arr    = s.split(' '),\n                            item   = null,\n                            len    = !omitFirst ? cols - padright - padleft : cols - padright,\n                            str    = !omitFirst ? paddingLeft : '',\n                            olen   = cols - padright - padleft;\n\n                        while((item = arr.shift()) !== undefined) {\n                            if(item.length < len) {\n                                str += item + ' ';\n                                len -= item.length + 1;\n                            }\n                            else if(item.length > olen) {\n                                str += item.substring(0, len - 1) + '-\\n' + paddingLeft;\n                                arr.unshift(item.substring(len, item.length - 1));\n                                len = cols - padright - padleft;\n                            }\n                            else {\n                                str += '\\n' + paddingLeft + item + ' ';\n                                len = cols - padright - 1 - padleft - item.length;\n                            }\n                        }\n                        return str;\n                    });\n                }\n            },\n\n            /**\n             * Functions available to Date.prototype.j.\n             * @type {Object}\n             */\n            _date: {\n                /**\n                 * Moves a date forward 'daysInTheFuture' days.\n                 * @param {Number} daysInTheFuture The number of days in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified days.\n                 * @function\n                 */\n                advanceDays: function advanceDays (daysInTheFuture, adjustForWeekend) {\n                    return performWithCurrent(function (d) {\n                        daysInTheFuture = daysInTheFuture && daysInTheFuture[protoIdentifier].isNumeric() ? daysInTheFuture : 1;\n                        d.setTime(d.getTime() + (daysInTheFuture * 86400000));\n\n                        if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                            while(d.getDay() === 0 || d.getDay() === 6)\n                                d.setTime(d.getTime() + 86400000);\n                        }\n                        return d;\n                    });\n                },\n\n                /**\n                 * Moves a date forward 'monthsInTheFuture' months.\n                 * @param {Number} monthsInTheFuture The number of months in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified months.\n                 * @function\n                 */\n                advanceMonths: function advanceMonths (monthsInTheFuture, adjustForWeekend) {\n                    return performWithCurrent(function (d) {\n                        monthsInTheFuture = monthsInTheFuture && monthsInTheFuture[protoIdentifier].isNumeric() ? monthsInTheFuture : 1;\n                        d.setTime(d.getTime() + (monthsInTheFuture * 2629746000));\n\n                        if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                            while(d.getDay() === 0 || d.getDay() === 6)\n                                d.setTime(d.getTime() + 86400000);\n                        }\n                        return d;\n                    });\n                },\n\n                /**\n                 * Moves a date forward 'yearsInTheFuture' years.\n                 * @param {Number} yearsInTheFuture The number of years in the future to advance the date\n                 * @param {Boolean=} [adjustForWeekend=false] Whether or not the date should fall on a weekend day\n                 * @returns {Date} The date, adjusted the number of specified years.\n                 * @function\n                 */\n                advanceYears: function advanceYears (yearsInTheFuture, adjustForWeekend) {\n                    return performWithCurrent(function (d) {\n                        yearsInTheFuture = yearsInTheFuture && yearsInTheFuture[protoIdentifier].isNumeric() ? yearsInTheFuture : 1;\n                        d.setTime(d.getTime() + (yearsInTheFuture * 31536000000));\n\n                        if(adjustForWeekend && (d.getDay() === 0 || d.getDay() === 6)) {\n                            while(d.getDay() === 0 || d.getDay() === 6)\n                                d.setTime(d.getTime() + 86400000);\n                        }\n                        return d;\n                    });\n                },\n\n                /**\n                 * Returns the date in the yyyy-mm-dd format.\n                 * @param {String} [delim='-'] The delimiter to used the separate the date components (e.g. '-' or '.')\n                 * @returns {String} The date in the yyyy-mm-dd format.\n                 * @function\n                 */\n                yyyymmdd: function yyyymmdd (delim) {\n                    return performWithCurrent(function (d) {\n                        delim = typeof delim !== 'string' ? '-' : delim ;\n\n                        var dd   = d.getDate(),\n                            mm   = d.getMonth() + 1,\n                            yyyy = d.getFullYear();\n\n                        if(dd < 10) dd = '0' + dd;\n                        if(mm < 10) mm = '0' + mm;\n                        return yyyy + delim + mm + delim + dd;\n                    });\n                },\n\n                /**\n                 * Converts a date to the HH:MM:SS.MSEC time format\n                 * @memberof Number.prototype\n                 * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n                 * @returns {String} The formatted number, now a string.\n                 * @function\n                 */\n                clockTime: function clockTime (omitMS) {\n                    return performWithCurrent(function (d) {\n                        return d.getTime()[protoIdentifier].clockTime(!!omitMS);\n                    });\n                }\n            },\n\n            /**\n             * Functions available to Number.prototype.j.\n             * @type {Object}\n             */\n            _number: {\n                /**\n                 * Pads a number with preceeding zeros.\n                 * @param {Number} length The final length of the string\n                 * @returns {String} The padded number, now a string.\n                 * @function\n                 */\n                pad: function pad (length) {\n                    return performWithCurrent(function (n) {\n                        return n.toString()[protoIdentifier].pad(length, '0', true);\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of days.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                daysFrom: function daysFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setDate(date.getDate() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of days.\n                 * @return {Date} A date object\n                 */\n                daysFromNow: function daysFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].daysFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of days.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                secondsFrom: function secondsFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setSeconds(date.getSeconds() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of days.\n                 * @return {Date} A date object\n                 */\n                secondsFromNow: function secondsFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].secondsFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of years.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                yearsFrom: function yearsFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setFullYear(date.getFullYear() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of years.\n                 * @return {Date} A date object\n                 */\n                yearsFromNow: function yearsFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].yearsFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of months.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                monthsFrom: function monthsFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setMonth(date.getMonth() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of months.\n                 * @return {Date} A date object\n                 */\n                monthsFromNow: function monthsFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].monthsFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of hours.\n                 * @param {Date} date The date to change.\n                 * @return {Date} The modified date.\n                 */\n                hoursFrom: function hoursFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setHours(date.getHours() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of hours.\n                 * @return {Date} A date object\n                 */\n                hoursFromNow: function hoursFromNow () {\n                    return performWithCurrent(function (n) {\n                        return n[protoIdentifier].hoursFrom(new Date());\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the date the specified number of minutes.\n                 * @param {Date} date The date to change.\n                 * @return {Date} A modified date.\n                 */\n                minutesFrom: function minutesFrom (date) {\n                    return performWithCurrent(function (n) {\n                        if(typeof date === 'number') date = new Date(date);\n                        if(!(date instanceof Date))  date = new Date();\n\n                        date.setMinutes(date.getMinutes() + n);\n                        return date;\n                    });\n                },\n\n                /**\n                 * Advances (or reverses) the current date the specified number of minutes.\n                 * @return {Date} The date object\n                 */\n                minutesFromNow: function minutesFromNow () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].minutesFrom(new Date());\n                    });\n                },\n\n                /**\n                 * The time, months in the past.\n                 * @return {Date} A Date object.\n                 */\n                monthsAgo: function monthsAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].monthsFromNow();\n                    });\n                },\n\n                /**\n                 * The time, days in the past.\n                 * @return {Date} A Date object.\n                 */\n                daysAgo: function daysAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].daysFromNow();\n                    });\n                },\n\n                /**\n                 * The time, seconds in the past.\n                 * @return {Date} A Date object.\n                 */\n                secondsAgo: function secondsAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].secondsFromNow();\n                    });\n                },\n\n                /**\n                 * The time, minutes in the past.\n                 * @return {Date} A Date object.\n                 */\n                minutesAgo: function minutesAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].minutesFromNow();\n                    });\n                },\n\n                /**\n                 * The time, years in the past.\n                 * @return {Date} A Date object.\n                 */\n                yearsAgo: function yearsAgo () {\n                    return performWithCurrent(function (n) {\n                        return (-n)[protoIdentifier].yearsFromNow();\n                    });\n                },\n\n                /**\n                 * Converts a number to the HH:MM:SS.MSEC time format\n                 * @memberof Number.prototype\n                 * @param {Boolean=} [omitMS=false] Whether or not to include the MS portion of the returned string\n                 * @returns {String} The formatted number, now a string.\n                 * @function\n                 */\n                clockTime: function clockTime (omitMS) {\n                    return performWithCurrent(function (t) {\n                        var ms, secs, mins, hrs;\n\n                        ms = t % 1000;\n                        t = (t - ms) / 1000;\n\n                        secs = t % 60;\n                        t = (t - secs) / 60;\n\n                        mins = t % 60;\n                        hrs = (t - mins) / 60;\n\n                        return hrs.toString().pad(2) + ':' + mins.pad(2) + ':' + secs.pad(2) + ((omitMS === true) ? '' : '.' + ms.pad(3));\n                    });\n                }\n            },\n\n            /**\n             * Functions available to Array.prototype.j.\n             * @type {Object}\n             */\n            _array: {\n\n                /**\n                 * Shuffles an array\n                 * @return {Array<*>} The mixed up array\n                 */\n                shuffle: function shuffle () {\n                    return performWithCurrent(function (a) {\n                        for(var i = a.length - 1; i > 0; i--) {\n                            var j = Math.floor(Math.random() * (i + 1)), tmp = a[i];\n                            a[i] = a[j];\n                            a[j] = tmp;\n                        }\n                        return a;\n                    });\n                },\n\n                /**\n                 * Computes the union between the current array, and all the array objects passed in. That is,\n                 * the set of unique objects present in all of the arrays.\n                 * @param {...Array} arr A list of array objects\n                 * @return {Array<*>} The union set of the provided arrays.\n                 */\n                union: function union () {\n                    var args = arguments[protoIdentifier].makeArray()[protoIdentifier].only('array');\n\n                    return performWithCurrent(function (a) {\n                        var union = [];\n                        args.unshift(a);\n                        args[protoIdentifier].each(function (array) {\n                            array[protoIdentifier].each(function (item) {\n                                if(union.indexOf(item) === -1) union.push(item);\n                            });\n                        });\n                        return union;\n                    });\n                },\n\n                /**\n                 * Returns all the items not common to both arrays.\n                 * @param {Array} other The array to compute the difference from.\n                 * @return {Array} A new array with items unique to each array.\n                 */\n                differenceFromArray: function differenceFromArray (other) {\n                    return performWithCurrent(function (a) {\n                        if(!(other instanceof Array)) return a;\n\n                        var diff = [];\n                        a[protoIdentifier].each(function (item) {\n                            if(other.indexOf(item) === -1) diff.push(item);\n                        });\n\n                        other[protoIdentifier].each(function (item) {\n                            if(a.indexOf(item) === -1) diff.push(item);\n                        });\n\n                        return diff;\n                    });\n                },\n\n                /**\n                 * Returns all the items common to both arrays.\n                 * @param {Array} other The array to compute the intersection from.\n                 * @return {Array} A new array with items common to both arrays.\n                 */\n                intersectArray: function intersectArray (other) {\n                    return performWithCurrent(function (a) {\n                        if(!(other instanceof Array)) return a;\n\n                        var intersection = [];\n                        a[protoIdentifier].each(function (item) {\n                            if(other.indexOf(item) !== -1) intersection.push(item);\n                        });\n\n                        return intersection;\n                    });\n                },\n\n                /**\n                 * Creates a new array from the current one, with all occurences of the provided arguments ommited.<br>\n                 * For example: <em>[1,2,3,4,5].without(1)</em> will return <em>[2,3,4,5]</em>\n                 * and <em>[1, null, 2, null, undefined].without(null, undefined)</em> will return <em>[1, 2]</em>\n                 * @returns {Array<*>} A shallow copy of the array with the provided arguments ommited.\n                 * @function\n                 */\n                without: function without () {\n                    var args = arguments[protoIdentifier].makeArray();\n                    return performWithCurrent(function (a) {\n                        var res  = [];\n\n                        a[protoIdentifier].each(function (v) { if(args.indexOf(v) === -1) res.push(v); });\n                        return res;\n                    });\n                },\n\n                /**\n                 * Rotates the array left or right the specified number of times. If the direction is left, it will shift off the\n                 * first <em>n</em> elements and push them to the end of the array. If right, it will pop off the last <em>n</em>\n                 * items and unshift them onto the front of the array.\n                 * @param {String=} [direction='left'] The direction to rotate array members.\n                 * @param {Number=} [amount=1] The number of elements to shift\n                 * @return {Array<*>} The current array, shifted.\n                 * @function\n                 */\n                rotate: function rotate (direction, amount) {\n                    return performWithCurrent(function (a) {\n                        if(direction && direction.isNumeric() && !amount) {\n                            amount    = direction;\n                            direction = undefined;\n                        }\n\n                        if(!amount || (amount && !amount.isNumeric())) amount = 1;\n                        for(var i = 0; i < amount; i++) {\n                            if(direction !== 'right') a.push(a.shift()); else a.unshift(a.pop());\n                        }\n                        return a;\n                    });\n                },\n\n                /**\n                 * Rotates the array left the specified number of times.\n                 * This is useful if trying to create a circular queue.\n                 * @param {Number=} [amount=1] The number of times to rotate the array left.\n                 * @return {Array<*>} The current array, rotated left.\n                 * @function\n                 */\n                rotateLeft: function rotateLeft (amount) {\n                    return performWithCurrent(function (a) {\n                        return a[protoIdentifier].rotate('left', amount);\n                    });\n                },\n\n                /**\n                 * Rotates the array right the specified number of times.\n                 * This is useful if trying to create a circular queue.\n                 * @param {Number=} [amount=1] The number of times to rotate the array left.\n                 * @return {Array<*>} The current array, rotated right.\n                 * @function\n                 */\n                rotateRight: function rotateLeft (amount) {\n                    return performWithCurrent(function (a) {\n                        return a[protoIdentifier].rotate('right', amount);\n                    });\n                },\n\n                /**\n                 * Removes duplicates from the current array.\n                 * This is a destructive action, and will modify the array in place.\n                 * @returns {Array<*>} The current array, with duplicates removed.\n                 * @function\n                 */\n                makeUnique: function makeUnique () {\n                    return performWithCurrent(function (a) {\n                        var visited = [];\n                        for(var i = 0; i < a.length; i++) {\n                            if(visited.indexOf(a[i]) === -1) {\n                                visited.push(a[i]);\n                            }\n                            else {\n                                a.splice(i, 1);\n                                i--; // Splice will affect the internal array pointer, so fix it...\n                            }\n                        }\n                        return a;\n                    });\n                },\n\n                /**\n                 * Gets an array of unique items from the current array.\n                 * @returns {Array} A new array with no duplicate values.\n                 * @function\n                 */\n                unique: function unique () {\n                    return performWithCurrent(function (a) {\n                        var visited = [],\n                            unique  = [];\n\n                        a[protoIdentifier].each(function (item) {\n                            if(visited.indexOf(item) === -1) {\n                                unique.push(item);\n                                visited.push(item);\n                            }\n                        });\n                        return unique;\n                    });\n                },\n\n                /**\n                 * Sorts the array in ascending order.\n                 * This is a destructive action, and will modify the array in place.\n                 * @returns {Array} The array sorted in ascending order.\n                 * @function\n                 */\n                ascending: function ascending () {\n                    return performWithCurrent(function (a) {\n                        return a.sort(function (a, b) {\n                            return a < b ? -1 : a > b ? 1 : 0;\n                        });\n                    });\n                },\n\n                /**\n                 * Sorts the array in descending order.\n                 * This is a destructive action, and will modify the array in place.\n                 * @returns {Array} The array sorted in descending order.\n                 * @function\n                 */\n                descending: function descending () {\n                    return performWithCurrent(function (a) {\n                        return a.sort(function (a, b) {\n                            return a > b ? -1 : a < b ? 1 : 0;\n                        });\n                    });\n                }\n            },\n\n            /**\n             * Functions available to Object.prototype.j.\n             * @type {Object}\n             */\n            _object: {\n\n                /**\n                 * Returns the object's keys.\n                 * @returns {Array<String|Number>} The object's key set\n                 * @function\n                 */\n                keys : function keys () {\n                    return performWithCurrent(function (o) {\n                        return Object.keys(o);\n                    });\n                },\n\n                /**\n                 * Returns the 'size' or 'length' of an object.\n                 * <ul>\n                 *      <li> String   -> The string's length  </li>\n                 *      <li> Number   -> The number of digits </li>\n                 *      <li> Object   -> The number of keys   </li>\n                 *      <li> Array    -> The number of items  </li>\n                 *      <li> Function -> 1                    </li>\n                 * </ul>\n                 *\n                 * @returns {Number} The number of items within the object.\n                 * @function\n                 */\n                size: function size () {\n                    return performWithCurrent(function (o) {\n                        switch(true) {\n                            case o instanceof Array:\n                            case typeof o === 'string':\n                                return o.length;\n\n                            case typeof o === 'object':\n                                return Object.keys(o).length;\n\n                            case typeof o === 'function':\n                                return 1;\n\n                            case typeof o === 'number':\n                                return o.toString().length;\n\n                            default:\n                                return o;\n                        }\n                    });\n                },\n\n                /**\n                 * Determines if an object can be converted to a number.\n                 * @returns {Boolean} True if the object is numeric, false otherwise.\n                 * @function\n                 */\n                isNumeric: function isNumeric () {\n                    return performWithCurrent(function (o) {\n                        return !isNaN(parseFloat(o)) && isFinite(o);\n                    });\n                },\n\n                /**\n                 * Converts an object to a number.\n                 * @returns {Number} The object as a number.\n                 * @function\n                 */\n                numeric: function numeric () {\n                    return performWithCurrent(function (o) {\n                        return parseFloat(o);\n                    });\n                },\n\n                /**\n                 * Determines if an object has no keys, if an array has no items, or if a string === ''.\n                 * @returns {Boolean} True if the object is 'empty', false otherwise.\n                 * @function\n                 */\n                isEmpty: function isEmpty () {\n                    return performWithCurrent(function (o) {\n                        return o[protoIdentifier].size() === 0;\n                    });\n                },\n\n                /**\n                 * True if the object is an array, false otherwise.\n                 * @return {Boolean} True if the object is an array, false otherwise.\n                 */\n                isArray: function isArray () {\n                    return performWithCurrent(function (o) {\n                        return o[protoIdentifier] instanceof Array;\n                    });\n                },\n\n                /**\n                 * True if the object is an object and not an array, false otherwise.\n                 * @return {Boolean} True if the object is an object and not an array, false otherwise.\n                 */\n                isPureObject: function isPureObject () {\n                    return performWithCurrent(function (o) {\n                        return !(o[protoIdentifier] instanceof Array) && typeof o === 'object';\n                    });\n                },\n\n                /**\n                 * True if the object is a string, false otherwise.\n                 * @return {Boolean} True if the object is a string, false otherwise.\n                 */\n                isString: function isString () {\n                    return performWithCurrent(function (o) {\n                        return typeof o === 'string';\n                    });\n                },\n\n                /**\n                 * True if the object is a boolean, false otherwise.\n                 * @return {Boolean} True if the object is a boolean, false otherwise.\n                 */\n                isBoolean: function isBoolean () {\n                    return performWithCurrent(function (o) {\n                        return typeof o === 'boolean';\n                    });\n                },\n\n                /**\n                 * True if the object is a function, false otherwise.\n                 * @return {Boolean} True if the object is a function, false otherwise.\n                 */\n                isFunction: function isFunction () {\n                    return performWithCurrent(function (o) {\n                        return typeof o === 'function';\n                    });\n                },\n\n                /**\n                 * True if the object is an arguments object, false otherwise\n                 * @return {Boolean} True if the object is an arguments object, false otherwise\n                 */\n                isArguments: function isArguments () {\n                    return performWithCurrent(function (o) {\n                        return Object.prototype.toString.call(o) === '[object Arguments]';\n                    });\n                },\n\n                /**\n                 * Convers an object to a number, if possible.\n                 * @returns {Number} The object as a float or NaN.\n                 * @function\n                 */\n                toNumber: function toNumber () {\n                    return performWithCurrent(function (o) {\n                        return o.isNumeric() ? parseFloat(o) : NaN;\n                    });\n                },\n\n                /**\n                 * Convers an object to an integer, if possible.\n                 * @returns {Number} The object as an integer or NaN.\n                 * @function\n                 */\n                toInteger: function toInteger () {\n                    return performWithCurrent(function (o) {\n                        return o.isNumeric() ? parseInt(o, 10) : NaN;\n                    });\n                },\n\n                /**\n                 * Creates a new array from the object. If it's a string, it will split the string by ''; if a number, it will\n                 * split the number into digits and return an array of digits.\n                 * @returns {Array} A new array, created from the object.\n                 * @function\n                 */\n                makeArray: function makeArray () {\n                    return performWithCurrent(function (o) {\n                        var arr = [];\n\n                        if(o instanceof Array) return o;\n                        o[protoIdentifier].each(function (obj) { arr.push(obj); });\n                        return arr;\n                    });\n                },\n\n                /**\n                 * Returns a random array item, random object property, random character in a string, or random digit in a number.\n                 * @returns {*}\n                 * @function\n                 */\n                random: function random () {\n                    return performWithCurrent(function (o) {\n                        if(typeof o === 'object') {\n                            return o instanceof Array ?\n                                o[Math.floor(Math.random() * o.length)] :\n                                o[Object.keys(o)[Math.floor(Math.random() * Object.keys(o).length)]];\n                        }\n                        else if(typeof o === 'string' || typeof o === 'number') {\n                            var val = o, negative = false;\n\n                            if(o.length === 0) return '';\n                            if(typeof o === 'number' && o < 0) {\n                                negative = true;\n                                val = Math.abs(val);\n                            }\n\n                            val = val.toString()[Math.floor(Math.random() * val.toString().length)];\n                            if(typeof o === 'number') val = parseInt(val, 10);\n                            return negative ? -val : val;\n                        }\n                        return o;\n                    });\n                },\n\n                /**\n                 * Invokes the callback 'f' for each property the object contains. If this is called\n                 * on a number or function, the object will be cast to a string.<br><br>\n                 * The callback `f` will be invoked with the following arguments:\n                 * <ul>\n                 * \t<li>value     - The value of the current object being iterated over</li>\n                 * \t<li>key       - The key of the current object (if an object, the index if an array)</li>\n                 * \t<li>iteration - The current iteration (same as key if a string or array)</li>\n                 * \t<li>exit      - A function which will break the loop and return the values passed to it,\n                 * \t\t\t\t\tor a single value if only a single value is passed.</li>\n                 * </ul>\n                 * @function\n                 * @memberof Object.prototype\n                 * @param {Number=} [rangeA=0] The iteration start index\n                 * @param {Number=} [rangeB='length of the item'] The iteration end index\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {*} The value passed to the exit parameter of the callback...\n                 */\n                each: function each (rangeA, rangeB, f) {\n                    var kf = Object.keys(arguments);\n                    f = arguments[kf[kf.length - 1]];\n                    f = f instanceof Function ? f : undefined;\n\n                    return performWithCurrent(function (o) {\n                        var ret       = null,\n                            broken    = false,\n                            self      = o,\n                            keys, property, value,\n\n                            exit = function () {\n                                var args = arguments[protoIdentifier].toArray();\n                                broken   = true;\n                                ret      = args.length > 1 ? args : args[0];\n                            };\n\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n                        keys = Object.keys(self);\n\n                        rangeA = parseInt(rangeA);\n                        rangeA = (isNaN(rangeA) || rangeA < 0 || !isFinite(rangeA)) ? 0 : rangeA;\n\n                        rangeB = parseInt(rangeB);\n                        rangeB = (isNaN(rangeB) || rangeB + 1 > keys.length || !isFinite(rangeB)) ? keys.length : rangeB + 1; // End range is inclusive...\n                        rangeB = rangeB < 0 ? 0 : rangeB;\n\n                        var i = 0;\n                        if(f instanceof Function) {\n                            for(var n = rangeA; n < rangeB; n++) {\n                                property = keys[n];\n                                value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                                f.call(o, value, property, n, exit, i++);\n                                if(broken) break;\n                            }\n                        }\n                        return ret;\n                    });\n                },\n\n                /**\n                 * Invokes the callback 'f' for every property the object contains. If the callback returns false, the\n                 * loop is broken and false is returned; otherwise true is returned.\n                 * @param {Function} f The callback to invoke for each item within the object\n                 * @returns {Boolean} True if none of the callback invocations returned false.\n                 * @function\n                 */\n                every: function every (f) {\n                    f = f instanceof Function ? f : undefined;\n\n                    return performWithCurrent(function (o) {\n                        var self = o, keys, property, value;\n                        if(typeof self === 'number' || typeof self === 'function' || typeof self === 'boolean') self = o.toString();\n                        keys = Object.keys(self);\n\n                        var i = 0;\n                        if(f instanceof Function) {\n                            for(var n = 0; n < keys.length; n++) {\n                                property = keys[n];\n                                value    = (typeof o === 'number' && !isNaN(parseFloat(self[property]))) ? parseFloat(self[property]) : self[property];\n                                if(f.call(o, value, property, n, i++) === false) return false;\n                            }\n                        }\n                        return true;\n                    });\n                },\n\n                /**\n                 * Converts an object to an array. For strings, numbers, and functions this will\n                 * return a char array to their respective .toString() values\n                 * @function\n                 * @return {Array<*>} The object, converted to an array.\n                 */\n                toArray: function toArray () {\n                    return performWithCurrent(function (o) {\n                        if(o instanceof Array) return o;\n\n                        var arr = [];\n                        o[protoIdentifier].each(function (val) { arr.push(val); });\n                        return arr;\n                    });\n                },\n\n                /**\n                 * Returns the first n elements of an object. If the object is an array, and only one items is retrieved,\n                 * that item will be returned, rather than an array.\n                 * @param {Number=} [n=1] The number of elements to return\n                 * @return {Array<*>} The first n elements of the array.\n                 */\n                first: function first (n) {\n                    return performWithCurrent(function (o) {\n                        n = parseInt(n, 10);\n                        n = isNaN(n) || !isFinite(n) ? 1 : n;\n                        var v = null;\n\n                        if(typeof o !== 'object') {\n                            v = o.toString().slice(0, n);\n                        }\n                        else if(o instanceof Array) {\n                            v = o.slice(0, n);\n                        }\n                        else {\n                            v = {};\n                            o[protoIdentifier].each(0, n - 1, function (item, key) { v[key] = item; });\n                            var keys = Object.keys(v);\n                            return keys.length === 1 ? v[keys[0]] : v;\n                        }\n\n                        return v.length === 1 ? v[0] : v;\n                    });\n                },\n\n                /**\n                 * Returns the last n elements of an object. If the object is an array, and only one items is retrieved,\n                 * that item will be returned, rather than an array.\n                 * @param {Number=} [n=1] The number of elements to return\n                 * @return {Array<*>} The last n elements of the array.\n                 * @function\n                 */\n                last: function last (n) {\n                    return performWithCurrent(function (o) {\n                        n = parseInt(n, 10);\n                        n = isNaN(n) || !isFinite(n) ? 1 : n;\n                        var v = null;\n\n                        if(typeof o !== 'object') {\n                            v = o.toString().slice(-n);\n                        }\n                        else if(o instanceof Array) {\n                            v = o.slice(-n);\n                        }\n                        else {\n                            v = {};\n                            var len = o[protoIdentifier].size();\n\n                            o[protoIdentifier].each(len - n, len, function (item, key) { v[key] = item; });\n                            var keys = Object.keys(v);\n                            return keys.length === 1 ? v[keys[0]] : v;\n                        }\n\n                        return v.length === 1 ? v[0] : v;\n                    });\n                },\n\n                /**\n                 * Find a child of an object using the given path, split by the given delimiter (or '.' by default)\n                 * @param {String} path The path to the child object\n                 * @param {String=} [delimiter='.'] The path delimiter\n                 * @param {Function=} done A callback for completion\n                 * @return {*|Null} The child object at the given string path, or null if it doesn't exist.\n                 * @function\n                 */\n                findChildAtPath: function findChildAtPath (path, delimiter, original, invoked, done) {\n                    done = arguments[protoIdentifier].last() instanceof Function ? arguments[protoIdentifier].last() : JLib.NULLF;\n\n                    return performWithCurrent(function (o) {\n                        var self = o;\n\n                        original = (!(original instanceof Function) && original) ? original : self;\n                        invoked  = invoked || false;\n\n                        if(typeof o === 'object' && typeof path === 'string') {\n                            delimiter = typeof delimiter === 'string' ? delimiter : '.';\n                            path      = path.split(delimiter);\n\n                            var p = path.shift();\n                            if(p) {\n                                return self[protoIdentifier].each(function (o, k, i, exit) {\n                                    if(path.length === 0 && k === p) {\n                                        done.call(original, o, self, k);\n                                        invoked = true;\n                                        exit(o);\n                                    }\n                                    else {\n                                        var obj = o[protoIdentifier].findChildAtPath(path.join(delimiter), delimiter, original, invoked, done);\n                                        if(obj !== null) exit(obj);\n                                    }\n                                });\n                            }\n                        }\n                        if(!invoked && original === self && done instanceof Function) done.call(original, null, self, null);\n                        return null;\n                    });\n                },\n\n                /**\n                 * Produces a shallow clone of the object, that is, if JSON.stringify can handle it.<br>\n                 * The object must be non-circular.\n                 * @return {*} A shallow clone of the object.\n                 * @function\n                 */\n                clone: function clone () {\n                    return performWithCurrent(function (o) {\n                        if(typeof o === 'string' || typeof o === 'number') return o;\n\n                        try {\n                            return JSON.parse(JSON.stringify(o));\n                        }\n                        catch (e) {\n                            throw new Error('Unable to clone object: ' + e.message);\n                        }\n                    });\n                },\n\n                /**\n                 * Filters an array or object using only the types allowed. That is, if the item in the array is of a type listed\n                 * in the arguments, then it will be added to the filtered array. In this case 'array' is a valid type.\n                 * @param {...String} types A list of typeof types that are allowed in the array.\n                 * @return {Array<*>} An array filtered by only the allowed types.\n                 */\n                only: function only (types) {\n                    types = arguments[protoIdentifier].makeArray();\n\n                    return performWithCurrent(function (o) {\n                        // Allows the 'plural' form of the type...\n                        types[protoIdentifier].each(function (type, key) { this[key] = type.replace(/s$/, ''); });\n\n                        if(typeof o !== 'object') return o;\n                        var isArray  = o instanceof Array ? true : false,\n                            filtered = isArray ? [] : {};\n\n                        o[protoIdentifier].each(function (item, key) {\n                            if(types.indexOf(typeof item) !== -1 || (item instanceof Array && types.indexOf('array') !== -1)) {\n                                if(isArray) filtered.push(item); else filtered[key] = item;\n                            }\n                        });\n                        return filtered;\n                    });\n                },\n\n                /**\n                 * Filters an object using the given predicate function. For objects, a new object will be returned, with\n                 * the values that passed the predicate function. For strings, a new string will be returned with the characters\n                 * that passed the predicate function. For numbers, a new number will be returned with the digits that passed\n                 * the predicate function. Functions will be operated on as strings.\n                 * @param {Function} predicate The function used to filter the object.\n                 * @return {*} The filtered object\n                 */\n                where: function where (predicate) {\n                    return performWithCurrent(function (o) {\n                        if(!(predicate instanceof Function)) return o;\n\n                        var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                            filtered = !isObject ? [] : {};\n\n                        o[protoIdentifier].each(function (item, key) {\n                            if(predicate.call(item, item)) {\n                                if(isObject) filtered[key] = item; else filtered.push(item);\n                            }\n                        });\n\n                        if(typeof o !== 'object') filtered = filtered.join('');\n                        return filtered;\n                    });\n                },\n\n                /**\n                 * Filters an object by keys using the given predicate function.\n                 * @param {Function} predicate The function used to filter the object.\n                 * @return {*} The filtered object\n                 */\n                whereKeys: function whereKeys (predicate) {\n                    return performWithCurrent(function (o) {\n                        if(!(predicate instanceof Function)) return o;\n\n                        var isObject = typeof o === 'object' && !(o instanceof Array) ? true : false,\n                            filtered = !isObject ? [] : {};\n\n                        o[protoIdentifier].each(function (item, key) {\n                            if(predicate.call(key, key)) {\n                                if(isObject) filtered[key] = item; else filtered.push(item);\n                            }\n                        });\n\n                        if(typeof o !== 'object') filtered = filtered.join('');\n                        return filtered;\n                    });\n                },\n\n                /**\n                 * For objects, inverts the objects keys/values. If the value isn't a number or array, it will be omitted.\n                 * For strings, it will reverse the string.\n                 * For number, it will compute the number's inverse (i.e. 1 / x).\n                 * @return {*} The inverse, as described above.\n                 */\n                invert: function invert () {\n                    return performWithCurrent(function (o) {\n                        if(typeof o === 'string') return o[protoIdentifier].reverse();\n                        if(typeof o === 'number') return 1 / o;\n\n                        var obj = {};\n                        o[protoIdentifier].each(function (item, key) {\n                            if(typeof item === 'string' || typeof item === 'number') obj[item] = key;\n                        });\n\n                        return obj;\n                    });\n                },\n\n                /**\n                 * Returns the maximum item in the object.\n                 * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n                 * @return {*} The maximum item in the object collection.\n                 */\n                max: function max (func) {\n                    if(!(func instanceof Function)) func = undefined;\n\n                    return performWithCurrent(function (o) {\n                        if(typeof o !== 'object') return o;\n                        var max, maxValue;\n\n                        if(!func) {\n                            max = o[protoIdentifier].first();\n                            o[protoIdentifier].each(1, function (item) {\n                                if(item >= max) max = item;\n                            });\n                        }\n                        else {\n                            max = o[protoIdentifier].first();\n                            maxValue = func.call(max, max);\n\n                            o[protoIdentifier].each(1, function (item) {\n                                if(func.call(item, item) >= maxValue) max = item;\n                            });\n                        }\n                        return max;\n                    });\n                },\n\n                /**\n                 * Returns the minimum item in the object.\n                 * @param {Function=} func If passed, the function will be invoked for each item in the object collection.\n                 * @return {*} The minimum item in the object collection.\n                 */\n                min: function min (func) {\n                    if(!(func instanceof Function)) func = undefined;\n\n                    return performWithCurrent(function (o) {\n                        if(typeof o !== 'object') return o;\n                        var min, minValue;\n\n                        if(!func) {\n                            min = o[protoIdentifier].first();\n                            o[protoIdentifier].each(1, function (item) {\n                                if(item <= min) min = item;\n                            });\n                        }\n                        else {\n                            min = o[protoIdentifier].first();\n                            minValue = func.call(min, min);\n\n                            o[protoIdentifier].each(1, function (item) {\n                                if(func.call(item, item) <= minValue) min = item;\n                            });\n                        }\n                        return min;\n                    });\n                },\n\n                /**\n                 * Tests whether or not the object has a method called 'method'.\n                 * @param {String} method The name of the method to test existence for.\n                 * @return {Boolean} True if the object has a function called 'method', false otherwise.\n                 */\n                implements: function _implements (method) {\n                    return performWithCurrent(function (o) {\n                        return o && o[method] instanceof Function;\n                    });\n                },\n\n                /**\n                 * Same as Object.j.implements, excepct with a hasOwnProperty check.\n                 * @param {String} method The name of the method to test existence for.\n                 * @return {Boolean} True if the object has its own function called 'method', false otherwise.\n                 */\n                implementsOwn: function implementsOwn (method) {\n                    return performWithCurrent(function (o) {\n                        return o && o[method] instanceof Function && o.hasOwnProperty(method);\n                    });\n                }\n            }\n        };\n\n        // ------------------------------------------- OTHER HELPER FUNCTIONS ------------------------------------------- //\n        // These will be attached to the exports object in Node.js, or the window object in the browser.\n\n        /**\n         * A generic, do nothing function that can be used over and over again to assign empty callback arguments to. It's better\n         * to re-use this function than continuously create empty functions all over the place.\n         * @type {Function}\n         */\n        JLib.NULLF = function NullFunction () {};\n\n        /**\n         * Returns 'enabled' if the value of 'i' evaluates to true, 'disabled otherwise'\n         * @param {*} i The thingy to evaluate\n         * @return {String} Either 'enabled' or 'disabled'\n         */\n        JLib.enabledOrDisabled = function enabledOrDisabled (i) {\n            return i ? 'enabled' : 'disabled';\n        };\n\n        /**\n         * A replacer function for JSON, to replace functions with '[Function (function name|anonymous)]'. A callback for\n         * JSON.stringify. @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n         */\n        JLib.JSONFunctionReplacer = function JSONFunctionReplacer (key, value) {\n            if(value instanceof Function) return '[Function: ' + (value.name || 'anonymous') + ']';\n            return value;\n        };\n\n        /**\n         * Get's a callback from an array like object.\n         * @return {Function} The supplied callback, or a fake one.\n         */\n        JLib.getCallback = function getCallback (argumentsObject) {\n            var last = argumentsObject[protoIdentifier].last();\n            return last instanceof Function ? last : JLib.NULLF;\n        };\n\n        /**\n         * Stores user created tokens\n         * @type {Object}\n         */\n        var customTokens = {};\n\n        /**\n         * Replaces string tokens ([.*]) with token values\n         * @param {String} s The string containing tokens to replace\n         * @return {String} The token-replaced string\n         */\n        JLib.replaceStringTokens = function replaceStringTokens (s) {\n            if(typeof s === 'string') {\n                s = s.replace(/\\[\\$DATE-TIME-24]/g , new Date().toLocaleString('en-US', { hour12: false }))\n                 .replace(/\\[\\$DATE-TIME]/g    , new Date().toLocaleString())\n                 .replace(/\\[\\$NOW]/g          , Date.now().toString())\n                 .replace(/\\[\\$TIME]/g         , new Date().toLocaleTimeString())\n                 .replace(/\\[\\$DATE]/g         , new Date().toLocaleDateString())\n                 .replace(/\\[\\$(HOME|~)]/g     , exports.USER_HOME.withoutTrailingSlash())\n                 .replace(/\\[\\$TMPDIR]/g       , exports.TMPDIR);\n\n                for(var i in customTokens) {\n                    if(customTokens.hasOwnProperty(i))\n                        s = s.replace(new RegExp('\\\\[\\\\$' + customTokens[i].name + ']', 'g'), customTokens[i].value);\n                }\n            }\n\n            return s;\n        };\n\n        /**\n         * Create a user defined string token that will be replace with the specified value when JPCUtils.replaceStringTokens is called.\n         * <strong>Note: All token names will be uppercased and prefixed with a dollar sign ($)</strong><br>\n         * For example, creating a token named 'example' or 'EXAMPLE' or 'Example' will replace the string [$EXAMPLE] with the given value.<br><br>\n         * Tokens can overwrite other tokens, by using the same name, converted to uppercase. So creating a token named 'example'\n         * after creating a token named 'ExAmPlE' will overwrite the first.\n         * @param {String} named The name of the string token\n         * @param {String} withValue The value to replace the string token with\n         * @return {JPCUtils} The current JPCUtils instance\n         */\n        JLib.createToken = function createToken (named, withValue) {\n            if(typeof named !== 'string')\n                throw new Error('JPLib.exportable.createToken expected argument #0 (named) to be a string, got: ' + typeof named);\n\n            if(typeof value !== 'string')\n                throw new Error('JPLib.exportable.createToken expected argument #1 (withValue) to be a string, got: ' + typeof withValue);\n\n            named = named.toUpperCase();\n            customTokens[named] = { name: named, value: withValue };\n            return exports;\n        };\n\n        /**\n         * Creates a single arguments string from an object\n         * @param {Object<String>} o The object to convert to an arguments string\n         * @param {Boolean=} [produceArray=false] If true, an array of arguments will be returned, otherwise a string\n         * (an array joined by ' ') will be returned.\n         * @return {String} The arguments string\n         */\n        JLib.generateArgumentsStringFromObject = function generateArgumentsStringFromObject (o, produceArray) {\n            if(o === undefined || o === null || o instanceof Function) return [];\n            if(typeof o === 'string' || typeof o === 'number') return [o.toString()];\n\n            var args = [];\n            if(o instanceof Array) {\n                o[protoIdentifier].each(function (val) { args.push(val.toString()); });\n                return args;\n            }\n\n            o[protoIdentifier].each(function (val, key) {\n                if(key === '_' && val instanceof Array) {\n                    args = args.concat(val);\n                }\n                else {\n                    if(key.length === 1) args.push('-' + key, val); else args.push('--' + key + '=' + val.toString());\n                }\n            });\n            return produceArray ? args : args.join(' ');\n        };\n\n        /**\n         * Generate a random string of alphanumeric characters\n         * @memberof String\n         * @param {Number=} length The maximum length of the string. If omitted, a random number between 1 - 100 will be used.\n         * @param {String=} [possible='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'] A string of possible\n         * characters that will be used by the function to generate the random string.\n         * @returns {String} A random string\n         * @function\n         */\n        JLib.randomString = function randomString (length, possible) {\n            var text = '';\n            possible = typeof possible === 'string' ? possible : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n            length = length || Math.floor(Math.random() * 101);\n            for(var i = 0; i < length; i++)\n                text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n            return text;\n        };\n\n        /**\n         * True if and only if all objects provided are null.\n         * @param {...*} o The objects to evaluate\n         * @return {Boolean}\n         */\n        JLib.isNull = function () {\n            return arguments[protoIdentifier].every(function (item) {\n                if(item !== null) return false;\n            });\n        };\n\n        /**\n         * True if and only if all objects provided are undefined.\n         * @param {...*} o The objects to evaluate\n         * @return {Boolean}\n         */\n        JLib.isUndefined = function () {\n            return arguments[protoIdentifier].every(function (item) {\n                if(item !== undefined) return false;\n            });\n        };\n\n        // Apply the following to the JLib object.\n        var staticIdentityFunction = function () {\n            var args   = arguments[protoIdentifier].makeArray(),\n                method = this;\n\n            args.shift();\n            return arguments[protoIdentifier].every(function (item) {\n                if(item) return item[protoIdentifier][method]();\n                return false;\n            });\n        };\n\n        for(var n = ['isArray', 'isEmpty', 'isNumeric', 'isPureObject', 'isString', 'isBoolean', 'isFunction'], o = n.shift(); o; o = n.shift()) {\n            JLib[o] = staticIdentityFunction.bind(o);\n        }\n\n        if(IS_NODE) require(require('path').join(__dirname, 'lib', 'NodeAddons'))(JLib);\n        return JLib.init();\n    };\n\n    // ------------------------------------------------ EXPORT JLIB ------------------------------------------------- //\n    // JLib will be exported as a function, so the user can define custom a custom prototype namespace identifier.\n    // It's possible to call the function multiple times, adding the library to each prototype under different names,\n    // but this is highly discouraged.\n\n    var jlibs = {},\n        jInit = function (protoIdentifier) {\n            if(typeof protoIdentifier !== 'string') protoIdentifier = 'jl';\n            if(jlibs[protoIdentifier]) return jlibs[protoIdentifier];\n            return JLibrary(protoIdentifier);\n        };\n\n    return IS_NODE ?\n        module.exports = jInit :\n        window.JLib    = jInit ;\n}());\n","exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":"/source/"}